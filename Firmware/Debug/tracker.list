
tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003160  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b6c  08003220  08003220  00013220  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d8c  08003d8c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08003d8c  08003d8c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d8c  08003d8c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d8c  08003d8c  00013d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d90  08003d90  00013d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000084  08003e18  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08003e18  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e32b  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241c  00000000  00000000  0002e3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000063d5  00000000  00000000  000307f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  00036bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000be0  00000000  00000000  000372a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010fe0  00000000  00000000  00037e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e8a9  00000000  00000000  00048e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000699a9  00000000  00000000  00057711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c10ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001620  00000000  00000000  000c110c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003208 	.word	0x08003208

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08003208 	.word	0x08003208

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <enable_gps>:
#include <stdio.h>
#include "gps.h"



uint8_t enable_gps(){
 8000258:	b570      	push	{r4, r5, r6, lr}
 800025a:	b08a      	sub	sp, #40	; 0x28
	const char gps_power_on_cmd[]= "AT+CGPSPWR=1\r";
 800025c:	220e      	movs	r2, #14
 800025e:	4911      	ldr	r1, [pc, #68]	; (80002a4 <enable_gps+0x4c>)
 8000260:	a802      	add	r0, sp, #8
 8000262:	f002 fb51 	bl	8002908 <memcpy>
	const char gps_set_mode_cold_cmd[]= "AT+CGPSRST=2\r";
 8000266:	220e      	movs	r2, #14
 8000268:	490f      	ldr	r1, [pc, #60]	; (80002a8 <enable_gps+0x50>)
 800026a:	a806      	add	r0, sp, #24
 800026c:	f002 fb4c 	bl	8002908 <memcpy>
	uint8_t power_on_status=0;
	uint8_t set_mode_status=0;

	power_on_status=send_AT_cmd(gps_power_on_cmd,"OK",0,NULL,RX_WAIT); 
 8000270:	26c8      	movs	r6, #200	; 0xc8
 8000272:	2300      	movs	r3, #0
 8000274:	4d0d      	ldr	r5, [pc, #52]	; (80002ac <enable_gps+0x54>)
 8000276:	001a      	movs	r2, r3
 8000278:	0029      	movs	r1, r5
 800027a:	9600      	str	r6, [sp, #0]
 800027c:	a802      	add	r0, sp, #8
 800027e:	f000 fe9b 	bl	8000fb8 <send_AT_cmd>
	set_mode_status=send_AT_cmd(gps_set_mode_cold_cmd,"OK",0,NULL,RX_WAIT); 
 8000282:	2300      	movs	r3, #0
	power_on_status=send_AT_cmd(gps_power_on_cmd,"OK",0,NULL,RX_WAIT); 
 8000284:	0004      	movs	r4, r0
	set_mode_status=send_AT_cmd(gps_set_mode_cold_cmd,"OK",0,NULL,RX_WAIT); 
 8000286:	001a      	movs	r2, r3
 8000288:	0029      	movs	r1, r5
 800028a:	9600      	str	r6, [sp, #0]
 800028c:	a806      	add	r0, sp, #24
 800028e:	f000 fe93 	bl	8000fb8 <send_AT_cmd>

	return (power_on_status && set_mode_status);
 8000292:	2300      	movs	r3, #0
 8000294:	429c      	cmp	r4, r3
 8000296:	d002      	beq.n	800029e <enable_gps+0x46>
 8000298:	0003      	movs	r3, r0
 800029a:	1e5a      	subs	r2, r3, #1
 800029c:	4193      	sbcs	r3, r2
 800029e:	b2d8      	uxtb	r0, r3
}
 80002a0:	b00a      	add	sp, #40	; 0x28
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	080033dd 	.word	0x080033dd
 80002a8:	080033eb 	.word	0x080033eb
 80002ac:	08003977 	.word	0x08003977

080002b0 <get_gps_location>:


uint8_t get_gps_location(char * coordinates){
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	b0c6      	sub	sp, #280	; 0x118
	 * "Location not Fix" 
	 * "Location 2D Fix"
	 * "Location 3D Fix"
	 */
	static const char gps_get_status_cmd[]= "AT+CGPSSTATUS?\r";	
	const char gps_get_location_cmd[]= "AT+CGPSINF=0\r";
 80002b4:	220e      	movs	r2, #14
 80002b6:	4910      	ldr	r1, [pc, #64]	; (80002f8 <get_gps_location+0x48>)
uint8_t get_gps_location(char * coordinates){
 80002b8:	0005      	movs	r5, r0
	const char gps_get_location_cmd[]= "AT+CGPSINF=0\r";
 80002ba:	a802      	add	r0, sp, #8
 80002bc:	f002 fb24 	bl	8002908 <memcpy>
	char local_rx_buffer[RX_BUFFER_LENGTH];
	uint8_t err_status=0;


	/*Check GPS Fix status*/
	if (send_AT_cmd(gps_get_status_cmd,"Location 3D Fix",0,NULL,RX_WAIT)){
 80002c0:	26c8      	movs	r6, #200	; 0xc8
 80002c2:	2300      	movs	r3, #0
 80002c4:	490d      	ldr	r1, [pc, #52]	; (80002fc <get_gps_location+0x4c>)
 80002c6:	001a      	movs	r2, r3
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <get_gps_location+0x50>)
 80002ca:	9600      	str	r6, [sp, #0]
 80002cc:	f000 fe74 	bl	8000fb8 <send_AT_cmd>
 80002d0:	1e04      	subs	r4, r0, #0
 80002d2:	d00d      	beq.n	80002f0 <get_gps_location+0x40>

		err_status=send_AT_cmd(gps_get_location_cmd,"OK",1,local_rx_buffer,RX_WAIT);
 80002d4:	2201      	movs	r2, #1
 80002d6:	490b      	ldr	r1, [pc, #44]	; (8000304 <get_gps_location+0x54>)
 80002d8:	9600      	str	r6, [sp, #0]
 80002da:	ab06      	add	r3, sp, #24
 80002dc:	a802      	add	r0, sp, #8
 80002de:	f000 fe6b 	bl	8000fb8 <send_AT_cmd>
		*/

		/* Extract the coordinates from the cmd reply and copy only 
		*	the coordinates into function parameter char * coordinates
		*/
		memcpy(coordinates,local_rx_buffer+27,GPS_COORDINATES_LENGTH);
 80002e2:	2133      	movs	r1, #51	; 0x33
		err_status=send_AT_cmd(gps_get_location_cmd,"OK",1,local_rx_buffer,RX_WAIT);
 80002e4:	0004      	movs	r4, r0
		memcpy(coordinates,local_rx_buffer+27,GPS_COORDINATES_LENGTH);
 80002e6:	2217      	movs	r2, #23
 80002e8:	0028      	movs	r0, r5
 80002ea:	4469      	add	r1, sp
 80002ec:	f002 fb0c 	bl	8002908 <memcpy>
		return err_status;
	}
	else
		/* GPS has no fix, return 0 to indicate failure*/
		return FAIL;
}
 80002f0:	0020      	movs	r0, r4
 80002f2:	b046      	add	sp, #280	; 0x118
 80002f4:	bd70      	pop	{r4, r5, r6, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	08003409 	.word	0x08003409
 80002fc:	080033f9 	.word	0x080033f9
 8000300:	08003417 	.word	0x08003417
 8000304:	08003977 	.word	0x08003977

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b510      	push	{r4, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030a:	2401      	movs	r4, #1
{
 800030c:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	2228      	movs	r2, #40	; 0x28
 8000310:	2100      	movs	r1, #0
 8000312:	a80c      	add	r0, sp, #48	; 0x30
 8000314:	f002 fb01 	bl	800291a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	2210      	movs	r2, #16
 800031a:	2100      	movs	r1, #0
 800031c:	a801      	add	r0, sp, #4
 800031e:	f002 fafc 	bl	800291a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000322:	2100      	movs	r1, #0
 8000324:	2214      	movs	r2, #20
 8000326:	a805      	add	r0, sp, #20
 8000328:	f002 faf7 	bl	800291a <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800032e:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000330:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	f001 fa69 	bl	8001808 <HAL_RCC_OscConfig>
 8000336:	1e01      	subs	r1, r0, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800033a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800033c:	e7fe      	b.n	800033c <SystemClock_Config+0x34>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033e:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000340:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000342:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000344:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000346:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000348:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034a:	f001 fc8f 	bl	8001c6c <HAL_RCC_ClockConfig>
 800034e:	2800      	cmp	r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x4e>
 8000352:	b672      	cpsid	i
  while (1)
 8000354:	e7fe      	b.n	8000354 <SystemClock_Config+0x4c>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000356:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000358:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800035a:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035c:	f001 fd1a 	bl	8001d94 <HAL_RCCEx_PeriphCLKConfig>
 8000360:	2800      	cmp	r0, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x60>
 8000364:	b672      	cpsid	i
  while (1)
 8000366:	e7fe      	b.n	8000366 <SystemClock_Config+0x5e>
}
 8000368:	b016      	add	sp, #88	; 0x58
 800036a:	bd10      	pop	{r4, pc}

0800036c <main>:
{
 800036c:	b570      	push	{r4, r5, r6, lr}
 800036e:	b09a      	sub	sp, #104	; 0x68
  HAL_Init();
 8000370:	f001 f8ac 	bl	80014cc <HAL_Init>
  SystemClock_Config();
 8000374:	f7ff ffc8 	bl	8000308 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000378:	2214      	movs	r2, #20
 800037a:	2100      	movs	r1, #0
 800037c:	a812      	add	r0, sp, #72	; 0x48
 800037e:	f002 facc 	bl	800291a <memset>
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000382:	2080      	movs	r0, #128	; 0x80
 8000384:	4b4a      	ldr	r3, [pc, #296]	; (80004b0 <main+0x144>)
 8000386:	03c0      	lsls	r0, r0, #15
 8000388:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 800038a:	24c0      	movs	r4, #192	; 0xc0
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800038c:	4301      	orrs	r1, r0
 800038e:	6159      	str	r1, [r3, #20]
 8000390:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 8000392:	4d48      	ldr	r5, [pc, #288]	; (80004b4 <main+0x148>)
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000394:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000396:	2080      	movs	r0, #128	; 0x80
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000398:	9202      	str	r2, [sp, #8]
 800039a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	6959      	ldr	r1, [r3, #20]
 800039e:	0280      	lsls	r0, r0, #10
 80003a0:	4301      	orrs	r1, r0
 80003a2:	6159      	str	r1, [r3, #20]
 80003a4:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 80003a6:	01a4      	lsls	r4, r4, #6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4002      	ands	r2, r0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003aa:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	9203      	str	r2, [sp, #12]
 80003ae:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b0:	6959      	ldr	r1, [r3, #20]
 80003b2:	02c0      	lsls	r0, r0, #11
 80003b4:	4301      	orrs	r1, r0
 80003b6:	6159      	str	r1, [r3, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003b8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ba:	695a      	ldr	r2, [r3, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003bc:	0309      	lsls	r1, r1, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003be:	4002      	ands	r2, r0
 80003c0:	9204      	str	r2, [sp, #16]
 80003c2:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003c4:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 80003c6:	0028      	movs	r0, r5
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003c8:	430a      	orrs	r2, r1
 80003ca:	615a      	str	r2, [r3, #20]
 80003cc:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003d0:	400b      	ands	r3, r1
 80003d2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 80003d4:	0021      	movs	r1, r4
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003d6:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 80003d8:	f001 fa08 	bl	80017ec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003dc:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80003de:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e2:	0028      	movs	r0, r5
 80003e4:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e6:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ea:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ec:	f001 f942 	bl	8001674 <HAL_GPIO_Init>
	sim.AT_uart_instance=USART1;
 80003f0:	4b31      	ldr	r3, [pc, #196]	; (80004b8 <main+0x14c>)
	sim.power_on_pin=GPIO_PIN_9;
 80003f2:	2154      	movs	r1, #84	; 0x54
	sim.AT_uart_instance=USART1;
 80003f4:	9312      	str	r3, [sp, #72]	; 0x48
	sim.debug_uart_instance=USART2;
 80003f6:	4b31      	ldr	r3, [pc, #196]	; (80004bc <main+0x150>)
	sim.power_on_pin=GPIO_PIN_9;
 80003f8:	466a      	mov	r2, sp
	sim.debug_uart_instance=USART2;
 80003fa:	9313      	str	r3, [sp, #76]	; 0x4c
	sim.power_on_pin=GPIO_PIN_9;
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	1852      	adds	r2, r2, r1
 8000400:	009b      	lsls	r3, r3, #2
	sim.power_on_gpio=GPIOB; 
 8000402:	9514      	str	r5, [sp, #80]	; 0x50
	sim.power_on_pin=GPIO_PIN_9;
 8000404:	8013      	strh	r3, [r2, #0]
	sim.reset_gpio=GPIOF;
 8000406:	4b2e      	ldr	r3, [pc, #184]	; (80004c0 <main+0x154>)
	sim.reset_pin=GPIO_PIN_7;
 8000408:	466a      	mov	r2, sp
	sim.reset_gpio=GPIOF;
 800040a:	9316      	str	r3, [sp, #88]	; 0x58
	sim.reset_pin=GPIO_PIN_7;
 800040c:	2380      	movs	r3, #128	; 0x80
 800040e:	3108      	adds	r1, #8
 8000410:	1852      	adds	r2, r2, r1
 8000412:	8013      	strh	r3, [r2, #0]
	sim.status_gpio=GPIOC;
 8000414:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <main+0x158>)
	sim.status_pin=GPIO_PIN_14;
 8000416:	466a      	mov	r2, sp
	sim.status_gpio=GPIOC;
 8000418:	9318      	str	r3, [sp, #96]	; 0x60
	sim.status_pin=GPIO_PIN_14;
 800041a:	2380      	movs	r3, #128	; 0x80
 800041c:	3108      	adds	r1, #8
 800041e:	01db      	lsls	r3, r3, #7
 8000420:	1852      	adds	r2, r2, r1
 8000422:	8013      	strh	r3, [r2, #0]
	sim_power_off(&sim);
 8000424:	a812      	add	r0, sp, #72	; 0x48
 8000426:	f000 fd65 	bl	8000ef4 <sim_power_off>
	char gps_position[24]="Position_data";
 800042a:	ad0c      	add	r5, sp, #48	; 0x30
	sim_init(&sim);
 800042c:	a812      	add	r0, sp, #72	; 0x48
 800042e:	f000 fe13 	bl	8001058 <sim_init>
	enable_gps();
 8000432:	f7ff ff11 	bl	8000258 <enable_gps>
	enable_gprs();
 8000436:	f000 f875 	bl	8000524 <enable_gprs>
	char gps_position[24]="Position_data";
 800043a:	220e      	movs	r2, #14
 800043c:	4922      	ldr	r1, [pc, #136]	; (80004c8 <main+0x15c>)
 800043e:	0028      	movs	r0, r5
 8000440:	f002 fa62 	bl	8002908 <memcpy>
 8000444:	203e      	movs	r0, #62	; 0x3e
 8000446:	220a      	movs	r2, #10
 8000448:	0021      	movs	r1, r4
 800044a:	4468      	add	r0, sp
 800044c:	f002 fa65 	bl	800291a <memset>
	char ip_address[]="18.195.228.39";
 8000450:	220e      	movs	r2, #14
 8000452:	491e      	ldr	r1, [pc, #120]	; (80004cc <main+0x160>)
 8000454:	a808      	add	r0, sp, #32
 8000456:	f002 fa57 	bl	8002908 <memcpy>
			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 800045a:	2680      	movs	r6, #128	; 0x80
	char tcp_port[] = "1883";
 800045c:	2205      	movs	r2, #5
 800045e:	491c      	ldr	r1, [pc, #112]	; (80004d0 <main+0x164>)
 8000460:	a806      	add	r0, sp, #24
 8000462:	f002 fa51 	bl	8002908 <memcpy>
			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 8000466:	01b6      	lsls	r6, r6, #6
		if (get_gps_location(gps_position)){
 8000468:	0028      	movs	r0, r5
 800046a:	f7ff ff21 	bl	80002b0 <get_gps_location>
 800046e:	2800      	cmp	r0, #0
 8000470:	d011      	beq.n	8000496 <main+0x12a>
			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 8000472:	0031      	movs	r1, r6
 8000474:	480f      	ldr	r0, [pc, #60]	; (80004b4 <main+0x148>)
 8000476:	f001 f9bf 	bl	80017f8 <HAL_GPIO_TogglePin>
			if (publish_mqtt_msg(ip_address,tcp_port,"P","B1",gps_position))
 800047a:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <main+0x168>)
 800047c:	4a16      	ldr	r2, [pc, #88]	; (80004d8 <main+0x16c>)
 800047e:	9500      	str	r5, [sp, #0]
 8000480:	a906      	add	r1, sp, #24
 8000482:	a808      	add	r0, sp, #32
 8000484:	f000 fc18 	bl	8000cb8 <publish_mqtt_msg>
 8000488:	2800      	cmp	r0, #0
 800048a:	d00e      	beq.n	80004aa <main+0x13e>
				HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	4809      	ldr	r0, [pc, #36]	; (80004b4 <main+0x148>)
 8000490:	0149      	lsls	r1, r1, #5
 8000492:	f001 f9b1 	bl	80017f8 <HAL_GPIO_TogglePin>
		if (tx_error_count>10)
 8000496:	2c0a      	cmp	r4, #10
 8000498:	d902      	bls.n	80004a0 <main+0x134>
			system_reset(&sim);
 800049a:	a812      	add	r0, sp, #72	; 0x48
 800049c:	f000 fd6c 	bl	8000f78 <system_reset>
		HAL_Delay(2000);
 80004a0:	20fa      	movs	r0, #250	; 0xfa
 80004a2:	00c0      	lsls	r0, r0, #3
 80004a4:	f001 f834 	bl	8001510 <HAL_Delay>
		if (get_gps_location(gps_position)){
 80004a8:	e7de      	b.n	8000468 <main+0xfc>
			else tx_error_count++;
 80004aa:	3401      	adds	r4, #1
 80004ac:	b2e4      	uxtb	r4, r4
 80004ae:	e7f2      	b.n	8000496 <main+0x12a>
 80004b0:	40021000 	.word	0x40021000
 80004b4:	48000400 	.word	0x48000400
 80004b8:	40013800 	.word	0x40013800
 80004bc:	40004400 	.word	0x40004400
 80004c0:	48001400 	.word	0x48001400
 80004c4:	48000800 	.word	0x48000800
 80004c8:	08003220 	.word	0x08003220
 80004cc:	0800342c 	.word	0x0800342c
 80004d0:	0800343a 	.word	0x0800343a
 80004d4:	08003427 	.word	0x08003427
 80004d8:	0800342a 	.word	0x0800342a

080004dc <Error_Handler>:
 80004dc:	b672      	cpsid	i
  while (1)
 80004de:	e7fe      	b.n	80004de <Error_Handler+0x2>

080004e0 <sim_insert_PIN>:
#include <stdlib.h>

#include "sim808.h"
#include "network_functions.h"

uint8_t sim_insert_PIN(char * pin){
 80004e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	
	char PIN_insert_cmd[13]= "AT+CPIN=";
 80004e2:	2209      	movs	r2, #9
 80004e4:	490c      	ldr	r1, [pc, #48]	; (8000518 <sim_insert_PIN+0x38>)
 80004e6:	a802      	add	r0, sp, #8
 80004e8:	f002 fa0e 	bl	8002908 <memcpy>
 80004ec:	2011      	movs	r0, #17
 80004ee:	2204      	movs	r2, #4
 80004f0:	2100      	movs	r1, #0
 80004f2:	4468      	add	r0, sp
 80004f4:	f002 fa11 	bl	800291a <memset>
	
	/* build string PIN_insert_cmd = AT+CPIN=XXXX   SIM_PIN length is assumed = 4 */
	strcat(PIN_insert_cmd,SIM_PIN);   
	
	/* build string PIN_insert_cmd = AT+CPIN=XXXX\r */
	strcat(PIN_insert_cmd,"\r");      
 80004f8:	4908      	ldr	r1, [pc, #32]	; (800051c <sim_insert_PIN+0x3c>)
 80004fa:	a802      	add	r0, sp, #8
 80004fc:	f002 fa36 	bl	800296c <strcat>
	

	if (send_AT_cmd(PIN_insert_cmd,"OK",0,NULL,RX_TIMEOUT))
 8000500:	23fa      	movs	r3, #250	; 0xfa
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	4905      	ldr	r1, [pc, #20]	; (8000520 <sim_insert_PIN+0x40>)
 800050a:	001a      	movs	r2, r3
 800050c:	a802      	add	r0, sp, #8
 800050e:	f000 fd53 	bl	8000fb8 <send_AT_cmd>
		return SUCCESS;
	else
		return SUCCESS;
}
 8000512:	2001      	movs	r0, #1
 8000514:	b007      	add	sp, #28
 8000516:	bd00      	pop	{pc}
 8000518:	08003238 	.word	0x08003238
 800051c:	08003700 	.word	0x08003700
 8000520:	08003977 	.word	0x08003977

08000524 <enable_gprs>:
 * 5. Checks if ME is attached to GPRS service. if not it tries to attach.
 * 6. Checks if GPRS PDP context is defined, if not it tries to define it, enable it, and get IP address.
 * 
 * @return 1 if gprs is active, 2 if SIM card is not detected, 3 if SIM PIN is incorrect, 4 if the signal is weak, 0 otherwise
 */
uint8_t enable_gprs(){
 8000524:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	#ifdef DEBUG_MODE
	send_debug("Enable GPRS: Start");
 8000526:	48de      	ldr	r0, [pc, #888]	; (80008a0 <enable_gprs+0x37c>)
		#endif
		is_phone_enabled= send_AT_cmd(phone_status_check_cmd,"+CFUN: 1",1,local_rx_buffer,RX_TIMEOUT); 

	
		/* Clear receive buffer*/
		memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 8000528:	2780      	movs	r7, #128	; 0x80
uint8_t enable_gprs(){
 800052a:	b0c3      	sub	sp, #268	; 0x10c
	send_debug("Enable GPRS: Start");
 800052c:	f000 fc72 	bl	8000e14 <send_debug>
 8000530:	2503      	movs	r5, #3
		memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 8000532:	007f      	lsls	r7, r7, #1
			send_debug("Check if phone functionality of the module is enabled: send AT+CFUN?");
 8000534:	48db      	ldr	r0, [pc, #876]	; (80008a4 <enable_gprs+0x380>)
 8000536:	f000 fc6d 	bl	8000e14 <send_debug>
		is_phone_enabled= send_AT_cmd(phone_status_check_cmd,"+CFUN: 1",1,local_rx_buffer,RX_TIMEOUT); 
 800053a:	23fa      	movs	r3, #250	; 0xfa
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	2201      	movs	r2, #1
 8000540:	49d9      	ldr	r1, [pc, #868]	; (80008a8 <enable_gprs+0x384>)
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	48d9      	ldr	r0, [pc, #868]	; (80008ac <enable_gprs+0x388>)
 8000546:	ab02      	add	r3, sp, #8
 8000548:	f000 fd36 	bl	8000fb8 <send_AT_cmd>
		memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 800054c:	003a      	movs	r2, r7
		is_phone_enabled= send_AT_cmd(phone_status_check_cmd,"+CFUN: 1",1,local_rx_buffer,RX_TIMEOUT); 
 800054e:	0006      	movs	r6, r0
		memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 8000550:	2100      	movs	r1, #0
 8000552:	a802      	add	r0, sp, #8
 8000554:	f002 f9e1 	bl	800291a <memset>
		
			if (is_phone_enabled==1)
 8000558:	4cd5      	ldr	r4, [pc, #852]	; (80008b0 <enable_gprs+0x38c>)
 800055a:	2e01      	cmp	r6, #1
 800055c:	d00e      	beq.n	800057c <enable_gprs+0x58>
				if (trials_counter>=3)
					return ERR_PHONE_FUNCTION;
				else
					{
						#ifdef DEBUG_MODE
							send_debug("Enable phone functionality: send AT+CFUN=1");
 800055e:	48d5      	ldr	r0, [pc, #852]	; (80008b4 <enable_gprs+0x390>)
 8000560:	f000 fc58 	bl	8000e14 <send_debug>
						#endif
						send_AT_cmd(enable_phone_function_cmd,"OK",FALSE,NULL,3*RX_TIMEOUT);
 8000564:	4bd4      	ldr	r3, [pc, #848]	; (80008b8 <enable_gprs+0x394>)
	while(trials_counter <3){
 8000566:	3d01      	subs	r5, #1
						send_AT_cmd(enable_phone_function_cmd,"OK",FALSE,NULL,3*RX_TIMEOUT);
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2300      	movs	r3, #0
 800056c:	0021      	movs	r1, r4
 800056e:	001a      	movs	r2, r3
 8000570:	48d2      	ldr	r0, [pc, #840]	; (80008bc <enable_gprs+0x398>)
	while(trials_counter <3){
 8000572:	b2ed      	uxtb	r5, r5
						send_AT_cmd(enable_phone_function_cmd,"OK",FALSE,NULL,3*RX_TIMEOUT);
 8000574:	f000 fd20 	bl	8000fb8 <send_AT_cmd>
	while(trials_counter <3){
 8000578:	2d00      	cmp	r5, #0
 800057a:	d1db      	bne.n	8000534 <enable_gprs+0x10>
	static const char SIM_detect_cmd[]= "AT+CSMINS?\r";

	#ifdef DEBUG_MODE
		send_debug("Detect if SIM card is present: send AT+CSMINS?");
	#endif
	send_AT_cmd(SIM_detect_cmd,"OK",1,local_rx_buffer,RX_TIMEOUT);
 800057c:	26fa      	movs	r6, #250	; 0xfa
		send_debug("Detect if SIM card is present: send AT+CSMINS?");
 800057e:	48d0      	ldr	r0, [pc, #832]	; (80008c0 <enable_gprs+0x39c>)
	send_AT_cmd(SIM_detect_cmd,"OK",1,local_rx_buffer,RX_TIMEOUT);
 8000580:	00b6      	lsls	r6, r6, #2
		send_debug("Detect if SIM card is present: send AT+CSMINS?");
 8000582:	f000 fc47 	bl	8000e14 <send_debug>
	send_AT_cmd(SIM_detect_cmd,"OK",1,local_rx_buffer,RX_TIMEOUT);
 8000586:	2201      	movs	r2, #1
 8000588:	0021      	movs	r1, r4
 800058a:	ab02      	add	r3, sp, #8
 800058c:	48cd      	ldr	r0, [pc, #820]	; (80008c4 <enable_gprs+0x3a0>)
 800058e:	9600      	str	r6, [sp, #0]
 8000590:	f000 fd12 	bl	8000fb8 <send_AT_cmd>
	
	if (!is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"+CSMINS: 0,1",sizeof("+CSMINS: 0,1")-1)) 
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	230c      	movs	r3, #12
 8000598:	4acb      	ldr	r2, [pc, #812]	; (80008c8 <enable_gprs+0x3a4>)
 800059a:	0049      	lsls	r1, r1, #1
 800059c:	a802      	add	r0, sp, #8
 800059e:	f000 fcf1 	bl	8000f84 <is_subarray_present>
		return ERR_SIM_PRESENCE;
 80005a2:	2531      	movs	r5, #49	; 0x31
	if (!is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"+CSMINS: 0,1",sizeof("+CSMINS: 0,1")-1)) 
 80005a4:	2800      	cmp	r0, #0
 80005a6:	d100      	bne.n	80005aa <enable_gprs+0x86>
 80005a8:	e11c      	b.n	80007e4 <enable_gprs+0x2c0>
	/*clear buffer for next use*/
	memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH); 
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	2100      	movs	r1, #0
 80005ae:	0052      	lsls	r2, r2, #1
 80005b0:	a802      	add	r0, sp, #8
 80005b2:	f002 f9b2 	bl	800291a <memset>
	static char PIN_insert_cmd[13]= "AT+CPIN=";
	uint8_t pin_status=0;
	
	/* send command to Check if PIN is required*/
	#ifdef DEBUG_MODE
		send_debug("Check if PIN code is required: send AT+CPIN?");
 80005b6:	48c5      	ldr	r0, [pc, #788]	; (80008cc <enable_gprs+0x3a8>)
 80005b8:	f000 fc2c 	bl	8000e14 <send_debug>
	#endif
	send_AT_cmd(PIN_status_cmd,"OK",1,local_rx_buffer,RX_TIMEOUT);
 80005bc:	2201      	movs	r2, #1
 80005be:	0021      	movs	r1, r4
 80005c0:	ab02      	add	r3, sp, #8
 80005c2:	48c3      	ldr	r0, [pc, #780]	; (80008d0 <enable_gprs+0x3ac>)
 80005c4:	9600      	str	r6, [sp, #0]
 80005c6:	f000 fcf7 	bl	8000fb8 <send_AT_cmd>
	
	/* Note: the module replies READY if the PIN is not required*/
	/* If the PIN is required, then insert PIN, if the PIN is wrong then exit*/
	pin_status=is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"READY",sizeof("READY")-1); 
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	2305      	movs	r3, #5
 80005ce:	4ac1      	ldr	r2, [pc, #772]	; (80008d4 <enable_gprs+0x3b0>)
 80005d0:	0049      	lsls	r1, r1, #1
 80005d2:	a802      	add	r0, sp, #8
 80005d4:	f000 fcd6 	bl	8000f84 <is_subarray_present>
	if (pin_status==0){
 80005d8:	2800      	cmp	r0, #0
 80005da:	d100      	bne.n	80005de <enable_gprs+0xba>
 80005dc:	e0fb      	b.n	80007d6 <enable_gprs+0x2b2>
		if (!sim_insert_PIN(SIM_PIN))
			return ERR_PIN_WRONG;
	}
	/* Clear receive buffer */
	memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH); 
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	2100      	movs	r1, #0
			#endif
			send_AT_cmd(check_signal_cmd,"OK",1,local_rx_buffer,RX_TIMEOUT);
			/* Check the reply of the module in local_rx_buffer to see if the signal is weak.
			* Save the status in signal_status
			*/
			signal_status = !( is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"+CSQ: 0,",sizeof("+CSQ: 0,")-1) ||
 80005e2:	2780      	movs	r7, #128	; 0x80
	memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH); 
 80005e4:	0052      	lsls	r2, r2, #1
 80005e6:	a802      	add	r0, sp, #8
 80005e8:	f002 f997 	bl	800291a <memset>
 80005ec:	2503      	movs	r5, #3
			signal_status = !( is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"+CSQ: 0,",sizeof("+CSQ: 0,")-1) ||
 80005ee:	007f      	lsls	r7, r7, #1
			send_debug("Check GPRS signal quqality: send AT+CSQ");
 80005f0:	48b9      	ldr	r0, [pc, #740]	; (80008d8 <enable_gprs+0x3b4>)
 80005f2:	f000 fc0f 	bl	8000e14 <send_debug>
			send_AT_cmd(check_signal_cmd,"OK",1,local_rx_buffer,RX_TIMEOUT);
 80005f6:	23fa      	movs	r3, #250	; 0xfa
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	2201      	movs	r2, #1
 80005fc:	0021      	movs	r1, r4
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	48b6      	ldr	r0, [pc, #728]	; (80008dc <enable_gprs+0x3b8>)
 8000602:	ab02      	add	r3, sp, #8
 8000604:	f000 fcd8 	bl	8000fb8 <send_AT_cmd>
			signal_status = !( is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"+CSQ: 0,",sizeof("+CSQ: 0,")-1) ||
 8000608:	2308      	movs	r3, #8
 800060a:	0039      	movs	r1, r7
 800060c:	4ab4      	ldr	r2, [pc, #720]	; (80008e0 <enable_gprs+0x3bc>)
 800060e:	a802      	add	r0, sp, #8
 8000610:	f000 fcb8 	bl	8000f84 <is_subarray_present>
 8000614:	2600      	movs	r6, #0
 8000616:	42b0      	cmp	r0, r6
 8000618:	d107      	bne.n	800062a <enable_gprs+0x106>
				is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"99,",sizeof("99,")-1) );
 800061a:	2303      	movs	r3, #3
 800061c:	0039      	movs	r1, r7
 800061e:	4ab1      	ldr	r2, [pc, #708]	; (80008e4 <enable_gprs+0x3c0>)
 8000620:	a802      	add	r0, sp, #8
 8000622:	f000 fcaf 	bl	8000f84 <is_subarray_present>
			signal_status = !( is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"+CSQ: 0,",sizeof("+CSQ: 0,")-1) ||
 8000626:	4246      	negs	r6, r0
 8000628:	4146      	adcs	r6, r0
			/* Clear receive buffer*/
			memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 800062a:	003a      	movs	r2, r7
 800062c:	2100      	movs	r1, #0
 800062e:	a802      	add	r0, sp, #8
 8000630:	f002 f973 	bl	800291a <memset>
		
			if (signal_status)
 8000634:	2e00      	cmp	r6, #0
 8000636:	d107      	bne.n	8000648 <enable_gprs+0x124>
			else
				if (trials_counter>=3)
					return ERR_WEAK_SIGNAL;
				/* if the signal is weak, wait 1 second before measuring again */
				else
					HAL_Delay(4000);
 8000638:	20fa      	movs	r0, #250	; 0xfa
		while(trials_counter <3){
 800063a:	3d01      	subs	r5, #1
					HAL_Delay(4000);
 800063c:	0100      	lsls	r0, r0, #4
		while(trials_counter <3){
 800063e:	b2ed      	uxtb	r5, r5
					HAL_Delay(4000);
 8000640:	f000 ff66 	bl	8001510 <HAL_Delay>
		while(trials_counter <3){
 8000644:	2d00      	cmp	r5, #0
 8000646:	d1d3      	bne.n	80005f0 <enable_gprs+0xcc>
		send_debug("Check Network Registration Status: send AT+CREG?");
	#endif
	send_AT_cmd(check_registration_cmd,"OK",TRUE,local_rx_buffer,RX_TIMEOUT);
	
	/*check the reply to determine if ME is registered at home network or roaming */
		registration_status= is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)",1",sizeof(",1")-1) ||
 8000648:	2780      	movs	r7, #128	; 0x80
			signal_status = !( is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"+CSQ: 0,",sizeof("+CSQ: 0,")-1) ||
 800064a:	2603      	movs	r6, #3
		registration_status= is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)",1",sizeof(",1")-1) ||
 800064c:	007f      	lsls	r7, r7, #1
		send_debug("Check Network Registration Status: send AT+CREG?");
 800064e:	48a6      	ldr	r0, [pc, #664]	; (80008e8 <enable_gprs+0x3c4>)
 8000650:	f000 fbe0 	bl	8000e14 <send_debug>
	send_AT_cmd(check_registration_cmd,"OK",TRUE,local_rx_buffer,RX_TIMEOUT);
 8000654:	23fa      	movs	r3, #250	; 0xfa
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	2201      	movs	r2, #1
 800065a:	0021      	movs	r1, r4
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	48a3      	ldr	r0, [pc, #652]	; (80008ec <enable_gprs+0x3c8>)
 8000660:	ab02      	add	r3, sp, #8
 8000662:	f000 fca9 	bl	8000fb8 <send_AT_cmd>
		registration_status= is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)",1",sizeof(",1")-1) ||
 8000666:	2302      	movs	r3, #2
 8000668:	0039      	movs	r1, r7
 800066a:	4aa1      	ldr	r2, [pc, #644]	; (80008f0 <enable_gprs+0x3cc>)
 800066c:	a802      	add	r0, sp, #8
 800066e:	f000 fc89 	bl	8000f84 <is_subarray_present>
 8000672:	2501      	movs	r5, #1
 8000674:	2800      	cmp	r0, #0
 8000676:	d108      	bne.n	800068a <enable_gprs+0x166>
			is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)",5",sizeof(",5")-1);
 8000678:	2302      	movs	r3, #2
 800067a:	0039      	movs	r1, r7
 800067c:	4a9d      	ldr	r2, [pc, #628]	; (80008f4 <enable_gprs+0x3d0>)
 800067e:	a802      	add	r0, sp, #8
 8000680:	f000 fc80 	bl	8000f84 <is_subarray_present>
		registration_status= is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)",1",sizeof(",1")-1) ||
 8000684:	1e43      	subs	r3, r0, #1
 8000686:	4198      	sbcs	r0, r3
 8000688:	0005      	movs	r5, r0
	
	/*Clear receive buffer*/
	memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);	
 800068a:	003a      	movs	r2, r7
 800068c:	2100      	movs	r1, #0
 800068e:	a802      	add	r0, sp, #8
 8000690:	f002 f943 	bl	800291a <memset>
	
	if (registration_status)
 8000694:	2d00      	cmp	r5, #0
 8000696:	d10e      	bne.n	80006b6 <enable_gprs+0x192>
	else{
		if (trials_counter >= 3)
			return ERR_REGISTRATION;
		/* send command to register ME to network */
			#ifdef DEBUG_MODE
				send_debug("Register to network: send AT+CREG=1");
 8000698:	4897      	ldr	r0, [pc, #604]	; (80008f8 <enable_gprs+0x3d4>)
 800069a:	f000 fbbb 	bl	8000e14 <send_debug>
			#endif
		send_AT_cmd(register_ME_cmd,"OK",0,NULL,5*RX_TIMEOUT);
 800069e:	4b97      	ldr	r3, [pc, #604]	; (80008fc <enable_gprs+0x3d8>)
	while(trials_counter<3){
 80006a0:	3e01      	subs	r6, #1
		send_AT_cmd(register_ME_cmd,"OK",0,NULL,5*RX_TIMEOUT);
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	002a      	movs	r2, r5
 80006a6:	002b      	movs	r3, r5
 80006a8:	0021      	movs	r1, r4
 80006aa:	4895      	ldr	r0, [pc, #596]	; (8000900 <enable_gprs+0x3dc>)
	while(trials_counter<3){
 80006ac:	b2f6      	uxtb	r6, r6
		send_AT_cmd(register_ME_cmd,"OK",0,NULL,5*RX_TIMEOUT);
 80006ae:	f000 fc83 	bl	8000fb8 <send_AT_cmd>
	while(trials_counter<3){
 80006b2:	2e00      	cmp	r6, #0
 80006b4:	d1cb      	bne.n	800064e <enable_gprs+0x12a>
				send_AT_cmd(check_grps_attach_cmd,"OK",TRUE,local_rx_buffer,RX_TIMEOUT);

			/* Check the reply of the module in local_rx_buffer to see if the signal is weak.
			* Save the status in signal_status
			*/
			is_pdp_attached = !is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"CGATT: 0",sizeof("CGATT: 0")-1);
 80006b6:	2780      	movs	r7, #128	; 0x80
		registration_status= is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)",1",sizeof(",1")-1) ||
 80006b8:	2503      	movs	r5, #3
			is_pdp_attached = !is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"CGATT: 0",sizeof("CGATT: 0")-1);
 80006ba:	007f      	lsls	r7, r7, #1
					send_debug("Check if GPRS is attached: AT+CGATT?");
 80006bc:	4891      	ldr	r0, [pc, #580]	; (8000904 <enable_gprs+0x3e0>)
 80006be:	f000 fba9 	bl	8000e14 <send_debug>
				send_AT_cmd(check_grps_attach_cmd,"OK",TRUE,local_rx_buffer,RX_TIMEOUT);
 80006c2:	23fa      	movs	r3, #250	; 0xfa
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	2201      	movs	r2, #1
 80006c8:	0021      	movs	r1, r4
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	488e      	ldr	r0, [pc, #568]	; (8000908 <enable_gprs+0x3e4>)
 80006ce:	ab02      	add	r3, sp, #8
 80006d0:	f000 fc72 	bl	8000fb8 <send_AT_cmd>
			is_pdp_attached = !is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"CGATT: 0",sizeof("CGATT: 0")-1);
 80006d4:	0039      	movs	r1, r7
 80006d6:	4a8d      	ldr	r2, [pc, #564]	; (800090c <enable_gprs+0x3e8>)
 80006d8:	2308      	movs	r3, #8
 80006da:	a802      	add	r0, sp, #8
 80006dc:	f000 fc52 	bl	8000f84 <is_subarray_present>
			
				/* Clear receive buffer*/
			memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 80006e0:	003a      	movs	r2, r7
			is_pdp_attached = !is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"CGATT: 0",sizeof("CGATT: 0")-1);
 80006e2:	0006      	movs	r6, r0
			memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 80006e4:	2100      	movs	r1, #0
 80006e6:	a802      	add	r0, sp, #8
 80006e8:	f002 f917 	bl	800291a <memset>
		
			if (is_pdp_attached)
 80006ec:	2e00      	cmp	r6, #0
 80006ee:	d00e      	beq.n	800070e <enable_gprs+0x1ea>
				if (trials_counter>=3)
					return ERR_GPRS_ATTACH;
				/* if the signal is weak, wait 1 second before measuring again */
				else{
					#ifdef DEBUG_MODE
					send_debug("Attach PDP: send AT+CGATT=1");
 80006f0:	4887      	ldr	r0, [pc, #540]	; (8000910 <enable_gprs+0x3ec>)
 80006f2:	f000 fb8f 	bl	8000e14 <send_debug>
					#endif
					send_AT_cmd(grps_attach_cmd,"OK",FALSE,NULL,3*RX_TIMEOUT);
 80006f6:	4b70      	ldr	r3, [pc, #448]	; (80008b8 <enable_gprs+0x394>)
			while(trials_counter <3){
 80006f8:	3d01      	subs	r5, #1
					send_AT_cmd(grps_attach_cmd,"OK",FALSE,NULL,3*RX_TIMEOUT);
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2300      	movs	r3, #0
 80006fe:	0021      	movs	r1, r4
 8000700:	001a      	movs	r2, r3
 8000702:	4884      	ldr	r0, [pc, #528]	; (8000914 <enable_gprs+0x3f0>)
			while(trials_counter <3){
 8000704:	b2ed      	uxtb	r5, r5
					send_AT_cmd(grps_attach_cmd,"OK",FALSE,NULL,3*RX_TIMEOUT);
 8000706:	f000 fc57 	bl	8000fb8 <send_AT_cmd>
			while(trials_counter <3){
 800070a:	2d00      	cmp	r5, #0
 800070c:	d1d6      	bne.n	80006bc <enable_gprs+0x198>
	uint8_t pdp_deactivated=0;
	
	#ifdef DEBUG_MODE
		send_debug("Check if PDP context is deactivated [PDP DEACT]: send  AT+CIPSTATUS");
	#endif
	send_AT_cmd(check_gprs_state_cmd,"OK",TRUE,local_rx_buffer,RX_TIMEOUT);
 800070e:	25fa      	movs	r5, #250	; 0xfa
		send_debug("Check if PDP context is deactivated [PDP DEACT]: send  AT+CIPSTATUS");
 8000710:	4881      	ldr	r0, [pc, #516]	; (8000918 <enable_gprs+0x3f4>)
	send_AT_cmd(check_gprs_state_cmd,"OK",TRUE,local_rx_buffer,RX_TIMEOUT);
 8000712:	00ad      	lsls	r5, r5, #2
		send_debug("Check if PDP context is deactivated [PDP DEACT]: send  AT+CIPSTATUS");
 8000714:	f000 fb7e 	bl	8000e14 <send_debug>
	send_AT_cmd(check_gprs_state_cmd,"OK",TRUE,local_rx_buffer,RX_TIMEOUT);
 8000718:	2201      	movs	r2, #1
 800071a:	0021      	movs	r1, r4
 800071c:	ab02      	add	r3, sp, #8
 800071e:	487f      	ldr	r0, [pc, #508]	; (800091c <enable_gprs+0x3f8>)
 8000720:	9500      	str	r5, [sp, #0]
 8000722:	f000 fc49 	bl	8000fb8 <send_AT_cmd>

		
	/*When PDP is deactivated it is necessary to run  AT+CIPSHUT to bring the status to [IP INITIAL] */
	pdp_deactivated = is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"PDP DEACT",sizeof("PDP DEACT")-1);
 8000726:	2180      	movs	r1, #128	; 0x80
 8000728:	2309      	movs	r3, #9
 800072a:	4a7d      	ldr	r2, [pc, #500]	; (8000920 <enable_gprs+0x3fc>)
 800072c:	0049      	lsls	r1, r1, #1
 800072e:	a802      	add	r0, sp, #8
 8000730:	f000 fc28 	bl	8000f84 <is_subarray_present>
	if ( pdp_deactivated ) {
 8000734:	2800      	cmp	r0, #0
 8000736:	d158      	bne.n	80007ea <enable_gprs+0x2c6>
		#endif
		if(!send_AT_cmd(reset_PDP_cmd,"OK",FALSE,NULL,RX_TIMEOUT)) 
			return ERR_PDP_DEACTIVATED;
	}
	/*clear receive buffer*/
	memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 8000738:	2280      	movs	r2, #128	; 0x80
	static const char check_PDP_context_cmd[]= "AT+CSTT?\r";
	
	#ifdef DEBUG_MODE
		send_debug("Check if PDP context is correctly defined: send AT+CSTT?");
	#endif
	send_AT_cmd(check_PDP_context_cmd,"OK",TRUE,local_rx_buffer,RX_TIMEOUT);
 800073a:	26fa      	movs	r6, #250	; 0xfa
	memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 800073c:	2100      	movs	r1, #0
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	a802      	add	r0, sp, #8
 8000742:	f002 f8ea 	bl	800291a <memset>
	send_AT_cmd(check_PDP_context_cmd,"OK",TRUE,local_rx_buffer,RX_TIMEOUT);
 8000746:	00b6      	lsls	r6, r6, #2
		send_debug("Check if PDP context is correctly defined: send AT+CSTT?");
 8000748:	4876      	ldr	r0, [pc, #472]	; (8000924 <enable_gprs+0x400>)
 800074a:	f000 fb63 	bl	8000e14 <send_debug>
	send_AT_cmd(check_PDP_context_cmd,"OK",TRUE,local_rx_buffer,RX_TIMEOUT);
 800074e:	2201      	movs	r2, #1
 8000750:	0021      	movs	r1, r4
 8000752:	ab02      	add	r3, sp, #8
 8000754:	4874      	ldr	r0, [pc, #464]	; (8000928 <enable_gprs+0x404>)
 8000756:	9600      	str	r6, [sp, #0]
 8000758:	f000 fc2e 	bl	8000fb8 <send_AT_cmd>
		
	pdp_defined = ! is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"CMNET",sizeof("CMNET")-1);
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	2305      	movs	r3, #5
 8000760:	4a72      	ldr	r2, [pc, #456]	; (800092c <enable_gprs+0x408>)
 8000762:	0049      	lsls	r1, r1, #1
 8000764:	a802      	add	r0, sp, #8
 8000766:	f000 fc0d 	bl	8000f84 <is_subarray_present>
		
	if(pdp_defined==0){
 800076a:	2800      	cmp	r0, #0
 800076c:	d14b      	bne.n	8000806 <enable_gprs+0x2e2>
		#endif
		if(!send_AT_cmd(define_PDP_context_cmd,"OK",FALSE,NULL,RX_TIMEOUT)) 
			return ERR_PDP_DEFINE;
	}
	/*Clear receive buffer*/
	memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 800076e:	2280      	movs	r2, #128	; 0x80
	static const char activate_PDP_context_cmd[]= "AT+CIICR\r";
		
	#ifdef DEBUG_MODE
	send_debug("Check if PDP context is active: send AT+CIPSTATUS");
	#endif
	send_AT_cmd(check_gprs_state_cmd,"OK",TRUE,local_rx_buffer,RX_TIMEOUT); 
 8000770:	27fa      	movs	r7, #250	; 0xfa
	memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 8000772:	2100      	movs	r1, #0
 8000774:	0052      	lsls	r2, r2, #1
 8000776:	a802      	add	r0, sp, #8
 8000778:	f002 f8cf 	bl	800291a <memset>
	send_debug("Check if PDP context is active: send AT+CIPSTATUS");
 800077c:	486c      	ldr	r0, [pc, #432]	; (8000930 <enable_gprs+0x40c>)
 800077e:	f000 fb49 	bl	8000e14 <send_debug>
	send_AT_cmd(check_gprs_state_cmd,"OK",TRUE,local_rx_buffer,RX_TIMEOUT); 
 8000782:	4d66      	ldr	r5, [pc, #408]	; (800091c <enable_gprs+0x3f8>)
 8000784:	00bf      	lsls	r7, r7, #2
 8000786:	2201      	movs	r2, #1
 8000788:	0021      	movs	r1, r4
 800078a:	ab02      	add	r3, sp, #8
 800078c:	0028      	movs	r0, r5
 800078e:	9700      	str	r7, [sp, #0]
 8000790:	f000 fc12 	bl	8000fb8 <send_AT_cmd>
	
	/* Check if PDP context is defined and ready to be activated == [IP START] */
	pdp_ready = is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"IP START",sizeof("IP START")-1) ;
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	4a67      	ldr	r2, [pc, #412]	; (8000934 <enable_gprs+0x410>)
 8000798:	0049      	lsls	r1, r1, #1
 800079a:	2308      	movs	r3, #8
 800079c:	a802      	add	r0, sp, #8
 800079e:	f000 fbf1 	bl	8000f84 <is_subarray_present>
	
	/* Clear receive buffer */
	memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 80007a2:	2280      	movs	r2, #128	; 0x80
	pdp_ready = is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"IP START",sizeof("IP START")-1) ;
 80007a4:	0006      	movs	r6, r0
	memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 80007a6:	2100      	movs	r1, #0
 80007a8:	0052      	lsls	r2, r2, #1
 80007aa:	a802      	add	r0, sp, #8
 80007ac:	f002 f8b5 	bl	800291a <memset>

	/*if PDP context is correctly defined then activate it */
	if ( pdp_ready==1 ){
 80007b0:	2e01      	cmp	r6, #1
 80007b2:	d13f      	bne.n	8000834 <enable_gprs+0x310>
			
	#ifdef DEBUG_MODE
		send_debug("Activate PDP:send AT+CIIR");
 80007b4:	4860      	ldr	r0, [pc, #384]	; (8000938 <enable_gprs+0x414>)
 80007b6:	f000 fb2d 	bl	8000e14 <send_debug>
	#endif
		
		/* This command takes around 1 second to finish hence 1s wait time */ /*POSSIBLE BUG HERE*/
		if (!send_AT_cmd(activate_PDP_context_cmd,"",FALSE,NULL,1000)) {
 80007ba:	2300      	movs	r3, #0
 80007bc:	495f      	ldr	r1, [pc, #380]	; (800093c <enable_gprs+0x418>)
 80007be:	001a      	movs	r2, r3
 80007c0:	485f      	ldr	r0, [pc, #380]	; (8000940 <enable_gprs+0x41c>)
 80007c2:	9700      	str	r7, [sp, #0]
 80007c4:	f000 fbf8 	bl	8000fb8 <send_AT_cmd>
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d133      	bne.n	8000834 <enable_gprs+0x310>
			#ifdef DEBUG_MODE
			send_debug("Activate PDP: FAIL");
 80007cc:	485d      	ldr	r0, [pc, #372]	; (8000944 <enable_gprs+0x420>)
 80007ce:	f000 fb21 	bl	8000e14 <send_debug>
			#endif
			return ERR_PDP_ACTIVATE; 	
 80007d2:	2537      	movs	r5, #55	; 0x37
 80007d4:	e006      	b.n	80007e4 <enable_gprs+0x2c0>
		if (!sim_insert_PIN(SIM_PIN))
 80007d6:	4859      	ldr	r0, [pc, #356]	; (800093c <enable_gprs+0x418>)
 80007d8:	f7ff fe82 	bl	80004e0 <sim_insert_PIN>
			return ERR_PIN_WRONG;
 80007dc:	2532      	movs	r5, #50	; 0x32
		if (!sim_insert_PIN(SIM_PIN))
 80007de:	2800      	cmp	r0, #0
 80007e0:	d000      	beq.n	80007e4 <enable_gprs+0x2c0>
 80007e2:	e6fc      	b.n	80005de <enable_gprs+0xba>
		send_debug("Internet Connection: FAIL");
		send_debug(local_rx_buffer);
		#endif
		return FAIL;
	}
}
 80007e4:	0028      	movs	r0, r5
 80007e6:	b043      	add	sp, #268	; 0x10c
 80007e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_debug("[PDP DEACT] send  AT+CIPSHUT");
 80007ea:	4857      	ldr	r0, [pc, #348]	; (8000948 <enable_gprs+0x424>)
 80007ec:	f000 fb12 	bl	8000e14 <send_debug>
		if(!send_AT_cmd(reset_PDP_cmd,"OK",FALSE,NULL,RX_TIMEOUT)) 
 80007f0:	2300      	movs	r3, #0
 80007f2:	9500      	str	r5, [sp, #0]
 80007f4:	001a      	movs	r2, r3
 80007f6:	0021      	movs	r1, r4
 80007f8:	4854      	ldr	r0, [pc, #336]	; (800094c <enable_gprs+0x428>)
 80007fa:	f000 fbdd 	bl	8000fb8 <send_AT_cmd>
			return ERR_PDP_DEACTIVATED;
 80007fe:	2535      	movs	r5, #53	; 0x35
		if(!send_AT_cmd(reset_PDP_cmd,"OK",FALSE,NULL,RX_TIMEOUT)) 
 8000800:	2800      	cmp	r0, #0
 8000802:	d199      	bne.n	8000738 <enable_gprs+0x214>
 8000804:	e7ee      	b.n	80007e4 <enable_gprs+0x2c0>
		strcat(define_PDP_context_cmd,APN); /* AT+CSTT="APN */
 8000806:	4d52      	ldr	r5, [pc, #328]	; (8000950 <enable_gprs+0x42c>)
 8000808:	4952      	ldr	r1, [pc, #328]	; (8000954 <enable_gprs+0x430>)
 800080a:	0028      	movs	r0, r5
 800080c:	f002 f8ae 	bl	800296c <strcat>
		strcat(define_PDP_context_cmd,"\",\"\",\"\"\r"); /* AT+CSTT="APN","","" */
 8000810:	4951      	ldr	r1, [pc, #324]	; (8000958 <enable_gprs+0x434>)
 8000812:	0028      	movs	r0, r5
 8000814:	f002 f8aa 	bl	800296c <strcat>
			send_debug("define PDP context: send AT+CSTT=\"APN\",\"\",\"\"");
 8000818:	4850      	ldr	r0, [pc, #320]	; (800095c <enable_gprs+0x438>)
 800081a:	f000 fafb 	bl	8000e14 <send_debug>
		if(!send_AT_cmd(define_PDP_context_cmd,"OK",FALSE,NULL,RX_TIMEOUT)) 
 800081e:	2300      	movs	r3, #0
 8000820:	0028      	movs	r0, r5
 8000822:	001a      	movs	r2, r3
 8000824:	0021      	movs	r1, r4
 8000826:	9600      	str	r6, [sp, #0]
 8000828:	f000 fbc6 	bl	8000fb8 <send_AT_cmd>
			return ERR_PDP_DEFINE;
 800082c:	2536      	movs	r5, #54	; 0x36
		if(!send_AT_cmd(define_PDP_context_cmd,"OK",FALSE,NULL,RX_TIMEOUT)) 
 800082e:	2800      	cmp	r0, #0
 8000830:	d19d      	bne.n	800076e <enable_gprs+0x24a>
 8000832:	e7d7      	b.n	80007e4 <enable_gprs+0x2c0>
		send_debug("Check IP status: send AT+CIPSTATUS");
 8000834:	484a      	ldr	r0, [pc, #296]	; (8000960 <enable_gprs+0x43c>)
 8000836:	f000 faed 	bl	8000e14 <send_debug>
	send_AT_cmd(check_gprs_state_cmd,"OK",TRUE,local_rx_buffer,RX_TIMEOUT);
 800083a:	23fa      	movs	r3, #250	; 0xfa
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	2201      	movs	r2, #1
 8000840:	0021      	movs	r1, r4
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	0028      	movs	r0, r5
 8000846:	ab02      	add	r3, sp, #8
 8000848:	f000 fbb6 	bl	8000fb8 <send_AT_cmd>
	if ( is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"IP GPRSACT",sizeof("IP GPRSACT")-1) ){
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	230a      	movs	r3, #10
 8000850:	4a44      	ldr	r2, [pc, #272]	; (8000964 <enable_gprs+0x440>)
 8000852:	0049      	lsls	r1, r1, #1
 8000854:	a802      	add	r0, sp, #8
 8000856:	f000 fb95 	bl	8000f84 <is_subarray_present>
 800085a:	2800      	cmp	r0, #0
 800085c:	d100      	bne.n	8000860 <enable_gprs+0x33c>
 800085e:	e08b      	b.n	8000978 <enable_gprs+0x454>
		memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	2100      	movs	r1, #0
 8000864:	0052      	lsls	r2, r2, #1
 8000866:	a802      	add	r0, sp, #8
 8000868:	f002 f857 	bl	800291a <memset>
			send_debug("Get IP address: send AT+CIFSR");
 800086c:	483e      	ldr	r0, [pc, #248]	; (8000968 <enable_gprs+0x444>)
 800086e:	f000 fad1 	bl	8000e14 <send_debug>
		send_AT_cmd(get_IP_address_cmd,"OK",TRUE,local_rx_buffer,5*RX_TIMEOUT);
 8000872:	4b22      	ldr	r3, [pc, #136]	; (80008fc <enable_gprs+0x3d8>)
 8000874:	2201      	movs	r2, #1
 8000876:	0021      	movs	r1, r4
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	483c      	ldr	r0, [pc, #240]	; (800096c <enable_gprs+0x448>)
 800087c:	ab02      	add	r3, sp, #8
 800087e:	f000 fb9b 	bl	8000fb8 <send_AT_cmd>
		error=is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"ERROR",sizeof("ERROR")-1);
 8000882:	2180      	movs	r1, #128	; 0x80
 8000884:	2305      	movs	r3, #5
 8000886:	4a3a      	ldr	r2, [pc, #232]	; (8000970 <enable_gprs+0x44c>)
 8000888:	0049      	lsls	r1, r1, #1
 800088a:	a802      	add	r0, sp, #8
 800088c:	f000 fb7a 	bl	8000f84 <is_subarray_present>
		if ( error ) {
 8000890:	2800      	cmp	r0, #0
 8000892:	d071      	beq.n	8000978 <enable_gprs+0x454>
				send_debug("Get IP address: FAIL");
 8000894:	4837      	ldr	r0, [pc, #220]	; (8000974 <enable_gprs+0x450>)
 8000896:	f000 fabd 	bl	8000e14 <send_debug>
			return ERR_GET_IP;
 800089a:	2538      	movs	r5, #56	; 0x38
 800089c:	e7a2      	b.n	80007e4 <enable_gprs+0x2c0>
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	0800343f 	.word	0x0800343f
 80008a4:	08003452 	.word	0x08003452
 80008a8:	08003497 	.word	0x08003497
 80008ac:	08003bab 	.word	0x08003bab
 80008b0:	08003977 	.word	0x08003977
 80008b4:	080034a0 	.word	0x080034a0
 80008b8:	00000bb8 	.word	0x00000bb8
 80008bc:	08003b7c 	.word	0x08003b7c
 80008c0:	080034cb 	.word	0x080034cb
 80008c4:	08003b31 	.word	0x08003b31
 80008c8:	080034fa 	.word	0x080034fa
 80008cc:	08003507 	.word	0x08003507
 80008d0:	08003b27 	.word	0x08003b27
 80008d4:	08003534 	.word	0x08003534
 80008d8:	0800353a 	.word	0x0800353a
 80008dc:	08003b74 	.word	0x08003b74
 80008e0:	08003562 	.word	0x08003562
 80008e4:	0800356b 	.word	0x0800356b
 80008e8:	0800356f 	.word	0x0800356f
 80008ec:	08003b6a 	.word	0x08003b6a
 80008f0:	08003504 	.word	0x08003504
 80008f4:	080035a0 	.word	0x080035a0
 80008f8:	080035a3 	.word	0x080035a3
 80008fc:	00001388 	.word	0x00001388
 8000900:	08003bb5 	.word	0x08003bb5
 8000904:	080035c7 	.word	0x080035c7
 8000908:	08003b5f 	.word	0x08003b5f
 800090c:	080035ec 	.word	0x080035ec
 8000910:	080035f5 	.word	0x080035f5
 8000914:	08003b9f 	.word	0x08003b9f
 8000918:	08003611 	.word	0x08003611
 800091c:	08003b51 	.word	0x08003b51
 8000920:	08003655 	.word	0x08003655
 8000924:	0800365f 	.word	0x0800365f
 8000928:	08003b47 	.word	0x08003b47
 800092c:	08003698 	.word	0x08003698
 8000930:	080036bb 	.word	0x080036bb
 8000934:	080036ed 	.word	0x080036ed
 8000938:	0800372f 	.word	0x0800372f
 800093c:	08003be8 	.word	0x08003be8
 8000940:	08003b3d 	.word	0x08003b3d
 8000944:	08003749 	.word	0x08003749
 8000948:	0800369e 	.word	0x0800369e
 800094c:	08003bc0 	.word	0x08003bc0
 8000950:	20000000 	.word	0x20000000
 8000954:	080036f6 	.word	0x080036f6
 8000958:	080036f9 	.word	0x080036f9
 800095c:	08003702 	.word	0x08003702
 8000960:	0800375c 	.word	0x0800375c
 8000964:	0800377f 	.word	0x0800377f
 8000968:	0800378a 	.word	0x0800378a
 800096c:	08003b87 	.word	0x08003b87
 8000970:	080037a8 	.word	0x080037a8
 8000974:	080037ae 	.word	0x080037ae
	memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	2100      	movs	r1, #0
 800097c:	0052      	lsls	r2, r2, #1
 800097e:	a802      	add	r0, sp, #8
 8000980:	f001 ffcb 	bl	800291a <memset>
		send_debug(" Check if GPRS connection is ready: Send AT+CIPSTATUS");
 8000984:	481d      	ldr	r0, [pc, #116]	; (80009fc <enable_gprs+0x4d8>)
 8000986:	f000 fa45 	bl	8000e14 <send_debug>
	send_AT_cmd(check_gprs_state_cmd,"OK",TRUE,local_rx_buffer,RX_TIMEOUT);
 800098a:	23fa      	movs	r3, #250	; 0xfa
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	2201      	movs	r2, #1
 8000990:	0021      	movs	r1, r4
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	0028      	movs	r0, r5
 8000996:	ab02      	add	r3, sp, #8
 8000998:	f000 fb0e 	bl	8000fb8 <send_AT_cmd>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"IP STATUS",sizeof("IP STATUS")-1)  || 
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	2309      	movs	r3, #9
 80009a0:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <enable_gprs+0x4dc>)
 80009a2:	0049      	lsls	r1, r1, #1
 80009a4:	a802      	add	r0, sp, #8
 80009a6:	f000 faed 	bl	8000f84 <is_subarray_present>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"CONNECT",sizeof("CONNECT OK")-1) ||
 80009aa:	2800      	cmp	r0, #0
 80009ac:	d004      	beq.n	80009b8 <enable_gprs+0x494>
		send_debug("Internet Connection: Ready");
 80009ae:	4815      	ldr	r0, [pc, #84]	; (8000a04 <enable_gprs+0x4e0>)
 80009b0:	f000 fa30 	bl	8000e14 <send_debug>
		return SUCCESS;
 80009b4:	2501      	movs	r5, #1
 80009b6:	e715      	b.n	80007e4 <enable_gprs+0x2c0>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"TCP CONNECTING",sizeof("TCP CONNECTING")-1) || 
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	230e      	movs	r3, #14
 80009bc:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <enable_gprs+0x4e4>)
 80009be:	0049      	lsls	r1, r1, #1
 80009c0:	a802      	add	r0, sp, #8
 80009c2:	f000 fadf 	bl	8000f84 <is_subarray_present>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"IP STATUS",sizeof("IP STATUS")-1)  || 
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d1f1      	bne.n	80009ae <enable_gprs+0x48a>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"CONNECT",sizeof("CONNECT OK")-1) ||
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	230a      	movs	r3, #10
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <enable_gprs+0x4e8>)
 80009d0:	0049      	lsls	r1, r1, #1
 80009d2:	a802      	add	r0, sp, #8
 80009d4:	f000 fad6 	bl	8000f84 <is_subarray_present>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"TCP CONNECTING",sizeof("TCP CONNECTING")-1) || 
 80009d8:	2800      	cmp	r0, #0
 80009da:	d1e8      	bne.n	80009ae <enable_gprs+0x48a>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"ALREADY CONNECT",sizeof("ALREADY CONNECT")-1)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	230f      	movs	r3, #15
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <enable_gprs+0x4ec>)
 80009e2:	0049      	lsls	r1, r1, #1
 80009e4:	a802      	add	r0, sp, #8
 80009e6:	f000 facd 	bl	8000f84 <is_subarray_present>
 80009ea:	1e05      	subs	r5, r0, #0
	if (gprs_ready){
 80009ec:	d1df      	bne.n	80009ae <enable_gprs+0x48a>
		send_debug("Internet Connection: FAIL");
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <enable_gprs+0x4f0>)
 80009f0:	f000 fa10 	bl	8000e14 <send_debug>
		send_debug(local_rx_buffer);
 80009f4:	a802      	add	r0, sp, #8
 80009f6:	f000 fa0d 	bl	8000e14 <send_debug>
		return FAIL;
 80009fa:	e6f3      	b.n	80007e4 <enable_gprs+0x2c0>
 80009fc:	080037c3 	.word	0x080037c3
 8000a00:	080037f9 	.word	0x080037f9
 8000a04:	08003803 	.word	0x08003803
 8000a08:	0800381e 	.word	0x0800381e
 8000a0c:	08003835 	.word	0x08003835
 8000a10:	0800382d 	.word	0x0800382d
 8000a14:	0800383d 	.word	0x0800383d

08000a18 <open_tcp_connection>:





uint8_t open_tcp_connection(char * server_address, char * port){
 8000a18:	b530      	push	{r4, r5, lr}
 8000a1a:	b0e3      	sub	sp, #396	; 0x18c
	static const char get_tcp_status_cmd[]="AT+CIPSTATUS\r";
	char tcp_connect_cmd[128]= "AT+CIPSTART=\"TCP\",\"";
 8000a1c:	2214      	movs	r2, #20
uint8_t open_tcp_connection(char * server_address, char * port){
 8000a1e:	0005      	movs	r5, r0
 8000a20:	000c      	movs	r4, r1
	char tcp_connect_cmd[128]= "AT+CIPSTART=\"TCP\",\"";
 8000a22:	a802      	add	r0, sp, #8
 8000a24:	4963      	ldr	r1, [pc, #396]	; (8000bb4 <open_tcp_connection+0x19c>)
 8000a26:	f001 ff6f 	bl	8002908 <memcpy>
 8000a2a:	226c      	movs	r2, #108	; 0x6c
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	a807      	add	r0, sp, #28
 8000a30:	f001 ff73 	bl	800291a <memset>
	 * To avoid this case, it is recommended that the TCP keepalive timeout is should be decreased to 10 seconds on the server
	 * Which means, if the server doesn't receive any data through a tcp connection in 10 seconds, then it is closed.
	 */
	
		#ifdef DEBUG_MODE
			send_debug("Open TCP connection: START");
 8000a34:	4860      	ldr	r0, [pc, #384]	; (8000bb8 <open_tcp_connection+0x1a0>)
 8000a36:	f000 f9ed 	bl	8000e14 <send_debug>
		#endif
	
	
	/*** Check TCP/GPRS Status ***/
		#ifdef DEBUG_MODE
			send_debug("Check current TCP status: send AT+CIPSTATUS");
 8000a3a:	4860      	ldr	r0, [pc, #384]	; (8000bbc <open_tcp_connection+0x1a4>)
 8000a3c:	f000 f9ea 	bl	8000e14 <send_debug>
		#endif
	send_AT_cmd(get_tcp_status_cmd,"OK",TRUE,local_rx_buffer,RX_TIMEOUT);
 8000a40:	23fa      	movs	r3, #250	; 0xfa
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	2201      	movs	r2, #1
 8000a46:	495e      	ldr	r1, [pc, #376]	; (8000bc0 <open_tcp_connection+0x1a8>)
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	485e      	ldr	r0, [pc, #376]	; (8000bc4 <open_tcp_connection+0x1ac>)
 8000a4c:	ab22      	add	r3, sp, #136	; 0x88
 8000a4e:	f000 fab3 	bl	8000fb8 <send_AT_cmd>
	
	/* If the TCP/GPRS stack is not in usable status, then enable GPRS 
	 * else if there is an open TCP connection then close it.
	 */
	 
	 send_debug(local_rx_buffer);
 8000a52:	a822      	add	r0, sp, #136	; 0x88
 8000a54:	f000 f9de 	bl	8000e14 <send_debug>
	if ( 
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"IP INITIAL",sizeof("IP INITIAL")-1)	||
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	4a5a      	ldr	r2, [pc, #360]	; (8000bc8 <open_tcp_connection+0x1b0>)
 8000a5e:	0049      	lsls	r1, r1, #1
 8000a60:	a822      	add	r0, sp, #136	; 0x88
 8000a62:	f000 fa8f 	bl	8000f84 <is_subarray_present>
	if ( 
 8000a66:	2800      	cmp	r0, #0
 8000a68:	d02f      	beq.n	8000aca <open_tcp_connection+0xb2>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"IP GPRSACT",sizeof("IP GPRSACT")-1)	|| 
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"PDP DEACT",sizeof("PDP DEACT")-1)
		)			
	{	
		#ifdef DEBUG_MODE
		send_debug("TCP cannot begin because GPRS is not ready: call enable_gprs();");
 8000a6a:	4858      	ldr	r0, [pc, #352]	; (8000bcc <open_tcp_connection+0x1b4>)
 8000a6c:	f000 f9d2 	bl	8000e14 <send_debug>
		#endif	
		enable_gprs();
 8000a70:	f7ff fd58 	bl	8000524 <enable_gprs>
			send_debug("Open TCP connection detected, terminating it. send: AT+CIPCLOSE");
		#endif	
		send_AT_cmd(tcp_disconnect_cmd,"OK",FALSE,NULL,RX_TIMEOUT);
	}
	/*clear receive buffer */
		memset(local_rx_buffer,NULL,RX_BUFFER_LENGTH);
 8000a74:	2280      	movs	r2, #128	; 0x80
 8000a76:	2100      	movs	r1, #0
 8000a78:	0052      	lsls	r2, r2, #1
 8000a7a:	a822      	add	r0, sp, #136	; 0x88
 8000a7c:	f001 ff4d 	bl	800291a <memset>

	
	/*** Open TCP connection ***/
	
	/* build the connect command by adding address and port */
	strcat(tcp_connect_cmd,server_address);    /* AT+CIPSTART=\"TCP\","host.com           */
 8000a80:	0029      	movs	r1, r5
		
	/*Send open connection command Wait for connection to establish or fail*/
		#ifdef DEBUG_MODE
			send_debug("Attempt to open TCP connection");
		#endif	
	if (send_AT_cmd(tcp_connect_cmd,"CONNECT OK",1,local_rx_buffer,RX_TIMEOUT)){
 8000a82:	25fa      	movs	r5, #250	; 0xfa
	strcat(tcp_connect_cmd,server_address);    /* AT+CIPSTART=\"TCP\","host.com           */
 8000a84:	a802      	add	r0, sp, #8
 8000a86:	f001 ff71 	bl	800296c <strcat>
	strcat(tcp_connect_cmd,"\",\""); /* AT+CIPSTART=\"TCP\","host.com","        */
 8000a8a:	4951      	ldr	r1, [pc, #324]	; (8000bd0 <open_tcp_connection+0x1b8>)
 8000a8c:	a802      	add	r0, sp, #8
 8000a8e:	f001 ff6d 	bl	800296c <strcat>
	strcat(tcp_connect_cmd,port);    /* AT+CIPSTART=\"TCP\","host.com","port    */
 8000a92:	0021      	movs	r1, r4
 8000a94:	a802      	add	r0, sp, #8
 8000a96:	f001 ff69 	bl	800296c <strcat>
	strcat(tcp_connect_cmd,"\"\r");  /* AT+CIPSTART=\"TCP\","host.com","port"\r */
 8000a9a:	494e      	ldr	r1, [pc, #312]	; (8000bd4 <open_tcp_connection+0x1bc>)
 8000a9c:	a802      	add	r0, sp, #8
 8000a9e:	f001 ff65 	bl	800296c <strcat>
	if (send_AT_cmd(tcp_connect_cmd,"CONNECT OK",1,local_rx_buffer,RX_TIMEOUT)){
 8000aa2:	00ad      	lsls	r5, r5, #2
			send_debug("Attempt to open TCP connection");
 8000aa4:	484c      	ldr	r0, [pc, #304]	; (8000bd8 <open_tcp_connection+0x1c0>)
 8000aa6:	f000 f9b5 	bl	8000e14 <send_debug>
	if (send_AT_cmd(tcp_connect_cmd,"CONNECT OK",1,local_rx_buffer,RX_TIMEOUT)){
 8000aaa:	2201      	movs	r2, #1
 8000aac:	494b      	ldr	r1, [pc, #300]	; (8000bdc <open_tcp_connection+0x1c4>)
 8000aae:	9500      	str	r5, [sp, #0]
 8000ab0:	ab22      	add	r3, sp, #136	; 0x88
 8000ab2:	a802      	add	r0, sp, #8
 8000ab4:	f000 fa80 	bl	8000fb8 <send_AT_cmd>
 8000ab8:	1e04      	subs	r4, r0, #0
 8000aba:	d053      	beq.n	8000b64 <open_tcp_connection+0x14c>
		#ifdef DEBUG_MODE
			send_debug("Open TCP connection : OK");
 8000abc:	4848      	ldr	r0, [pc, #288]	; (8000be0 <open_tcp_connection+0x1c8>)
 8000abe:	f000 f9a9 	bl	8000e14 <send_debug>
		#endif
		return SUCCESS;
 8000ac2:	2401      	movs	r4, #1
		return FAIL;
		}
	}
	
	
}
 8000ac4:	0020      	movs	r0, r4
 8000ac6:	b063      	add	sp, #396	; 0x18c
 8000ac8:	bd30      	pop	{r4, r5, pc}
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"IP START",sizeof("IP START")-1)	||
 8000aca:	2180      	movs	r1, #128	; 0x80
 8000acc:	2308      	movs	r3, #8
 8000ace:	4a45      	ldr	r2, [pc, #276]	; (8000be4 <open_tcp_connection+0x1cc>)
 8000ad0:	0049      	lsls	r1, r1, #1
 8000ad2:	a822      	add	r0, sp, #136	; 0x88
 8000ad4:	f000 fa56 	bl	8000f84 <is_subarray_present>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"IP INITIAL",sizeof("IP INITIAL")-1)	||
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d1c6      	bne.n	8000a6a <open_tcp_connection+0x52>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"IP CONFIG",sizeof("IP CONFIG")-1) || 
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	2309      	movs	r3, #9
 8000ae0:	4a41      	ldr	r2, [pc, #260]	; (8000be8 <open_tcp_connection+0x1d0>)
 8000ae2:	0049      	lsls	r1, r1, #1
 8000ae4:	a822      	add	r0, sp, #136	; 0x88
 8000ae6:	f000 fa4d 	bl	8000f84 <is_subarray_present>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"IP START",sizeof("IP START")-1)	||
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d1bd      	bne.n	8000a6a <open_tcp_connection+0x52>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"IP GPRSACT",sizeof("IP GPRSACT")-1)	|| 
 8000aee:	2180      	movs	r1, #128	; 0x80
 8000af0:	230a      	movs	r3, #10
 8000af2:	4a3e      	ldr	r2, [pc, #248]	; (8000bec <open_tcp_connection+0x1d4>)
 8000af4:	0049      	lsls	r1, r1, #1
 8000af6:	a822      	add	r0, sp, #136	; 0x88
 8000af8:	f000 fa44 	bl	8000f84 <is_subarray_present>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"IP CONFIG",sizeof("IP CONFIG")-1) || 
 8000afc:	2800      	cmp	r0, #0
 8000afe:	d1b4      	bne.n	8000a6a <open_tcp_connection+0x52>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"PDP DEACT",sizeof("PDP DEACT")-1)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	2309      	movs	r3, #9
 8000b04:	4a3a      	ldr	r2, [pc, #232]	; (8000bf0 <open_tcp_connection+0x1d8>)
 8000b06:	0049      	lsls	r1, r1, #1
 8000b08:	a822      	add	r0, sp, #136	; 0x88
 8000b0a:	f000 fa3b 	bl	8000f84 <is_subarray_present>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"IP GPRSACT",sizeof("IP GPRSACT")-1)	|| 
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d1ab      	bne.n	8000a6a <open_tcp_connection+0x52>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"TCP CONNECTING",sizeof("TCP CONNECTING")-1)	||
 8000b12:	2180      	movs	r1, #128	; 0x80
 8000b14:	230e      	movs	r3, #14
 8000b16:	4a37      	ldr	r2, [pc, #220]	; (8000bf4 <open_tcp_connection+0x1dc>)
 8000b18:	0049      	lsls	r1, r1, #1
 8000b1a:	a822      	add	r0, sp, #136	; 0x88
 8000b1c:	f000 fa32 	bl	8000f84 <is_subarray_present>
	else if ( 
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d00c      	beq.n	8000b3e <open_tcp_connection+0x126>
			send_debug("Open TCP connection detected, terminating it. send: AT+CIPCLOSE");
 8000b24:	4834      	ldr	r0, [pc, #208]	; (8000bf8 <open_tcp_connection+0x1e0>)
 8000b26:	f000 f975 	bl	8000e14 <send_debug>
		send_AT_cmd(tcp_disconnect_cmd,"OK",FALSE,NULL,RX_TIMEOUT);
 8000b2a:	23fa      	movs	r3, #250	; 0xfa
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2300      	movs	r3, #0
 8000b32:	4923      	ldr	r1, [pc, #140]	; (8000bc0 <open_tcp_connection+0x1a8>)
 8000b34:	001a      	movs	r2, r3
 8000b36:	4831      	ldr	r0, [pc, #196]	; (8000bfc <open_tcp_connection+0x1e4>)
 8000b38:	f000 fa3e 	bl	8000fb8 <send_AT_cmd>
 8000b3c:	e79a      	b.n	8000a74 <open_tcp_connection+0x5c>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"CONNECT OK",sizeof("CONNECT OK")-1)	||
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	230a      	movs	r3, #10
 8000b42:	4a26      	ldr	r2, [pc, #152]	; (8000bdc <open_tcp_connection+0x1c4>)
 8000b44:	0049      	lsls	r1, r1, #1
 8000b46:	a822      	add	r0, sp, #136	; 0x88
 8000b48:	f000 fa1c 	bl	8000f84 <is_subarray_present>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"TCP CONNECTING",sizeof("TCP CONNECTING")-1)	||
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d1e9      	bne.n	8000b24 <open_tcp_connection+0x10c>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"ALREADY CONNECT",sizeof("ALREADY CONNECT")-1) 
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	230f      	movs	r3, #15
 8000b54:	4a2a      	ldr	r2, [pc, #168]	; (8000c00 <open_tcp_connection+0x1e8>)
 8000b56:	0049      	lsls	r1, r1, #1
 8000b58:	a822      	add	r0, sp, #136	; 0x88
 8000b5a:	f000 fa13 	bl	8000f84 <is_subarray_present>
		is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"CONNECT OK",sizeof("CONNECT OK")-1)	||
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	d1e0      	bne.n	8000b24 <open_tcp_connection+0x10c>
 8000b62:	e787      	b.n	8000a74 <open_tcp_connection+0x5c>
				send_debug("Open TCP connection : FAIL ");
 8000b64:	4827      	ldr	r0, [pc, #156]	; (8000c04 <open_tcp_connection+0x1ec>)
 8000b66:	f000 f955 	bl	8000e14 <send_debug>
				send_debug("Buffer content below:");
 8000b6a:	4827      	ldr	r0, [pc, #156]	; (8000c08 <open_tcp_connection+0x1f0>)
 8000b6c:	f000 f952 	bl	8000e14 <send_debug>
				send_debug(local_rx_buffer);	
 8000b70:	a822      	add	r0, sp, #136	; 0x88
 8000b72:	f000 f94f 	bl	8000e14 <send_debug>
	if ( is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"CONNECT FAIL",sizeof("CONNECT FAIL")-1) || is_subarray_present((uint8_t*)local_rx_buffer,RX_BUFFER_LENGTH,(uint8_t*)"ERROR",sizeof("ERROR")-1)){
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	230c      	movs	r3, #12
 8000b7a:	4a24      	ldr	r2, [pc, #144]	; (8000c0c <open_tcp_connection+0x1f4>)
 8000b7c:	0049      	lsls	r1, r1, #1
 8000b7e:	a822      	add	r0, sp, #136	; 0x88
 8000b80:	f000 fa00 	bl	8000f84 <is_subarray_present>
 8000b84:	2800      	cmp	r0, #0
 8000b86:	d19d      	bne.n	8000ac4 <open_tcp_connection+0xac>
 8000b88:	2180      	movs	r1, #128	; 0x80
 8000b8a:	2305      	movs	r3, #5
 8000b8c:	4a20      	ldr	r2, [pc, #128]	; (8000c10 <open_tcp_connection+0x1f8>)
 8000b8e:	0049      	lsls	r1, r1, #1
 8000b90:	a822      	add	r0, sp, #136	; 0x88
 8000b92:	f000 f9f7 	bl	8000f84 <is_subarray_present>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d000      	beq.n	8000b9c <open_tcp_connection+0x184>
 8000b9a:	e793      	b.n	8000ac4 <open_tcp_connection+0xac>
		send_debug("Open TCP connection timeout. disconnecting. send: AT+CIPCLOSE");
 8000b9c:	481d      	ldr	r0, [pc, #116]	; (8000c14 <open_tcp_connection+0x1fc>)
 8000b9e:	f000 f939 	bl	8000e14 <send_debug>
		send_AT_cmd(tcp_disconnect_cmd,"CLOSED OK",0,NULL,RX_TIMEOUT);{
 8000ba2:	0023      	movs	r3, r4
 8000ba4:	0022      	movs	r2, r4
 8000ba6:	491c      	ldr	r1, [pc, #112]	; (8000c18 <open_tcp_connection+0x200>)
 8000ba8:	9500      	str	r5, [sp, #0]
 8000baa:	4814      	ldr	r0, [pc, #80]	; (8000bfc <open_tcp_connection+0x1e4>)
 8000bac:	f000 fa04 	bl	8000fb8 <send_AT_cmd>
		return FAIL;
 8000bb0:	e788      	b.n	8000ac4 <open_tcp_connection+0xac>
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	08003245 	.word	0x08003245
 8000bb8:	08003857 	.word	0x08003857
 8000bbc:	08003872 	.word	0x08003872
 8000bc0:	08003977 	.word	0x08003977
 8000bc4:	08003b91 	.word	0x08003b91
 8000bc8:	0800389e 	.word	0x0800389e
 8000bcc:	080038a9 	.word	0x080038a9
 8000bd0:	0800393e 	.word	0x0800393e
 8000bd4:	080036ff 	.word	0x080036ff
 8000bd8:	08003942 	.word	0x08003942
 8000bdc:	08003933 	.word	0x08003933
 8000be0:	08003961 	.word	0x08003961
 8000be4:	080036ed 	.word	0x080036ed
 8000be8:	080038e9 	.word	0x080038e9
 8000bec:	0800377f 	.word	0x0800377f
 8000bf0:	08003655 	.word	0x08003655
 8000bf4:	0800381e 	.word	0x0800381e
 8000bf8:	080038f3 	.word	0x080038f3
 8000bfc:	08003bd9 	.word	0x08003bd9
 8000c00:	0800382d 	.word	0x0800382d
 8000c04:	0800397a 	.word	0x0800397a
 8000c08:	08003996 	.word	0x08003996
 8000c0c:	080039ac 	.word	0x080039ac
 8000c10:	080037a8 	.word	0x080037a8
 8000c14:	080039b9 	.word	0x080039b9
 8000c18:	080039f7 	.word	0x080039f7

08000c1c <close_tcp_connection>:


uint8_t close_tcp_connection(){
 8000c1c:	b507      	push	{r0, r1, r2, lr}


		/* send Close TCP connection command */
		/* and return if TCP connection was closed correctly */	
		#ifdef DEBUG_MODE
			send_debug("Close TCP connection: send AT+CIPCLOSE");
 8000c1e:	4808      	ldr	r0, [pc, #32]	; (8000c40 <close_tcp_connection+0x24>)
 8000c20:	f000 f8f8 	bl	8000e14 <send_debug>
		#endif
	if ((send_AT_cmd(tcp_disconnect_cmd,"CLOSE OK",FALSE,NULL,RX_TIMEOUT)) )
 8000c24:	23fa      	movs	r3, #250	; 0xfa
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	4905      	ldr	r1, [pc, #20]	; (8000c44 <close_tcp_connection+0x28>)
 8000c2e:	001a      	movs	r2, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <close_tcp_connection+0x2c>)
 8000c32:	f000 f9c1 	bl	8000fb8 <send_AT_cmd>
 8000c36:	1e43      	subs	r3, r0, #1
 8000c38:	4198      	sbcs	r0, r3
		return SUCCESS;
	else 
		return FAIL;
	
}
 8000c3a:	b2c0      	uxtb	r0, r0
 8000c3c:	bd0e      	pop	{r1, r2, r3, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	08003a01 	.word	0x08003a01
 8000c44:	08003a28 	.word	0x08003a28
 8000c48:	08003bcc 	.word	0x08003bcc

08000c4c <send_tcp_data>:


uint8_t send_tcp_data(uint8_t * data, uint8_t data_length){
 8000c4c:	b570      	push	{r4, r5, r6, lr}

	static const char get_tcp_status_cmd[]="AT+CIPSTATUS\r";
	char send_tcp_data_cmd[24]= "AT+CIPSEND=";
 8000c4e:	260c      	movs	r6, #12
uint8_t send_tcp_data(uint8_t * data, uint8_t data_length){
 8000c50:	000c      	movs	r4, r1
	char send_tcp_data_cmd[24]= "AT+CIPSEND=";
 8000c52:	4914      	ldr	r1, [pc, #80]	; (8000ca4 <send_tcp_data+0x58>)
uint8_t send_tcp_data(uint8_t * data, uint8_t data_length){
 8000c54:	b0c8      	sub	sp, #288	; 0x120
 8000c56:	0005      	movs	r5, r0
	char send_tcp_data_cmd[24]= "AT+CIPSEND=";
 8000c58:	0032      	movs	r2, r6
 8000c5a:	310d      	adds	r1, #13
 8000c5c:	a802      	add	r0, sp, #8
 8000c5e:	f001 fe53 	bl	8002908 <memcpy>
 8000c62:	0032      	movs	r2, r6
 8000c64:	2100      	movs	r1, #0
 8000c66:	a805      	add	r0, sp, #20
 8000c68:	f001 fe57 	bl	800291a <memset>
	char local_rx_buffer[RX_BUFFER_LENGTH]; 
	

	/*Construct the command that sends "data_length" bytes */
	sprintf(send_tcp_data_cmd,"AT+CIPSEND=%d\r",(int)data_length); 
 8000c6c:	0022      	movs	r2, r4
 8000c6e:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <send_tcp_data+0x5c>)
 8000c70:	a802      	add	r0, sp, #8
 8000c72:	f001 fe5b 	bl	800292c <siprintf>
	#ifdef DEBUG_MODE
	send_debug("Initiate TCP transmission: send AT+CIPSEND=");
	#endif
	
	/* tell the module how many bytes to expect */
	send_AT_cmd(send_tcp_data_cmd,">",FALSE,NULL,RX_TIMEOUT);
 8000c76:	26fa      	movs	r6, #250	; 0xfa
	send_debug("Initiate TCP transmission: send AT+CIPSEND=");
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <send_tcp_data+0x60>)
 8000c7a:	f000 f8cb 	bl	8000e14 <send_debug>
	send_AT_cmd(send_tcp_data_cmd,">",FALSE,NULL,RX_TIMEOUT);
 8000c7e:	2300      	movs	r3, #0
 8000c80:	00b6      	lsls	r6, r6, #2
 8000c82:	001a      	movs	r2, r3
 8000c84:	490a      	ldr	r1, [pc, #40]	; (8000cb0 <send_tcp_data+0x64>)
 8000c86:	9600      	str	r6, [sp, #0]
 8000c88:	a802      	add	r0, sp, #8
 8000c8a:	f000 f995 	bl	8000fb8 <send_AT_cmd>

	#ifdef DEBUG_MODE
	send_debug("Sending TCP load");
 8000c8e:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <send_tcp_data+0x68>)
 8000c90:	f000 f8c0 	bl	8000e14 <send_debug>
	#endif
	
	/*Send the actual data and return the status of transmission*/
	return send_serial_data(data,data_length,local_rx_buffer,RX_TIMEOUT); 
 8000c94:	0033      	movs	r3, r6
 8000c96:	0021      	movs	r1, r4
 8000c98:	0028      	movs	r0, r5
 8000c9a:	aa08      	add	r2, sp, #32
 8000c9c:	f000 faba 	bl	8001214 <send_serial_data>
	

}
 8000ca0:	b048      	add	sp, #288	; 0x120
 8000ca2:	bd70      	pop	{r4, r5, r6, pc}
 8000ca4:	080032b8 	.word	0x080032b8
 8000ca8:	08003a31 	.word	0x08003a31
 8000cac:	08003a40 	.word	0x08003a40
 8000cb0:	08003a6c 	.word	0x08003a6c
 8000cb4:	08003a6e 	.word	0x08003a6e

08000cb8 <publish_mqtt_msg>:


uint8_t publish_mqtt_msg(char * ip_address, char *  tcp_port, char * topic, char * client_id, char * message){
 8000cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cba:	001d      	movs	r5, r3
 8000cbc:	b0c7      	sub	sp, #284	; 0x11c
 8000cbe:	9002      	str	r0, [sp, #8]
	
	#ifdef DEBUG_MODE
		send_debug("MQTT protocol: START");
 8000cc0:	484c      	ldr	r0, [pc, #304]	; (8000df4 <publish_mqtt_msg+0x13c>)
uint8_t publish_mqtt_msg(char * ip_address, char *  tcp_port, char * topic, char * client_id, char * message){
 8000cc2:	9103      	str	r1, [sp, #12]
 8000cc4:	9201      	str	r2, [sp, #4]
		send_debug("MQTT protocol: START");
 8000cc6:	f000 f8a5 	bl	8000e14 <send_debug>
	 * 2 bytes         : [Client ID length]
	 * remaining bytes : [Client ID]
	 */
	
	
	uint16_t client_id_length = strlen(client_id);
 8000cca:	0028      	movs	r0, r5
 8000ccc:	f7ff fa1c 	bl	8000108 <strlen>
	uint8_t connect_packet_remaining_length = 12 + client_id_length;;
	uint16_t keep_alive = MQTT_KEEP_ALIVE;
		
	uint8_t connect_packet[MAX_LENGTH_MQTT_PACKET]= {
 8000cd0:	ac06      	add	r4, sp, #24
	uint8_t connect_packet_remaining_length = 12 + client_id_length;;
 8000cd2:	b2c7      	uxtb	r7, r0
	uint8_t connect_packet[MAX_LENGTH_MQTT_PACKET]= {
 8000cd4:	220b      	movs	r2, #11
 8000cd6:	4948      	ldr	r1, [pc, #288]	; (8000df8 <publish_mqtt_msg+0x140>)
	uint16_t client_id_length = strlen(client_id);
 8000cd8:	b286      	uxth	r6, r0
	uint8_t connect_packet[MAX_LENGTH_MQTT_PACKET]= {
 8000cda:	0020      	movs	r0, r4
 8000cdc:	f001 fe14 	bl	8002908 <memcpy>
 8000ce0:	2013      	movs	r0, #19
 8000ce2:	ab04      	add	r3, sp, #16
 8000ce4:	18c0      	adds	r0, r0, r3
 8000ce6:	2275      	movs	r2, #117	; 0x75
 8000ce8:	2100      	movs	r1, #0
 8000cea:	f001 fe16 	bl	800291a <memset>
	uint8_t connect_packet_remaining_length = 12 + client_id_length;;
 8000cee:	003b      	movs	r3, r7
 8000cf0:	330c      	adds	r3, #12
	0x02 // Connect flags
	};



	connect_packet[1]=connect_packet_remaining_length;
 8000cf2:	7063      	strb	r3, [r4, #1]
	
	/* Insert Keep alive time most signinficant byte in the packet by shifting keep_alive 8 bits to the right and casting into uint8_t */
	connect_packet[10]= (uint8_t) (keep_alive>>8);

	/* Insert Keep alive time least significant byte in the packet by directly casting the uint16_t variable to uint8_t which will will clamp the left 8 bits */
	connect_packet[11]= (uint8_t) keep_alive;
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	72e3      	strb	r3, [r4, #11]

	/* Insert client ID length into the packet with same way used for keep_alive */ 
		connect_packet[12]= (uint8_t) (client_id_length>>8);
 8000cf8:	0a33      	lsrs	r3, r6, #8
 8000cfa:	7323      	strb	r3, [r4, #12]
		connect_packet[13]= (uint8_t) client_id_length;
	
	/* Copy the client ID char by char into the connect packet */
	for(uint8_t i = 0; i< client_id_length ; i++)
 8000cfc:	2300      	movs	r3, #0
		connect_packet[13]= (uint8_t) client_id_length;
 8000cfe:	7367      	strb	r7, [r4, #13]
	for(uint8_t i = 0; i< client_id_length ; i++)
 8000d00:	42b3      	cmp	r3, r6
 8000d02:	d361      	bcc.n	8000dc8 <publish_mqtt_msg+0x110>



	/*** Construct the Publish Packet ***/

	uint16_t topic_length = strlen(topic);
 8000d04:	9801      	ldr	r0, [sp, #4]
 8000d06:	f7ff f9ff 	bl	8000108 <strlen>
 8000d0a:	0005      	movs	r5, r0
 8000d0c:	b286      	uxth	r6, r0
	uint8_t publish_packet_remaining_length= 2 + topic_length + (uint8_t)strlen(message) ;
 8000d0e:	984c      	ldr	r0, [sp, #304]	; 0x130
 8000d10:	f7ff f9fa 	bl	8000108 <strlen>
 8000d14:	b2eb      	uxtb	r3, r5
	

	uint8_t publish_packet[MAX_LENGTH_MQTT_PACKET] ={
 8000d16:	ac26      	add	r4, sp, #152	; 0x98
	uint8_t publish_packet_remaining_length= 2 + topic_length + (uint8_t)strlen(message) ;
 8000d18:	1818      	adds	r0, r3, r0
 8000d1a:	b2c3      	uxtb	r3, r0
	uint8_t publish_packet[MAX_LENGTH_MQTT_PACKET] ={
 8000d1c:	2205      	movs	r2, #5
 8000d1e:	4937      	ldr	r1, [pc, #220]	; (8000dfc <publish_mqtt_msg+0x144>)
 8000d20:	0020      	movs	r0, r4
	uint8_t publish_packet_remaining_length= 2 + topic_length + (uint8_t)strlen(message) ;
 8000d22:	9300      	str	r3, [sp, #0]
	uint8_t publish_packet[MAX_LENGTH_MQTT_PACKET] ={
 8000d24:	f001 fdf0 	bl	8002908 <memcpy>
 8000d28:	208d      	movs	r0, #141	; 0x8d
 8000d2a:	ab04      	add	r3, sp, #16
 8000d2c:	227b      	movs	r2, #123	; 0x7b
 8000d2e:	18c0      	adds	r0, r0, r3
 8000d30:	2100      	movs	r1, #0
 8000d32:	f001 fdf2 	bl	800291a <memset>
	uint8_t publish_packet_remaining_length= 2 + topic_length + (uint8_t)strlen(message) ;
 8000d36:	9b00      	ldr	r3, [sp, #0]
	publish_packet[3]= (uint8_t) topic_length;


	/* Copy the topic  name char by char into the publish packet */
	for(uint8_t i = 0; i< topic_length ; i++)
		publish_packet[4+i]=(uint8_t)topic[i];
 8000d38:	0022      	movs	r2, r4
	uint8_t publish_packet_remaining_length= 2 + topic_length + (uint8_t)strlen(message) ;
 8000d3a:	3302      	adds	r3, #2
	publish_packet[1] = publish_packet_remaining_length;
 8000d3c:	7063      	strb	r3, [r4, #1]
	publish_packet[2]= (uint8_t) (topic_length>>8);
 8000d3e:	0a33      	lsrs	r3, r6, #8
 8000d40:	70a3      	strb	r3, [r4, #2]
	publish_packet[3]= (uint8_t) topic_length;
 8000d42:	b2eb      	uxtb	r3, r5
 8000d44:	70e3      	strb	r3, [r4, #3]
	for(uint8_t i = 0; i< topic_length ; i++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	42b3      	cmp	r3, r6
 8000d4a:	d343      	bcc.n	8000dd4 <publish_mqtt_msg+0x11c>

	/* Copy the message   char by char into the publish packet */
	for(uint8_t i = 0; i< strlen(message); i++)
 8000d4c:	2600      	movs	r6, #0
		publish_packet[4+topic_length+i]=(uint8_t)message[i];
 8000d4e:	b2ad      	uxth	r5, r5
	for(uint8_t i = 0; i< strlen(message); i++)
 8000d50:	984c      	ldr	r0, [sp, #304]	; 0x130
 8000d52:	f7ff f9d9 	bl	8000108 <strlen>
 8000d56:	4286      	cmp	r6, r0
 8000d58:	d343      	bcc.n	8000de2 <publish_mqtt_msg+0x12a>

	
	
	#ifdef DEBUG_MODE
		send_debug("***CONNECT packet content:***");
		send_raw_debug(connect_packet,14+client_id_length);	
 8000d5a:	003e      	movs	r6, r7
	uint8_t disconnect_packet[] = {
 8000d5c:	23e0      	movs	r3, #224	; 0xe0
		send_raw_debug(connect_packet,14+client_id_length);	
 8000d5e:	360e      	adds	r6, #14
		send_debug("***CONNECT packet content:***");
 8000d60:	4827      	ldr	r0, [pc, #156]	; (8000e00 <publish_mqtt_msg+0x148>)
	uint8_t disconnect_packet[] = {
 8000d62:	ad05      	add	r5, sp, #20
		send_raw_debug(connect_packet,14+client_id_length);	
 8000d64:	b2f6      	uxtb	r6, r6
	uint8_t disconnect_packet[] = {
 8000d66:	802b      	strh	r3, [r5, #0]
		send_debug("***CONNECT packet content:***");
 8000d68:	f000 f854 	bl	8000e14 <send_debug>
		send_raw_debug(connect_packet,14+client_id_length);	
 8000d6c:	0031      	movs	r1, r6
 8000d6e:	a806      	add	r0, sp, #24
 8000d70:	f000 f87a 	bl	8000e68 <send_raw_debug>
		send_debug("***PUBLISH packet content:***");
 8000d74:	4823      	ldr	r0, [pc, #140]	; (8000e04 <publish_mqtt_msg+0x14c>)
 8000d76:	f000 f84d 	bl	8000e14 <send_debug>
		send_raw_debug(publish_packet,publish_packet_remaining_length+2);
 8000d7a:	9f00      	ldr	r7, [sp, #0]
 8000d7c:	0020      	movs	r0, r4
 8000d7e:	3704      	adds	r7, #4
 8000d80:	b2ff      	uxtb	r7, r7
 8000d82:	0039      	movs	r1, r7
 8000d84:	f000 f870 	bl	8000e68 <send_raw_debug>
	//	send_debug("DISCONNECT packet content:");
		//send_debug(disconnect_packet);
	#endif
	
	/*** Sending Data ***/
		if (open_tcp_connection(ip_address,tcp_port)){
 8000d88:	9903      	ldr	r1, [sp, #12]
 8000d8a:	9802      	ldr	r0, [sp, #8]
 8000d8c:	f7ff fe44 	bl	8000a18 <open_tcp_connection>
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d017      	beq.n	8000dc4 <publish_mqtt_msg+0x10c>
			
			//send_tcp_data((uint8_t *)"hello",5);
			#ifdef DEBUG_MODE
				send_debug("Sending MQTT CONNECT Packet");
 8000d94:	481c      	ldr	r0, [pc, #112]	; (8000e08 <publish_mqtt_msg+0x150>)
 8000d96:	f000 f83d 	bl	8000e14 <send_debug>
			#endif
			send_tcp_data(connect_packet,2+connect_packet_remaining_length);
 8000d9a:	0031      	movs	r1, r6
 8000d9c:	a806      	add	r0, sp, #24
 8000d9e:	f7ff ff55 	bl	8000c4c <send_tcp_data>

			#ifdef DEBUG_MODE
				send_debug("Sending MQTT PUBLISH Packet");
 8000da2:	481a      	ldr	r0, [pc, #104]	; (8000e0c <publish_mqtt_msg+0x154>)
 8000da4:	f000 f836 	bl	8000e14 <send_debug>
			#endif
				send_tcp_data(publish_packet,2+publish_packet_remaining_length);
 8000da8:	0039      	movs	r1, r7
 8000daa:	0020      	movs	r0, r4
 8000dac:	f7ff ff4e 	bl	8000c4c <send_tcp_data>
			//send_tcp_data((uint8_t *)"hello",5);
			#ifdef DEBUG_MODE
				send_debug("Sending MQTT DISCONNECT Packet");
 8000db0:	4817      	ldr	r0, [pc, #92]	; (8000e10 <publish_mqtt_msg+0x158>)
 8000db2:	f000 f82f 	bl	8000e14 <send_debug>
			#endif
			send_tcp_data(disconnect_packet,2);
 8000db6:	2102      	movs	r1, #2
 8000db8:	0028      	movs	r0, r5
 8000dba:	f7ff ff47 	bl	8000c4c <send_tcp_data>
			
			close_tcp_connection();
 8000dbe:	f7ff ff2d 	bl	8000c1c <close_tcp_connection>
			return SUCCESS;
 8000dc2:	2001      	movs	r0, #1
		}
			
	return FAIL;
}
 8000dc4:	b047      	add	sp, #284	; 0x11c
 8000dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		connect_packet[14+i]=(uint8_t)client_id[i];
 8000dc8:	5ce9      	ldrb	r1, [r5, r3]
 8000dca:	18e2      	adds	r2, r4, r3
	for(uint8_t i = 0; i< client_id_length ; i++)
 8000dcc:	3301      	adds	r3, #1
		connect_packet[14+i]=(uint8_t)client_id[i];
 8000dce:	7391      	strb	r1, [r2, #14]
	for(uint8_t i = 0; i< client_id_length ; i++)
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	e795      	b.n	8000d00 <publish_mqtt_msg+0x48>
		publish_packet[4+i]=(uint8_t)topic[i];
 8000dd4:	9801      	ldr	r0, [sp, #4]
 8000dd6:	18d1      	adds	r1, r2, r3
 8000dd8:	5cc0      	ldrb	r0, [r0, r3]
	for(uint8_t i = 0; i< topic_length ; i++)
 8000dda:	3301      	adds	r3, #1
		publish_packet[4+i]=(uint8_t)topic[i];
 8000ddc:	7108      	strb	r0, [r1, #4]
	for(uint8_t i = 0; i< topic_length ; i++)
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	e7b2      	b.n	8000d48 <publish_mqtt_msg+0x90>
		publish_packet[4+topic_length+i]=(uint8_t)message[i];
 8000de2:	9a4c      	ldr	r2, [sp, #304]	; 0x130
 8000de4:	ab26      	add	r3, sp, #152	; 0x98
 8000de6:	5d92      	ldrb	r2, [r2, r6]
 8000de8:	199b      	adds	r3, r3, r6
 8000dea:	195b      	adds	r3, r3, r5
	for(uint8_t i = 0; i< strlen(message); i++)
 8000dec:	3601      	adds	r6, #1
		publish_packet[4+topic_length+i]=(uint8_t)message[i];
 8000dee:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 0; i< strlen(message); i++)
 8000df0:	b2f6      	uxtb	r6, r6
 8000df2:	e7ad      	b.n	8000d50 <publish_mqtt_msg+0x98>
 8000df4:	08003a7f 	.word	0x08003a7f
 8000df8:	080032dd 	.word	0x080032dd
 8000dfc:	0800335d 	.word	0x0800335d
 8000e00:	08003a94 	.word	0x08003a94
 8000e04:	08003ab2 	.word	0x08003ab2
 8000e08:	08003ad0 	.word	0x08003ad0
 8000e0c:	08003aec 	.word	0x08003aec
 8000e10:	08003b08 	.word	0x08003b08

08000e14 <send_debug>:
static volatile uint8_t rx_byte; /* The receive interupt routine uses rx_byte to store a copy of the received byte*/
static volatile uint8_t rx_index=0; /*track the number of received bytes.*/
static volatile char sim_rx_buffer[RX_BUFFER_LENGTH];

void  send_debug(const char * debug_msg)
{
 8000e14:	b530      	push	{r4, r5, lr}
 8000e16:	b085      	sub	sp, #20
 8000e18:	0004      	movs	r4, r0
	char debug_prompt[]="Debug > ";
 8000e1a:	2209      	movs	r2, #9
 8000e1c:	490f      	ldr	r1, [pc, #60]	; (8000e5c <send_debug+0x48>)
 8000e1e:	a801      	add	r0, sp, #4
 8000e20:	f001 fd72 	bl	8002908 <memcpy>
	HAL_UART_Transmit(&debug_uart,(uint8_t*)debug_prompt,strlen(debug_prompt),TX_TIMEOUT);
 8000e24:	a801      	add	r0, sp, #4
 8000e26:	f7ff f96f 	bl	8000108 <strlen>
 8000e2a:	4d0d      	ldr	r5, [pc, #52]	; (8000e60 <send_debug+0x4c>)
 8000e2c:	b282      	uxth	r2, r0
 8000e2e:	a901      	add	r1, sp, #4
 8000e30:	2364      	movs	r3, #100	; 0x64
 8000e32:	0028      	movs	r0, r5
 8000e34:	f001 fbe0 	bl	80025f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&debug_uart,(uint8_t*)debug_msg,strlen(debug_msg),TX_TIMEOUT);
 8000e38:	0020      	movs	r0, r4
 8000e3a:	f7ff f965 	bl	8000108 <strlen>
 8000e3e:	0021      	movs	r1, r4
 8000e40:	b282      	uxth	r2, r0
 8000e42:	2364      	movs	r3, #100	; 0x64
 8000e44:	0028      	movs	r0, r5
 8000e46:	f001 fbd7 	bl	80025f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&debug_uart,(uint8_t*)"\r\n",2,TX_TIMEOUT);
 8000e4a:	2364      	movs	r3, #100	; 0x64
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	0028      	movs	r0, r5
 8000e50:	4904      	ldr	r1, [pc, #16]	; (8000e64 <send_debug+0x50>)
 8000e52:	f001 fbd1 	bl	80025f8 <HAL_UART_Transmit>
}
 8000e56:	b005      	add	sp, #20
 8000e58:	bd30      	pop	{r4, r5, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	08003be9 	.word	0x08003be9
 8000e60:	20000124 	.word	0x20000124
 8000e64:	08003be6 	.word	0x08003be6

08000e68 <send_raw_debug>:

void  send_raw_debug(uint8_t * debug_dump,uint8_t length)
{
 8000e68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000e6a:	0006      	movs	r6, r0
 8000e6c:	000c      	movs	r4, r1
	char debug_prompt[]="Debug > ";
 8000e6e:	2209      	movs	r2, #9
 8000e70:	490d      	ldr	r1, [pc, #52]	; (8000ea8 <send_raw_debug+0x40>)
 8000e72:	a801      	add	r0, sp, #4
 8000e74:	f001 fd48 	bl	8002908 <memcpy>
	HAL_UART_Transmit(&debug_uart,(uint8_t*)debug_prompt,strlen(debug_prompt),TX_TIMEOUT);
 8000e78:	a801      	add	r0, sp, #4
 8000e7a:	f7ff f945 	bl	8000108 <strlen>
 8000e7e:	4d0b      	ldr	r5, [pc, #44]	; (8000eac <send_raw_debug+0x44>)
 8000e80:	b282      	uxth	r2, r0
 8000e82:	a901      	add	r1, sp, #4
 8000e84:	0028      	movs	r0, r5
 8000e86:	2364      	movs	r3, #100	; 0x64
 8000e88:	f001 fbb6 	bl	80025f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&debug_uart,debug_dump,length,TX_TIMEOUT);
 8000e8c:	0031      	movs	r1, r6
 8000e8e:	0028      	movs	r0, r5
 8000e90:	b2a2      	uxth	r2, r4
 8000e92:	2364      	movs	r3, #100	; 0x64
 8000e94:	f001 fbb0 	bl	80025f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&debug_uart,(uint8_t*)"\r\n",2,TX_TIMEOUT);
 8000e98:	0028      	movs	r0, r5
 8000e9a:	2364      	movs	r3, #100	; 0x64
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	4904      	ldr	r1, [pc, #16]	; (8000eb0 <send_raw_debug+0x48>)
 8000ea0:	f001 fbaa 	bl	80025f8 <HAL_UART_Transmit>
}
 8000ea4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	08003be9 	.word	0x08003be9
 8000eac:	20000124 	.word	0x20000124
 8000eb0:	08003be6 	.word	0x08003be6

08000eb4 <HAL_UART_RxCpltCallback>:
 * it copies the received byte into the receive buffer which is a global variable: sim_rx_buffer. 
 * it also increases by one the counter of received bytes: rx_index. Which points to the next free index in the receive buffer.
 * usart1 is always used to communicate with SIM module therefore AT_uart is defined as usart1.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if (huart->Instance==USART1){
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_UART_RxCpltCallback+0x2c>)
 8000eb6:	6802      	ldr	r2, [r0, #0]
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000eb8:	b510      	push	{r4, lr}
	if (huart->Instance==USART1){
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d10e      	bne.n	8000edc <HAL_UART_RxCpltCallback+0x28>
		sim_rx_buffer[rx_index++ ]=rx_byte; /*rx_index++ modulo RX_BUFFER_LENGTH to ensure it always stays smaller then RX_BUFFER_LENGTH*/
 8000ebe:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <HAL_UART_RxCpltCallback+0x30>)
 8000ec0:	4909      	ldr	r1, [pc, #36]	; (8000ee8 <HAL_UART_RxCpltCallback+0x34>)
 8000ec2:	7813      	ldrb	r3, [r2, #0]
 8000ec4:	b2d8      	uxtb	r0, r3
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	7013      	strb	r3, [r2, #0]
 8000ecc:	780b      	ldrb	r3, [r1, #0]
 8000ece:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_UART_RxCpltCallback+0x38>)
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	5413      	strb	r3, [r2, r0]
		
		/* Enable UART receive interrupt again*/
		HAL_UART_Receive_IT(&AT_uart,(uint8_t *)&rx_byte,1);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <HAL_UART_RxCpltCallback+0x3c>)
 8000ed8:	f001 fcb6 	bl	8002848 <HAL_UART_Receive_IT>
	}
}	
 8000edc:	bd10      	pop	{r4, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	40013800 	.word	0x40013800
 8000ee4:	200001a9 	.word	0x200001a9
 8000ee8:	200001a8 	.word	0x200001a8
 8000eec:	200001aa 	.word	0x200001aa
 8000ef0:	200000a0 	.word	0x200000a0

08000ef4 <sim_power_off>:
		#endif
		return FAIL;
	}
}

uint8_t sim_power_off(SIM808_typedef * sim){
 8000ef4:	b570      	push	{r4, r5, r6, lr}
 8000ef6:	0004      	movs	r4, r0
		uint8_t trials=0;  

		while(HAL_GPIO_ReadPin(sim->status_gpio,sim->status_pin) && trials<3){
		HAL_GPIO_WritePin(sim->power_on_gpio,sim->power_on_pin,GPIO_PIN_RESET);
		/* Keep pin down for 1.2 s */
		HAL_Delay(1200);
 8000ef8:	2696      	movs	r6, #150	; 0x96
				send_debug("Power off Module initiated");
 8000efa:	481b      	ldr	r0, [pc, #108]	; (8000f68 <sim_power_off+0x74>)
 8000efc:	f7ff ff8a 	bl	8000e14 <send_debug>
		while(HAL_GPIO_ReadPin(sim->status_gpio,sim->status_pin) && trials<3){
 8000f00:	2504      	movs	r5, #4
		HAL_Delay(1200);
 8000f02:	00f6      	lsls	r6, r6, #3
		while(HAL_GPIO_ReadPin(sim->status_gpio,sim->status_pin) && trials<3){
 8000f04:	8ba1      	ldrh	r1, [r4, #28]
 8000f06:	69a0      	ldr	r0, [r4, #24]
 8000f08:	f000 fc6a 	bl	80017e0 <HAL_GPIO_ReadPin>
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	d003      	beq.n	8000f18 <sim_power_off+0x24>
 8000f10:	3d01      	subs	r5, #1
 8000f12:	b2ed      	uxtb	r5, r5
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	d110      	bne.n	8000f3a <sim_power_off+0x46>
		HAL_GPIO_WritePin(sim->power_on_gpio,sim->power_on_pin,GPIO_PIN_SET);
		HAL_Delay(100);
		trials++;
	}
		
		if (HAL_GPIO_ReadPin(sim->status_gpio,sim->status_pin)==0){
 8000f18:	8ba1      	ldrh	r1, [r4, #28]
 8000f1a:	69a0      	ldr	r0, [r4, #24]
 8000f1c:	f000 fc60 	bl	80017e0 <HAL_GPIO_ReadPin>
 8000f20:	1e04      	subs	r4, r0, #0
 8000f22:	d11b      	bne.n	8000f5c <sim_power_off+0x68>
			#ifdef DEBUG_MODE
			send_debug("Power off Module: SUCCESS");
 8000f24:	4811      	ldr	r0, [pc, #68]	; (8000f6c <sim_power_off+0x78>)
 8000f26:	f7ff ff75 	bl	8000e14 <send_debug>
			#endif
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	4810      	ldr	r0, [pc, #64]	; (8000f70 <sim_power_off+0x7c>)
 8000f2e:	0022      	movs	r2, r4
 8000f30:	0149      	lsls	r1, r1, #5
 8000f32:	f000 fc5b 	bl	80017ec <HAL_GPIO_WritePin>
			return SUCCESS;
 8000f36:	2001      	movs	r0, #1
			send_debug("Power off Module: FAIL");
			#endif
			return FAIL;
		}
		
}
 8000f38:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(sim->power_on_gpio,sim->power_on_pin,GPIO_PIN_RESET);
 8000f3a:	89a1      	ldrh	r1, [r4, #12]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	68a0      	ldr	r0, [r4, #8]
 8000f40:	f000 fc54 	bl	80017ec <HAL_GPIO_WritePin>
		HAL_Delay(1200);
 8000f44:	0030      	movs	r0, r6
 8000f46:	f000 fae3 	bl	8001510 <HAL_Delay>
		HAL_GPIO_WritePin(sim->power_on_gpio,sim->power_on_pin,GPIO_PIN_SET);
 8000f4a:	68a0      	ldr	r0, [r4, #8]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	89a1      	ldrh	r1, [r4, #12]
 8000f50:	f000 fc4c 	bl	80017ec <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000f54:	2064      	movs	r0, #100	; 0x64
 8000f56:	f000 fadb 	bl	8001510 <HAL_Delay>
		trials++;
 8000f5a:	e7d3      	b.n	8000f04 <sim_power_off+0x10>
			send_debug("Power off Module: FAIL");
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <sim_power_off+0x80>)
 8000f5e:	f7ff ff59 	bl	8000e14 <send_debug>
			return FAIL;
 8000f62:	2000      	movs	r0, #0
 8000f64:	e7e8      	b.n	8000f38 <sim_power_off+0x44>
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	08003bf2 	.word	0x08003bf2
 8000f6c:	08003c0d 	.word	0x08003c0d
 8000f70:	48000400 	.word	0x48000400
 8000f74:	08003c27 	.word	0x08003c27

08000f78 <system_reset>:

void system_reset(SIM808_typedef * sim){
 8000f78:	b510      	push	{r4, lr}
	
	sim_power_off(sim);
 8000f7a:	f7ff ffbb 	bl	8000ef4 <sim_power_off>
	HAL_NVIC_SystemReset();
 8000f7e:	f000 fb0f 	bl	80015a0 <HAL_NVIC_SystemReset>
}
 8000f82:	bd10      	pop	{r4, pc}

08000f84 <is_subarray_present>:
}



uint8_t is_subarray_present(const uint8_t *array, size_t array_len, const uint8_t *subarray, size_t subarray_len)
{
 8000f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f86:	0006      	movs	r6, r0
    if (array_len < subarray_len) {
        return FALSE;
 8000f88:	2000      	movs	r0, #0
    if (array_len < subarray_len) {
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d305      	bcc.n	8000f9a <is_subarray_present+0x16>
    }

    for (size_t i = 0; i <= array_len - subarray_len; ++i) {
 8000f8e:	0005      	movs	r5, r0
        int match = TRUE;
        for (size_t j = 0; j < subarray_len; ++j) {
 8000f90:	0004      	movs	r4, r0
    for (size_t i = 0; i <= array_len - subarray_len; ++i) {
 8000f92:	1ac9      	subs	r1, r1, r3
        for (size_t j = 0; j < subarray_len; ++j) {
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d801      	bhi.n	8000f9c <is_subarray_present+0x18>
                match = FALSE;
                break;
            }
        }
        if (match) {
            return TRUE;
 8000f98:	2001      	movs	r0, #1
        }
    }

    return FALSE;
}
 8000f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (array[i + j] != subarray[j]) {
 8000f9c:	1930      	adds	r0, r6, r4
 8000f9e:	5d47      	ldrb	r7, [r0, r5]
 8000fa0:	5d10      	ldrb	r0, [r2, r4]
        for (size_t j = 0; j < subarray_len; ++j) {
 8000fa2:	3401      	adds	r4, #1
            if (array[i + j] != subarray[j]) {
 8000fa4:	4287      	cmp	r7, r0
 8000fa6:	d0f5      	beq.n	8000f94 <is_subarray_present+0x10>
    for (size_t i = 0; i <= array_len - subarray_len; ++i) {
 8000fa8:	3501      	adds	r5, #1
 8000faa:	428d      	cmp	r5, r1
 8000fac:	d901      	bls.n	8000fb2 <is_subarray_present+0x2e>
        return FALSE;
 8000fae:	2000      	movs	r0, #0
 8000fb0:	e7f3      	b.n	8000f9a <is_subarray_present+0x16>
        for (size_t j = 0; j < subarray_len; ++j) {
 8000fb2:	2400      	movs	r4, #0
 8000fb4:	e7ee      	b.n	8000f94 <is_subarray_present+0x10>
	...

08000fb8 <send_AT_cmd>:
uint8_t send_AT_cmd(const char * cmd, const char * expected_reply, uint8_t save_reply, char * cmd_reply, uint32_t rx_timeout){
 8000fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fba:	b0a3      	sub	sp, #140	; 0x8c
 8000fbc:	0005      	movs	r5, r0
 8000fbe:	000f      	movs	r7, r1
 8000fc0:	9200      	str	r2, [sp, #0]
 8000fc2:	9301      	str	r3, [sp, #4]
	HAL_UART_Transmit(&AT_uart,(uint8_t *)cmd,strlen(cmd),TX_TIMEOUT);
 8000fc4:	f7ff f8a0 	bl	8000108 <strlen>
 8000fc8:	2364      	movs	r3, #100	; 0x64
 8000fca:	b282      	uxth	r2, r0
 8000fcc:	0029      	movs	r1, r5
 8000fce:	481e      	ldr	r0, [pc, #120]	; (8001048 <send_AT_cmd+0x90>)
 8000fd0:	f001 fb12 	bl	80025f8 <HAL_UART_Transmit>
	uint32_t timer=0;
 8000fd4:	2600      	movs	r6, #0
	while ( (is_expected_reply_received==0) && (timer < rx_timeout)) {
 8000fd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8000fd8:	42b3      	cmp	r3, r6
 8000fda:	d101      	bne.n	8000fe0 <send_AT_cmd+0x28>
 8000fdc:	2400      	movs	r4, #0
 8000fde:	e010      	b.n	8001002 <send_AT_cmd+0x4a>
		is_expected_reply_received=is_subarray_present((const uint8_t *)sim_rx_buffer,RX_BUFFER_LENGTH,(uint8_t *)expected_reply,strlen(expected_reply));
 8000fe0:	0038      	movs	r0, r7
 8000fe2:	f7ff f891 	bl	8000108 <strlen>
 8000fe6:	2180      	movs	r1, #128	; 0x80
 8000fe8:	0003      	movs	r3, r0
 8000fea:	003a      	movs	r2, r7
 8000fec:	4817      	ldr	r0, [pc, #92]	; (800104c <send_AT_cmd+0x94>)
 8000fee:	0049      	lsls	r1, r1, #1
 8000ff0:	f7ff ffc8 	bl	8000f84 <is_subarray_present>
 8000ff4:	0004      	movs	r4, r0
		HAL_Delay(1);
 8000ff6:	2001      	movs	r0, #1
		timer++;
 8000ff8:	3601      	adds	r6, #1
		HAL_Delay(1);
 8000ffa:	f000 fa89 	bl	8001510 <HAL_Delay>
	while ( (is_expected_reply_received==0) && (timer < rx_timeout)) {
 8000ffe:	2c00      	cmp	r4, #0
 8001000:	d0e9      	beq.n	8000fd6 <send_AT_cmd+0x1e>
	sprintf(debug_msg,"Finished in %d ms: ",timer);
 8001002:	0032      	movs	r2, r6
 8001004:	4912      	ldr	r1, [pc, #72]	; (8001050 <send_AT_cmd+0x98>)
 8001006:	a802      	add	r0, sp, #8
 8001008:	f001 fc90 	bl	800292c <siprintf>
	strcat(debug_msg,cmd);
 800100c:	0029      	movs	r1, r5
 800100e:	a802      	add	r0, sp, #8
 8001010:	f001 fcac 	bl	800296c <strcat>
	send_debug(debug_msg);
 8001014:	a802      	add	r0, sp, #8
 8001016:	f7ff fefd 	bl	8000e14 <send_debug>
	if (save_reply == 1 )
 800101a:	9b00      	ldr	r3, [sp, #0]
 800101c:	4d0b      	ldr	r5, [pc, #44]	; (800104c <send_AT_cmd+0x94>)
 800101e:	2b01      	cmp	r3, #1
 8001020:	d105      	bne.n	800102e <send_AT_cmd+0x76>
		memcpy(cmd_reply,(const char *)sim_rx_buffer,RX_BUFFER_LENGTH);
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	0029      	movs	r1, r5
 8001026:	9801      	ldr	r0, [sp, #4]
 8001028:	0052      	lsls	r2, r2, #1
 800102a:	f001 fc6d 	bl	8002908 <memcpy>
	memset((void *)sim_rx_buffer,NULL,RX_BUFFER_LENGTH);
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	2100      	movs	r1, #0
 8001032:	0028      	movs	r0, r5
 8001034:	0052      	lsls	r2, r2, #1
 8001036:	f001 fc70 	bl	800291a <memset>
	rx_index=0;
 800103a:	2200      	movs	r2, #0
}
 800103c:	0020      	movs	r0, r4
	rx_index=0;
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <send_AT_cmd+0x9c>)
 8001040:	701a      	strb	r2, [r3, #0]
}
 8001042:	b023      	add	sp, #140	; 0x8c
 8001044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	200000a0 	.word	0x200000a0
 800104c:	200001aa 	.word	0x200001aa
 8001050:	08003c3e 	.word	0x08003c3e
 8001054:	200001a9 	.word	0x200001a9

08001058 <sim_init>:
uint8_t sim_init(SIM808_typedef * sim){
 8001058:	b5f0      	push	{r4, r5, r6, r7, lr}
	debug_uart.Instance = USART2;
 800105a:	4b5f      	ldr	r3, [pc, #380]	; (80011d8 <sim_init+0x180>)
uint8_t sim_init(SIM808_typedef * sim){
 800105c:	0004      	movs	r4, r0
	debug_uart.Instance = USART2;
 800105e:	485f      	ldr	r0, [pc, #380]	; (80011dc <sim_init+0x184>)
	debug_uart.Init.BaudRate = BAUD_RATE;
 8001060:	2696      	movs	r6, #150	; 0x96
	debug_uart.Init.Mode = UART_MODE_TX_RX;
 8001062:	220c      	movs	r2, #12
	debug_uart.Instance = USART2;
 8001064:	6003      	str	r3, [r0, #0]
	debug_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	2300      	movs	r3, #0
uint8_t sim_init(SIM808_typedef * sim){
 8001068:	b089      	sub	sp, #36	; 0x24
	debug_uart.Init.BaudRate = BAUD_RATE;
 800106a:	0236      	lsls	r6, r6, #8
 800106c:	6046      	str	r6, [r0, #4]
	debug_uart.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	6083      	str	r3, [r0, #8]
	debug_uart.Init.StopBits = UART_STOPBITS_1;
 8001070:	60c3      	str	r3, [r0, #12]
	debug_uart.Init.Parity = UART_PARITY_NONE;
 8001072:	6103      	str	r3, [r0, #16]
	debug_uart.Init.Mode = UART_MODE_TX_RX;
 8001074:	6142      	str	r2, [r0, #20]
	debug_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	6183      	str	r3, [r0, #24]
	debug_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	61c3      	str	r3, [r0, #28]
	debug_uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107a:	6203      	str	r3, [r0, #32]
	debug_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107c:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&debug_uart) != HAL_OK){
 800107e:	f001 fb5f 	bl	8002740 <HAL_UART_Init>
 8001082:	2800      	cmp	r0, #0
 8001084:	d001      	beq.n	800108a <sim_init+0x32>
		Error_Handler();
 8001086:	f7ff fa29 	bl	80004dc <Error_Handler>
	AT_uart.Instance = USART1;
 800108a:	4d55      	ldr	r5, [pc, #340]	; (80011e0 <sim_init+0x188>)
 800108c:	4b55      	ldr	r3, [pc, #340]	; (80011e4 <sim_init+0x18c>)
	AT_uart.Init.Mode = UART_MODE_TX_RX;
 800108e:	220c      	movs	r2, #12
	AT_uart.Instance = USART1;
 8001090:	602b      	str	r3, [r5, #0]
	AT_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	2300      	movs	r3, #0
	if (HAL_UART_Init(&AT_uart) != HAL_OK){
 8001094:	0028      	movs	r0, r5
	AT_uart.Init.BaudRate = BAUD_RATE;
 8001096:	606e      	str	r6, [r5, #4]
	AT_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8001098:	60ab      	str	r3, [r5, #8]
	AT_uart.Init.StopBits = UART_STOPBITS_1;
 800109a:	60eb      	str	r3, [r5, #12]
	AT_uart.Init.Parity = UART_PARITY_NONE;
 800109c:	612b      	str	r3, [r5, #16]
	AT_uart.Init.Mode = UART_MODE_TX_RX;
 800109e:	616a      	str	r2, [r5, #20]
	AT_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a0:	61ab      	str	r3, [r5, #24]
	AT_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a2:	61eb      	str	r3, [r5, #28]
	AT_uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a4:	622b      	str	r3, [r5, #32]
	AT_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a6:	626b      	str	r3, [r5, #36]	; 0x24
	if (HAL_UART_Init(&AT_uart) != HAL_OK){
 80010a8:	f001 fb4a 	bl	8002740 <HAL_UART_Init>
 80010ac:	2800      	cmp	r0, #0
 80010ae:	d001      	beq.n	80010b4 <sim_init+0x5c>
	Error_Handler();
 80010b0:	f7ff fa14 	bl	80004dc <Error_Handler>
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010b6:	2711      	movs	r7, #17
	HAL_UART_Receive_IT(&AT_uart,(uint8_t *)&rx_byte,1);  
 80010b8:	2201      	movs	r2, #1
 80010ba:	494b      	ldr	r1, [pc, #300]	; (80011e8 <sim_init+0x190>)
 80010bc:	0028      	movs	r0, r5
 80010be:	f001 fbc3 	bl	8002848 <HAL_UART_Receive_IT>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	2214      	movs	r2, #20
 80010c4:	2100      	movs	r1, #0
 80010c6:	a803      	add	r0, sp, #12
 80010c8:	f001 fc27 	bl	800291a <memset>
	HAL_GPIO_WritePin(sim->reset_gpio, sim->reset_pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	8aa1      	ldrh	r1, [r4, #20]
 80010d0:	6920      	ldr	r0, [r4, #16]
 80010d2:	f000 fb8b 	bl	80017ec <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = sim->reset_pin;
 80010d6:	8aa3      	ldrh	r3, [r4, #20]
	HAL_GPIO_Init(sim->reset_gpio, &GPIO_InitStruct);
 80010d8:	6920      	ldr	r0, [r4, #16]
 80010da:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Pin = sim->reset_pin;
 80010dc:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010de:	9704      	str	r7, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(sim->reset_gpio, &GPIO_InitStruct);
 80010e4:	f000 fac6 	bl	8001674 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(sim->power_on_gpio, sim->power_on_pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	89a1      	ldrh	r1, [r4, #12]
 80010ec:	68a0      	ldr	r0, [r4, #8]
 80010ee:	f000 fb7d 	bl	80017ec <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = sim->power_on_pin;
 80010f2:	89a3      	ldrh	r3, [r4, #12]
	HAL_GPIO_Init(sim->power_on_gpio, &GPIO_InitStruct);
 80010f4:	68a0      	ldr	r0, [r4, #8]
 80010f6:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Pin = sim->power_on_pin;
 80010f8:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010fa:	9704      	str	r7, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(sim->power_on_gpio, &GPIO_InitStruct);
 8001100:	f000 fab8 	bl	8001674 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = sim->status_pin;
 8001104:	8ba3      	ldrh	r3, [r4, #28]
		HAL_Delay(1200);
 8001106:	2796      	movs	r7, #150	; 0x96
	HAL_GPIO_Init(sim->status_gpio, &GPIO_InitStruct);
 8001108:	69a0      	ldr	r0, [r4, #24]
 800110a:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110c:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pin = sim->status_pin;
 8001112:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(sim->status_gpio, &GPIO_InitStruct);
 8001114:	f000 faae 	bl	8001674 <HAL_GPIO_Init>
	while(!HAL_GPIO_ReadPin(sim->status_gpio,sim->status_pin) && trials<3){
 8001118:	3604      	adds	r6, #4
		HAL_Delay(1200);
 800111a:	00ff      	lsls	r7, r7, #3
	while(!HAL_GPIO_ReadPin(sim->status_gpio,sim->status_pin) && trials<3){
 800111c:	8ba1      	ldrh	r1, [r4, #28]
 800111e:	69a0      	ldr	r0, [r4, #24]
 8001120:	f000 fb5e 	bl	80017e0 <HAL_GPIO_ReadPin>
 8001124:	1e02      	subs	r2, r0, #0
 8001126:	d103      	bne.n	8001130 <sim_init+0xd8>
 8001128:	3e01      	subs	r6, #1
 800112a:	b2f6      	uxtb	r6, r6
 800112c:	2e00      	cmp	r6, #0
 800112e:	d12b      	bne.n	8001188 <sim_init+0x130>
		send_debug("System initialization: Started");
 8001130:	482e      	ldr	r0, [pc, #184]	; (80011ec <sim_init+0x194>)
 8001132:	f7ff fe6f 	bl	8000e14 <send_debug>
	if (HAL_GPIO_ReadPin(sim->status_gpio,sim->status_pin)){
 8001136:	8ba1      	ldrh	r1, [r4, #28]
 8001138:	69a0      	ldr	r0, [r4, #24]
 800113a:	f000 fb51 	bl	80017e0 <HAL_GPIO_ReadPin>
 800113e:	1e04      	subs	r4, r0, #0
 8001140:	d032      	beq.n	80011a8 <sim_init+0x150>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	2201      	movs	r2, #1
 8001146:	482a      	ldr	r0, [pc, #168]	; (80011f0 <sim_init+0x198>)
 8001148:	0149      	lsls	r1, r1, #5
 800114a:	f000 fb4f 	bl	80017ec <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&AT_uart,(uint8_t *)"AT\r",3,TX_TIMEOUT);
 800114e:	4c29      	ldr	r4, [pc, #164]	; (80011f4 <sim_init+0x19c>)
 8001150:	2364      	movs	r3, #100	; 0x64
 8001152:	0021      	movs	r1, r4
 8001154:	2203      	movs	r2, #3
 8001156:	0028      	movs	r0, r5
 8001158:	f001 fa4e 	bl	80025f8 <HAL_UART_Transmit>
	HAL_Delay(3000);	
 800115c:	4826      	ldr	r0, [pc, #152]	; (80011f8 <sim_init+0x1a0>)
 800115e:	f000 f9d7 	bl	8001510 <HAL_Delay>
	is_module_replying=send_AT_cmd("AT\r","OK",0,NULL,RX_TIMEOUT);
 8001162:	23fa      	movs	r3, #250	; 0xfa
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2300      	movs	r3, #0
 800116a:	0020      	movs	r0, r4
 800116c:	001a      	movs	r2, r3
 800116e:	4923      	ldr	r1, [pc, #140]	; (80011fc <sim_init+0x1a4>)
 8001170:	f7ff ff22 	bl	8000fb8 <send_AT_cmd>
 8001174:	0004      	movs	r4, r0
	if (is_module_replying==1){
 8001176:	2801      	cmp	r0, #1
 8001178:	d125      	bne.n	80011c6 <sim_init+0x16e>
				send_debug("System initialization: SUCCESS");
 800117a:	4821      	ldr	r0, [pc, #132]	; (8001200 <sim_init+0x1a8>)
 800117c:	f7ff fe4a 	bl	8000e14 <send_debug>
				send_debug("SIM808 module is responsive");
 8001180:	4820      	ldr	r0, [pc, #128]	; (8001204 <sim_init+0x1ac>)
 8001182:	f7ff fe47 	bl	8000e14 <send_debug>
		return SUCCESS;
 8001186:	e01b      	b.n	80011c0 <sim_init+0x168>
		HAL_GPIO_WritePin(sim->power_on_gpio,sim->power_on_pin,GPIO_PIN_RESET);
 8001188:	89a1      	ldrh	r1, [r4, #12]
 800118a:	68a0      	ldr	r0, [r4, #8]
 800118c:	f000 fb2e 	bl	80017ec <HAL_GPIO_WritePin>
		HAL_Delay(1200);
 8001190:	0038      	movs	r0, r7
 8001192:	f000 f9bd 	bl	8001510 <HAL_Delay>
		HAL_GPIO_WritePin(sim->power_on_gpio,sim->power_on_pin,GPIO_PIN_SET);
 8001196:	68a0      	ldr	r0, [r4, #8]
 8001198:	2201      	movs	r2, #1
 800119a:	89a1      	ldrh	r1, [r4, #12]
 800119c:	f000 fb26 	bl	80017ec <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80011a0:	2064      	movs	r0, #100	; 0x64
 80011a2:	f000 f9b5 	bl	8001510 <HAL_Delay>
		trials++;
 80011a6:	e7b9      	b.n	800111c <sim_init+0xc4>
					send_debug("System initialization: FAILED");
 80011a8:	4817      	ldr	r0, [pc, #92]	; (8001208 <sim_init+0x1b0>)
 80011aa:	f7ff fe33 	bl	8000e14 <send_debug>
					send_debug("Reason: SIM808 cannot be powered on");
 80011ae:	4817      	ldr	r0, [pc, #92]	; (800120c <sim_init+0x1b4>)
 80011b0:	f7ff fe30 	bl	8000e14 <send_debug>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 80011b4:	2180      	movs	r1, #128	; 0x80
 80011b6:	0022      	movs	r2, r4
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <sim_init+0x198>)
 80011ba:	0149      	lsls	r1, r1, #5
 80011bc:	f000 fb16 	bl	80017ec <HAL_GPIO_WritePin>
}
 80011c0:	0020      	movs	r0, r4
 80011c2:	b009      	add	sp, #36	; 0x24
 80011c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			send_debug("System initialization: FAILED");
 80011c6:	4810      	ldr	r0, [pc, #64]	; (8001208 <sim_init+0x1b0>)
 80011c8:	f7ff fe24 	bl	8000e14 <send_debug>
			send_debug("Reason: SIM808 is not responding");
 80011cc:	4810      	ldr	r0, [pc, #64]	; (8001210 <sim_init+0x1b8>)
 80011ce:	f7ff fe21 	bl	8000e14 <send_debug>
		return FAIL;
 80011d2:	2400      	movs	r4, #0
 80011d4:	e7f4      	b.n	80011c0 <sim_init+0x168>
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	40004400 	.word	0x40004400
 80011dc:	20000124 	.word	0x20000124
 80011e0:	200000a0 	.word	0x200000a0
 80011e4:	40013800 	.word	0x40013800
 80011e8:	200001a8 	.word	0x200001a8
 80011ec:	08003c52 	.word	0x08003c52
 80011f0:	48000400 	.word	0x48000400
 80011f4:	08003c71 	.word	0x08003c71
 80011f8:	00000bb8 	.word	0x00000bb8
 80011fc:	08003977 	.word	0x08003977
 8001200:	08003cb7 	.word	0x08003cb7
 8001204:	08003cd6 	.word	0x08003cd6
 8001208:	08003c75 	.word	0x08003c75
 800120c:	08003c93 	.word	0x08003c93
 8001210:	08003cf2 	.word	0x08003cf2

08001214 <send_serial_data>:



uint8_t send_serial_data(uint8_t * data, uint8_t length,  char * cmd_reply, uint32_t rx_timeout){
 8001214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001216:	b0a5      	sub	sp, #148	; 0x94
 8001218:	9200      	str	r2, [sp, #0]
 800121a:	9301      	str	r3, [sp, #4]
	
	
	
	HAL_UART_Transmit(&AT_uart,data,length,TX_TIMEOUT);
 800121c:	000a      	movs	r2, r1
 800121e:	2364      	movs	r3, #100	; 0x64
 8001220:	0001      	movs	r1, r0
 8001222:	4822      	ldr	r0, [pc, #136]	; (80012ac <send_serial_data+0x98>)
 8001224:	f001 f9e8 	bl	80025f8 <HAL_UART_Transmit>
	
	
	uint8_t is_expected_reply_received=0;
	uint32_t timer=0;
	uint8_t expected_reply[]={0x53,0x45,0x4E,0x44,0x20,0x4F,0x4B}; /*SEND OK in HEX"*/
 8001228:	2207      	movs	r2, #7
 800122a:	4921      	ldr	r1, [pc, #132]	; (80012b0 <send_serial_data+0x9c>)
 800122c:	a802      	add	r0, sp, #8
 800122e:	f001 fb6b 	bl	8002908 <memcpy>
	uint32_t timer=0;
 8001232:	2500      	movs	r5, #0
            return TRUE;
 8001234:	2701      	movs	r7, #1

	/* Wait for the module until the expected reply is received or if the timeout is breached */
	/*strstr will not work here, because the buffer might contain raw hex data */
	while ( (is_expected_reply_received==0) && (timer < rx_timeout)) {
 8001236:	9b01      	ldr	r3, [sp, #4]
 8001238:	4e1e      	ldr	r6, [pc, #120]	; (80012b4 <send_serial_data+0xa0>)
 800123a:	42ab      	cmp	r3, r5
 800123c:	d101      	bne.n	8001242 <send_serial_data+0x2e>
 800123e:	2400      	movs	r4, #0
 8001240:	e011      	b.n	8001266 <send_serial_data+0x52>
    for (size_t i = 0; i <= array_len - subarray_len; ++i) {
 8001242:	2200      	movs	r2, #0
        for (size_t j = 0; j < subarray_len; ++j) {
 8001244:	2300      	movs	r3, #0
            if (array[i + j] != subarray[j]) {
 8001246:	18b1      	adds	r1, r6, r2
 8001248:	a802      	add	r0, sp, #8
 800124a:	5ccc      	ldrb	r4, [r1, r3]
 800124c:	5cc0      	ldrb	r0, [r0, r3]
 800124e:	4284      	cmp	r4, r0
 8001250:	d126      	bne.n	80012a0 <send_serial_data+0x8c>
        for (size_t j = 0; j < subarray_len; ++j) {
 8001252:	3301      	adds	r3, #1
 8001254:	2b07      	cmp	r3, #7
 8001256:	d1f7      	bne.n	8001248 <send_serial_data+0x34>
            return TRUE;
 8001258:	003c      	movs	r4, r7
		is_expected_reply_received=is_subarray_present((uint8_t*)sim_rx_buffer,RX_BUFFER_LENGTH,expected_reply,7);
		timer++;
		HAL_Delay(1);
 800125a:	0038      	movs	r0, r7
		timer++;
 800125c:	3501      	adds	r5, #1
		HAL_Delay(1);
 800125e:	f000 f957 	bl	8001510 <HAL_Delay>
	while ( (is_expected_reply_received==0) && (timer < rx_timeout)) {
 8001262:	2c00      	cmp	r4, #0
 8001264:	d0e7      	beq.n	8001236 <send_serial_data+0x22>
	}
	char  debug_msg[128];
	#ifdef DEBUG_MODE
		sprintf(debug_msg,"Finished in %d ms: ",timer);
 8001266:	002a      	movs	r2, r5
 8001268:	4913      	ldr	r1, [pc, #76]	; (80012b8 <send_serial_data+0xa4>)
 800126a:	a804      	add	r0, sp, #16
 800126c:	f001 fb5e 	bl	800292c <siprintf>
		send_debug(debug_msg);
 8001270:	a804      	add	r0, sp, #16
 8001272:	f7ff fdcf 	bl	8000e14 <send_debug>
		send_debug(sim_rx_buffer);
 8001276:	0030      	movs	r0, r6
 8001278:	f7ff fdcc 	bl	8000e14 <send_debug>
	#endif
	
	/* copy buffer into local parameter and clear the sim_rx_buffer, reset the receive counter rx_index 
	 * and then return 1 to acknowledge the success of the command
	 */
	memcpy(cmd_reply,(const char *)sim_rx_buffer,RX_BUFFER_LENGTH);
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	0031      	movs	r1, r6
 8001280:	9800      	ldr	r0, [sp, #0]
 8001282:	0052      	lsls	r2, r2, #1
 8001284:	f001 fb40 	bl	8002908 <memcpy>
	memset((void *)sim_rx_buffer,NULL,RX_BUFFER_LENGTH);
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	2100      	movs	r1, #0
 800128c:	0030      	movs	r0, r6
 800128e:	0052      	lsls	r2, r2, #1
 8001290:	f001 fb43 	bl	800291a <memset>
	rx_index=0;
 8001294:	2200      	movs	r2, #0
	
	return 	is_expected_reply_received;
}
 8001296:	0020      	movs	r0, r4
	rx_index=0;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <send_serial_data+0xa8>)
 800129a:	701a      	strb	r2, [r3, #0]
}
 800129c:	b025      	add	sp, #148	; 0x94
 800129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (size_t i = 0; i <= array_len - subarray_len; ++i) {
 80012a0:	3201      	adds	r2, #1
 80012a2:	2afa      	cmp	r2, #250	; 0xfa
 80012a4:	d1ce      	bne.n	8001244 <send_serial_data+0x30>
    return FALSE;
 80012a6:	2400      	movs	r4, #0
 80012a8:	e7d7      	b.n	800125a <send_serial_data+0x46>
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	200000a0 	.word	0x200000a0
 80012b0:	08003d13 	.word	0x08003d13
 80012b4:	200001aa 	.word	0x200001aa
 80012b8:	08003c3e 	.word	0x08003c3e
 80012bc:	200001a9 	.word	0x200001a9

080012c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c0:	2001      	movs	r0, #1
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_MspInit+0x2c>)
{
 80012c4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	6999      	ldr	r1, [r3, #24]
 80012c8:	4301      	orrs	r1, r0
 80012ca:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012cc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d0:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	4002      	ands	r2, r0
 80012d4:	9200      	str	r2, [sp, #0]
 80012d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d8:	69da      	ldr	r2, [r3, #28]
 80012da:	430a      	orrs	r2, r1
 80012dc:	61da      	str	r2, [r3, #28]
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	400b      	ands	r3, r1
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	b002      	add	sp, #8
 80012e8:	4770      	bx	lr
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	40021000 	.word	0x40021000

080012f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f0:	b510      	push	{r4, lr}
 80012f2:	0004      	movs	r4, r0
 80012f4:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	2214      	movs	r2, #20
 80012f8:	2100      	movs	r1, #0
 80012fa:	a805      	add	r0, sp, #20
 80012fc:	f001 fb0d 	bl	800291a <memset>
  if(huart->Instance==USART1)
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	4a2b      	ldr	r2, [pc, #172]	; (80013b0 <HAL_UART_MspInit+0xc0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d12a      	bne.n	800135e <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001308:	2080      	movs	r0, #128	; 0x80
 800130a:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <HAL_UART_MspInit+0xc4>)
 800130c:	01c0      	lsls	r0, r0, #7
 800130e:	6999      	ldr	r1, [r3, #24]
 8001310:	4301      	orrs	r1, r0
 8001312:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001316:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 800131a:	4002      	ands	r2, r0
 800131c:	9201      	str	r2, [sp, #4]
 800131e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	430a      	orrs	r2, r1
 8001326:	615a      	str	r2, [r3, #20]
 8001328:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	400b      	ands	r3, r1
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001332:	23c0      	movs	r3, #192	; 0xc0
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800133c:	3301      	adds	r3, #1
 800133e:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001342:	3b02      	subs	r3, #2
 8001344:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f000 f995 	bl	8001674 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	201b      	movs	r0, #27
 800134e:	0011      	movs	r1, r2
 8001350:	f000 f8f0 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001354:	201b      	movs	r0, #27
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001356:	f000 f917 	bl	8001588 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800135a:	b00a      	add	sp, #40	; 0x28
 800135c:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 800135e:	4a16      	ldr	r2, [pc, #88]	; (80013b8 <HAL_UART_MspInit+0xc8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d1fa      	bne.n	800135a <HAL_UART_MspInit+0x6a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_UART_MspInit+0xc4>)
 8001368:	0292      	lsls	r2, r2, #10
 800136a:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 800136e:	4311      	orrs	r1, r2
 8001370:	61d9      	str	r1, [r3, #28]
 8001372:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8001376:	4011      	ands	r1, r2
 8001378:	9103      	str	r1, [sp, #12]
 800137a:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	6959      	ldr	r1, [r3, #20]
 800137e:	4311      	orrs	r1, r2
 8001380:	6159      	str	r1, [r3, #20]
 8001382:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	401a      	ands	r2, r3
 8001388:	9204      	str	r2, [sp, #16]
 800138a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800138c:	230c      	movs	r3, #12
 800138e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	3b0a      	subs	r3, #10
 8001392:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001394:	3301      	adds	r3, #1
 8001396:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001398:	3b02      	subs	r3, #2
 800139a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f000 f96a 	bl	8001674 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	201c      	movs	r0, #28
 80013a4:	0011      	movs	r1, r2
 80013a6:	f000 f8c5 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013aa:	201c      	movs	r0, #28
 80013ac:	e7d3      	b.n	8001356 <HAL_UART_MspInit+0x66>
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	40013800 	.word	0x40013800
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40004400 	.word	0x40004400

080013bc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler>

080013be <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <HardFault_Handler>

080013c0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013c0:	4770      	bx	lr

080013c2 <PendSV_Handler>:
 80013c2:	4770      	bx	lr

080013c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c6:	f000 f891 	bl	80014ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ca:	bd10      	pop	{r4, pc}

080013cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80013cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013ce:	4802      	ldr	r0, [pc, #8]	; (80013d8 <USART1_IRQHandler+0xc>)
 80013d0:	f000 fdaa 	bl	8001f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013d4:	bd10      	pop	{r4, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	200000a0 	.word	0x200000a0

080013dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013de:	4802      	ldr	r0, [pc, #8]	; (80013e8 <USART2_IRQHandler+0xc>)
 80013e0:	f000 fda2 	bl	8001f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013e4:	bd10      	pop	{r4, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	20000124 	.word	0x20000124

080013ec <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ec:	4a0b      	ldr	r2, [pc, #44]	; (800141c <_sbrk+0x30>)
 80013ee:	490c      	ldr	r1, [pc, #48]	; (8001420 <_sbrk+0x34>)
{
 80013f0:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f2:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f4:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <_sbrk+0x38>)
{
 80013f6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80013f8:	6810      	ldr	r0, [r2, #0]
 80013fa:	2800      	cmp	r0, #0
 80013fc:	d101      	bne.n	8001402 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80013fe:	480a      	ldr	r0, [pc, #40]	; (8001428 <_sbrk+0x3c>)
 8001400:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001402:	6810      	ldr	r0, [r2, #0]
 8001404:	18c3      	adds	r3, r0, r3
 8001406:	428b      	cmp	r3, r1
 8001408:	d906      	bls.n	8001418 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800140a:	f001 fa53 	bl	80028b4 <__errno>
 800140e:	230c      	movs	r3, #12
 8001410:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001412:	2001      	movs	r0, #1
 8001414:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001416:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001418:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800141a:	e7fc      	b.n	8001416 <_sbrk+0x2a>
 800141c:	00000400 	.word	0x00000400
 8001420:	20002000 	.word	0x20002000
 8001424:	200002ac 	.word	0x200002ac
 8001428:	200002c8 	.word	0x200002c8

0800142c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800142c:	4770      	bx	lr
	...

08001430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001432:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <LoopForever+0x6>)
  ldr r1, =_edata
 8001436:	490e      	ldr	r1, [pc, #56]	; (8001470 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001438:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <LoopForever+0xe>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <LoopForever+0x12>)
  ldr r4, =_ebss
 800144c:	4c0b      	ldr	r4, [pc, #44]	; (800147c <LoopForever+0x16>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800145a:	f7ff ffe7 	bl	800142c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800145e:	f001 fa2f 	bl	80028c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001462:	f7fe ff83 	bl	800036c <main>

08001466 <LoopForever>:

LoopForever:
    b LoopForever
 8001466:	e7fe      	b.n	8001466 <LoopForever>
  ldr   r0, =_estack
 8001468:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001474:	08003d94 	.word	0x08003d94
  ldr r2, =_sbss
 8001478:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800147c:	200002c4 	.word	0x200002c4

08001480 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC1_COMP_IRQHandler>
	...

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b570      	push	{r4, r5, r6, lr}
 8001486:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001488:	20fa      	movs	r0, #250	; 0xfa
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <HAL_InitTick+0x3c>)
 800148c:	0080      	lsls	r0, r0, #2
 800148e:	7819      	ldrb	r1, [r3, #0]
 8001490:	f7fe fe56 	bl	8000140 <__udivsi3>
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_InitTick+0x40>)
 8001496:	0001      	movs	r1, r0
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	f7fe fe51 	bl	8000140 <__udivsi3>
 800149e:	f000 f88d 	bl	80015bc <HAL_SYSTICK_Config>
 80014a2:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80014a4:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a6:	2c00      	cmp	r4, #0
 80014a8:	d109      	bne.n	80014be <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014aa:	2d03      	cmp	r5, #3
 80014ac:	d807      	bhi.n	80014be <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ae:	3802      	subs	r0, #2
 80014b0:	0022      	movs	r2, r4
 80014b2:	0029      	movs	r1, r5
 80014b4:	f000 f83e 	bl	8001534 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b8:	0020      	movs	r0, r4
 80014ba:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_InitTick+0x44>)
 80014bc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80014be:	bd70      	pop	{r4, r5, r6, pc}
 80014c0:	20000018 	.word	0x20000018
 80014c4:	20000014 	.word	0x20000014
 80014c8:	2000001c 	.word	0x2000001c

080014cc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	2310      	movs	r3, #16
 80014ce:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <HAL_Init+0x1c>)
{
 80014d0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d2:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d4:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d6:	430b      	orrs	r3, r1
 80014d8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80014da:	f7ff ffd3 	bl	8001484 <HAL_InitTick>
  HAL_MspInit();
 80014de:	f7ff feef 	bl	80012c0 <HAL_MspInit>
}
 80014e2:	2000      	movs	r0, #0
 80014e4:	bd10      	pop	{r4, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	40022000 	.word	0x40022000

080014ec <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014ec:	4a03      	ldr	r2, [pc, #12]	; (80014fc <HAL_IncTick+0x10>)
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <HAL_IncTick+0x14>)
 80014f0:	6811      	ldr	r1, [r2, #0]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	185b      	adds	r3, r3, r1
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	4770      	bx	lr
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	200002b0 	.word	0x200002b0
 8001500:	20000018 	.word	0x20000018

08001504 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001504:	4b01      	ldr	r3, [pc, #4]	; (800150c <HAL_GetTick+0x8>)
 8001506:	6818      	ldr	r0, [r3, #0]
}
 8001508:	4770      	bx	lr
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	200002b0 	.word	0x200002b0

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b570      	push	{r4, r5, r6, lr}
 8001512:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff fff6 	bl	8001504 <HAL_GetTick>
 8001518:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151a:	1c63      	adds	r3, r4, #1
 800151c:	d002      	beq.n	8001524 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <HAL_Delay+0x20>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001524:	f7ff ffee 	bl	8001504 <HAL_GetTick>
 8001528:	1b40      	subs	r0, r0, r5
 800152a:	42a0      	cmp	r0, r4
 800152c:	d3fa      	bcc.n	8001524 <HAL_Delay+0x14>
  {
  }
}
 800152e:	bd70      	pop	{r4, r5, r6, pc}
 8001530:	20000018 	.word	0x20000018

08001534 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001534:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001536:	25ff      	movs	r5, #255	; 0xff
 8001538:	2403      	movs	r4, #3
 800153a:	002a      	movs	r2, r5
 800153c:	4004      	ands	r4, r0
 800153e:	00e4      	lsls	r4, r4, #3
 8001540:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001542:	0189      	lsls	r1, r1, #6
 8001544:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001546:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001548:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800154a:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800154c:	2800      	cmp	r0, #0
 800154e:	db0a      	blt.n	8001566 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001550:	24c0      	movs	r4, #192	; 0xc0
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_NVIC_SetPriority+0x4c>)
 8001554:	0880      	lsrs	r0, r0, #2
 8001556:	0080      	lsls	r0, r0, #2
 8001558:	18c0      	adds	r0, r0, r3
 800155a:	00a4      	lsls	r4, r4, #2
 800155c:	5903      	ldr	r3, [r0, r4]
 800155e:	401a      	ands	r2, r3
 8001560:	4311      	orrs	r1, r2
 8001562:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001564:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001566:	200f      	movs	r0, #15
 8001568:	4003      	ands	r3, r0
 800156a:	3b08      	subs	r3, #8
 800156c:	4805      	ldr	r0, [pc, #20]	; (8001584 <HAL_NVIC_SetPriority+0x50>)
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	181b      	adds	r3, r3, r0
 8001574:	69d8      	ldr	r0, [r3, #28]
 8001576:	4002      	ands	r2, r0
 8001578:	4311      	orrs	r1, r2
 800157a:	61d9      	str	r1, [r3, #28]
 800157c:	e7f2      	b.n	8001564 <HAL_NVIC_SetPriority+0x30>
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001588:	2800      	cmp	r0, #0
 800158a:	db05      	blt.n	8001598 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158c:	231f      	movs	r3, #31
 800158e:	4018      	ands	r0, r3
 8001590:	3b1e      	subs	r3, #30
 8001592:	4083      	lsls	r3, r0
 8001594:	4a01      	ldr	r2, [pc, #4]	; (800159c <HAL_NVIC_EnableIRQ+0x14>)
 8001596:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001598:	4770      	bx	lr
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	e000e100 	.word	0xe000e100

080015a0 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015a0:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_NVIC_SystemReset+0x14>)
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_NVIC_SystemReset+0x18>)
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80015ae:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80015b0:	e7fd      	b.n	80015ae <HAL_NVIC_SystemReset+0xe>
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	e000ed00 	.word	0xe000ed00
 80015b8:	05fa0004 	.word	0x05fa0004

080015bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	1e43      	subs	r3, r0, #1
 80015c0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d20d      	bcs.n	80015e4 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ce:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d0:	6a03      	ldr	r3, [r0, #32]
 80015d2:	0609      	lsls	r1, r1, #24
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	0a1b      	lsrs	r3, r3, #8
 80015d8:	430b      	orrs	r3, r1
 80015da:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015de:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e0:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015e4:	4770      	bx	lr
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	e000e010 	.word	0xe000e010
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015f0:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f2:	1c85      	adds	r5, r0, #2
 80015f4:	7feb      	ldrb	r3, [r5, #31]
 80015f6:	1c44      	adds	r4, r0, #1
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d005      	beq.n	8001608 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fc:	2304      	movs	r3, #4
 80015fe:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001600:	2300      	movs	r3, #0
    
    return HAL_ERROR;
 8001602:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001604:	77e3      	strb	r3, [r4, #31]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
  
  return HAL_OK;
}
 8001606:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001608:	210e      	movs	r1, #14
 800160a:	6803      	ldr	r3, [r0, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	438a      	bics	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001612:	2201      	movs	r2, #1
 8001614:	6819      	ldr	r1, [r3, #0]
 8001616:	4391      	bics	r1, r2
 8001618:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800161a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800161c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800161e:	0010      	movs	r0, r2
 8001620:	4088      	lsls	r0, r1
 8001622:	6058      	str	r0, [r3, #4]
  __HAL_UNLOCK(hdma);
 8001624:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8001626:	77ea      	strb	r2, [r5, #31]
  __HAL_UNLOCK(hdma);
 8001628:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 800162a:	e7ec      	b.n	8001606 <HAL_DMA_Abort+0x16>

0800162c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800162c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800162e:	1c84      	adds	r4, r0, #2
 8001630:	7fe3      	ldrb	r3, [r4, #31]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d004      	beq.n	8001640 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001636:	2304      	movs	r3, #4
 8001638:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800163a:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800163c:	0018      	movs	r0, r3
 800163e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001640:	210e      	movs	r1, #14
 8001642:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001644:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	438a      	bics	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800164c:	2201      	movs	r2, #1
 800164e:	6819      	ldr	r1, [r3, #0]
 8001650:	4391      	bics	r1, r2
 8001652:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001654:	0011      	movs	r1, r2
 8001656:	40a9      	lsls	r1, r5
 8001658:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800165a:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800165c:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 800165e:	2400      	movs	r4, #0
 8001660:	1883      	adds	r3, r0, r2
 8001662:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8001664:	6b42      	ldr	r2, [r0, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8001666:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8001668:	42a2      	cmp	r2, r4
 800166a:	d0e7      	beq.n	800163c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 800166c:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800166e:	0023      	movs	r3, r4
 8001670:	e7e4      	b.n	800163c <HAL_DMA_Abort_IT+0x10>
	...

08001674 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001674:	2300      	movs	r3, #0
{
 8001676:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001678:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	680a      	ldr	r2, [r1, #0]
 800167c:	0014      	movs	r4, r2
 800167e:	40dc      	lsrs	r4, r3
 8001680:	d101      	bne.n	8001686 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8001682:	b007      	add	sp, #28
 8001684:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001686:	2501      	movs	r5, #1
 8001688:	0014      	movs	r4, r2
 800168a:	409d      	lsls	r5, r3
 800168c:	402c      	ands	r4, r5
 800168e:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8001690:	422a      	tst	r2, r5
 8001692:	d100      	bne.n	8001696 <HAL_GPIO_Init+0x22>
 8001694:	e095      	b.n	80017c2 <HAL_GPIO_Init+0x14e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001696:	684a      	ldr	r2, [r1, #4]
 8001698:	005e      	lsls	r6, r3, #1
 800169a:	4694      	mov	ip, r2
 800169c:	2203      	movs	r2, #3
 800169e:	4664      	mov	r4, ip
 80016a0:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016a2:	2403      	movs	r4, #3
 80016a4:	40b4      	lsls	r4, r6
 80016a6:	43e4      	mvns	r4, r4
 80016a8:	9402      	str	r4, [sp, #8]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016aa:	1e54      	subs	r4, r2, #1
 80016ac:	2c01      	cmp	r4, #1
 80016ae:	d82a      	bhi.n	8001706 <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 80016b0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016b2:	9c02      	ldr	r4, [sp, #8]
 80016b4:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b6:	68cc      	ldr	r4, [r1, #12]
 80016b8:	40b4      	lsls	r4, r6
 80016ba:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 80016bc:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80016be:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c0:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c2:	43ac      	bics	r4, r5
 80016c4:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c6:	4664      	mov	r4, ip
 80016c8:	0924      	lsrs	r4, r4, #4
 80016ca:	403c      	ands	r4, r7
 80016cc:	409c      	lsls	r4, r3
 80016ce:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80016d0:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80016d2:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016d4:	9c02      	ldr	r4, [sp, #8]
 80016d6:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016d8:	688c      	ldr	r4, [r1, #8]
 80016da:	40b4      	lsls	r4, r6
 80016dc:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80016de:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e0:	2a02      	cmp	r2, #2
 80016e2:	d112      	bne.n	800170a <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 80016e4:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e6:	2507      	movs	r5, #7
 80016e8:	00a4      	lsls	r4, r4, #2
 80016ea:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 80016ec:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ee:	9403      	str	r4, [sp, #12]
 80016f0:	240f      	movs	r4, #15
 80016f2:	401d      	ands	r5, r3
 80016f4:	00ad      	lsls	r5, r5, #2
 80016f6:	40ac      	lsls	r4, r5
 80016f8:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016fa:	690c      	ldr	r4, [r1, #16]
 80016fc:	40ac      	lsls	r4, r5
 80016fe:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8001700:	9c03      	ldr	r4, [sp, #12]
 8001702:	6227      	str	r7, [r4, #32]
 8001704:	e001      	b.n	800170a <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001706:	2a03      	cmp	r2, #3
 8001708:	d1e3      	bne.n	80016d2 <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 800170a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800170c:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800170e:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001710:	4025      	ands	r5, r4
 8001712:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001714:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8001716:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001718:	24c0      	movs	r4, #192	; 0xc0
 800171a:	4662      	mov	r2, ip
 800171c:	02a4      	lsls	r4, r4, #10
 800171e:	4222      	tst	r2, r4
 8001720:	d04f      	beq.n	80017c2 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	2501      	movs	r5, #1
 8001724:	4a28      	ldr	r2, [pc, #160]	; (80017c8 <HAL_GPIO_Init+0x154>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001726:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001728:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800172a:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172c:	432c      	orrs	r4, r5
 800172e:	6194      	str	r4, [r2, #24]
 8001730:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001732:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001734:	402a      	ands	r2, r5
 8001736:	9205      	str	r2, [sp, #20]
 8001738:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 800173a:	4a24      	ldr	r2, [pc, #144]	; (80017cc <HAL_GPIO_Init+0x158>)
 800173c:	00a4      	lsls	r4, r4, #2
 800173e:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001740:	220f      	movs	r2, #15
 8001742:	3502      	adds	r5, #2
 8001744:	401d      	ands	r5, r3
 8001746:	00ad      	lsls	r5, r5, #2
 8001748:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 800174a:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800174c:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800174e:	2200      	movs	r2, #0
 8001750:	42b8      	cmp	r0, r7
 8001752:	d00c      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 8001754:	4f1e      	ldr	r7, [pc, #120]	; (80017d0 <HAL_GPIO_Init+0x15c>)
 8001756:	3201      	adds	r2, #1
 8001758:	42b8      	cmp	r0, r7
 800175a:	d008      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 800175c:	4f1d      	ldr	r7, [pc, #116]	; (80017d4 <HAL_GPIO_Init+0x160>)
 800175e:	3201      	adds	r2, #1
 8001760:	42b8      	cmp	r0, r7
 8001762:	d004      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 8001764:	4f1c      	ldr	r7, [pc, #112]	; (80017d8 <HAL_GPIO_Init+0x164>)
 8001766:	3201      	adds	r2, #1
 8001768:	42b8      	cmp	r0, r7
 800176a:	d000      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 800176c:	3202      	adds	r2, #2
 800176e:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001770:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001772:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001774:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8001776:	4a19      	ldr	r2, [pc, #100]	; (80017dc <HAL_GPIO_Init+0x168>)
        temp &= ~(iocurrent);
 8001778:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 800177a:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800177c:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 800177e:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001780:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001782:	03ff      	lsls	r7, r7, #15
 8001784:	d401      	bmi.n	800178a <HAL_GPIO_Init+0x116>
        temp &= ~(iocurrent);
 8001786:	0035      	movs	r5, r6
 8001788:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800178a:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 800178c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800178e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001790:	9d01      	ldr	r5, [sp, #4]
 8001792:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001794:	03bf      	lsls	r7, r7, #14
 8001796:	d401      	bmi.n	800179c <HAL_GPIO_Init+0x128>
        temp &= ~(iocurrent);
 8001798:	0035      	movs	r5, r6
 800179a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800179c:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800179e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80017a0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80017a2:	9d01      	ldr	r5, [sp, #4]
 80017a4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017a6:	02ff      	lsls	r7, r7, #11
 80017a8:	d401      	bmi.n	80017ae <HAL_GPIO_Init+0x13a>
        temp &= ~(iocurrent);
 80017aa:	0035      	movs	r5, r6
 80017ac:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ae:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80017b0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80017b2:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80017b4:	9e01      	ldr	r6, [sp, #4]
 80017b6:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017b8:	02bf      	lsls	r7, r7, #10
 80017ba:	d401      	bmi.n	80017c0 <HAL_GPIO_Init+0x14c>
        temp &= ~(iocurrent);
 80017bc:	4025      	ands	r5, r4
 80017be:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80017c0:	60d6      	str	r6, [r2, #12]
    position++;
 80017c2:	3301      	adds	r3, #1
 80017c4:	e759      	b.n	800167a <HAL_GPIO_Init+0x6>
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010000 	.word	0x40010000
 80017d0:	48000400 	.word	0x48000400
 80017d4:	48000800 	.word	0x48000800
 80017d8:	48000c00 	.word	0x48000c00
 80017dc:	40010400 	.word	0x40010400

080017e0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017e0:	6900      	ldr	r0, [r0, #16]
 80017e2:	4008      	ands	r0, r1
 80017e4:	1e43      	subs	r3, r0, #1
 80017e6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80017e8:	b2c0      	uxtb	r0, r0
  }
 80017ea:	4770      	bx	lr

080017ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ec:	2a00      	cmp	r2, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017f4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80017f6:	e7fc      	b.n	80017f2 <HAL_GPIO_WritePin+0x6>

080017f8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017f8:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017fa:	0013      	movs	r3, r2
 80017fc:	400b      	ands	r3, r1
 80017fe:	041b      	lsls	r3, r3, #16
 8001800:	4391      	bics	r1, r2
 8001802:	4319      	orrs	r1, r3
 8001804:	6181      	str	r1, [r0, #24]
}
 8001806:	4770      	bx	lr

08001808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180a:	0004      	movs	r4, r0
 800180c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800180e:	2800      	cmp	r0, #0
 8001810:	d045      	beq.n	800189e <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	6803      	ldr	r3, [r0, #0]
 8001814:	07db      	lsls	r3, r3, #31
 8001816:	d42f      	bmi.n	8001878 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	079b      	lsls	r3, r3, #30
 800181c:	d500      	bpl.n	8001820 <HAL_RCC_OscConfig+0x18>
 800181e:	e081      	b.n	8001924 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	071b      	lsls	r3, r3, #28
 8001824:	d500      	bpl.n	8001828 <HAL_RCC_OscConfig+0x20>
 8001826:	e0bc      	b.n	80019a2 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	075b      	lsls	r3, r3, #29
 800182c:	d500      	bpl.n	8001830 <HAL_RCC_OscConfig+0x28>
 800182e:	e0df      	b.n	80019f0 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	06db      	lsls	r3, r3, #27
 8001834:	d51a      	bpl.n	800186c <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001836:	6962      	ldr	r2, [r4, #20]
 8001838:	2304      	movs	r3, #4
 800183a:	4db5      	ldr	r5, [pc, #724]	; (8001b10 <HAL_RCC_OscConfig+0x308>)
 800183c:	2a01      	cmp	r2, #1
 800183e:	d000      	beq.n	8001842 <HAL_RCC_OscConfig+0x3a>
 8001840:	e14a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001842:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001844:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001846:	430b      	orrs	r3, r1
 8001848:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800184a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800184c:	431a      	orrs	r2, r3
 800184e:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001850:	f7ff fe58 	bl	8001504 <HAL_GetTick>
 8001854:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001856:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001858:	423b      	tst	r3, r7
 800185a:	d100      	bne.n	800185e <HAL_RCC_OscConfig+0x56>
 800185c:	e135      	b.n	8001aca <HAL_RCC_OscConfig+0x2c2>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800185e:	21f8      	movs	r1, #248	; 0xf8
 8001860:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001862:	69a3      	ldr	r3, [r4, #24]
 8001864:	438a      	bics	r2, r1
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4313      	orrs	r3, r2
 800186a:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186c:	6a23      	ldr	r3, [r4, #32]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d000      	beq.n	8001874 <HAL_RCC_OscConfig+0x6c>
 8001872:	e159      	b.n	8001b28 <HAL_RCC_OscConfig+0x320>
        }
      }
    }
  }

  return HAL_OK;
 8001874:	2000      	movs	r0, #0
 8001876:	e02a      	b.n	80018ce <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001878:	210c      	movs	r1, #12
 800187a:	4da5      	ldr	r5, [pc, #660]	; (8001b10 <HAL_RCC_OscConfig+0x308>)
 800187c:	686a      	ldr	r2, [r5, #4]
 800187e:	400a      	ands	r2, r1
 8001880:	2a04      	cmp	r2, #4
 8001882:	d006      	beq.n	8001892 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001884:	686b      	ldr	r3, [r5, #4]
 8001886:	400b      	ands	r3, r1
 8001888:	2b08      	cmp	r3, #8
 800188a:	d10a      	bne.n	80018a2 <HAL_RCC_OscConfig+0x9a>
 800188c:	686b      	ldr	r3, [r5, #4]
 800188e:	03db      	lsls	r3, r3, #15
 8001890:	d507      	bpl.n	80018a2 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001892:	682b      	ldr	r3, [r5, #0]
 8001894:	039b      	lsls	r3, r3, #14
 8001896:	d5bf      	bpl.n	8001818 <HAL_RCC_OscConfig+0x10>
 8001898:	6863      	ldr	r3, [r4, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1bc      	bne.n	8001818 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800189e:	2001      	movs	r0, #1
 80018a0:	e015      	b.n	80018ce <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a2:	6863      	ldr	r3, [r4, #4]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d114      	bne.n	80018d2 <HAL_RCC_OscConfig+0xca>
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	682a      	ldr	r2, [r5, #0]
 80018ac:	025b      	lsls	r3, r3, #9
 80018ae:	4313      	orrs	r3, r2
 80018b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018b2:	f7ff fe27 	bl	8001504 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80018b8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	02bf      	lsls	r7, r7, #10
 80018bc:	682b      	ldr	r3, [r5, #0]
 80018be:	423b      	tst	r3, r7
 80018c0:	d1aa      	bne.n	8001818 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c2:	f7ff fe1f 	bl	8001504 <HAL_GetTick>
 80018c6:	1b80      	subs	r0, r0, r6
 80018c8:	2864      	cmp	r0, #100	; 0x64
 80018ca:	d9f7      	bls.n	80018bc <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 80018cc:	2003      	movs	r0, #3
}
 80018ce:	b005      	add	sp, #20
 80018d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d116      	bne.n	8001904 <HAL_RCC_OscConfig+0xfc>
 80018d6:	682b      	ldr	r3, [r5, #0]
 80018d8:	4a8e      	ldr	r2, [pc, #568]	; (8001b14 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018dc:	4013      	ands	r3, r2
 80018de:	602b      	str	r3, [r5, #0]
 80018e0:	682b      	ldr	r3, [r5, #0]
 80018e2:	4a8d      	ldr	r2, [pc, #564]	; (8001b18 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e4:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e6:	4013      	ands	r3, r2
 80018e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018ea:	f7ff fe0b 	bl	8001504 <HAL_GetTick>
 80018ee:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f0:	682b      	ldr	r3, [r5, #0]
 80018f2:	423b      	tst	r3, r7
 80018f4:	d100      	bne.n	80018f8 <HAL_RCC_OscConfig+0xf0>
 80018f6:	e78f      	b.n	8001818 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fe04 	bl	8001504 <HAL_GetTick>
 80018fc:	1b80      	subs	r0, r0, r6
 80018fe:	2864      	cmp	r0, #100	; 0x64
 8001900:	d9f6      	bls.n	80018f0 <HAL_RCC_OscConfig+0xe8>
 8001902:	e7e3      	b.n	80018cc <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001904:	2b05      	cmp	r3, #5
 8001906:	d105      	bne.n	8001914 <HAL_RCC_OscConfig+0x10c>
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	682a      	ldr	r2, [r5, #0]
 800190c:	02db      	lsls	r3, r3, #11
 800190e:	4313      	orrs	r3, r2
 8001910:	602b      	str	r3, [r5, #0]
 8001912:	e7c9      	b.n	80018a8 <HAL_RCC_OscConfig+0xa0>
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	4a7f      	ldr	r2, [pc, #508]	; (8001b14 <HAL_RCC_OscConfig+0x30c>)
 8001918:	4013      	ands	r3, r2
 800191a:	602b      	str	r3, [r5, #0]
 800191c:	682b      	ldr	r3, [r5, #0]
 800191e:	4a7e      	ldr	r2, [pc, #504]	; (8001b18 <HAL_RCC_OscConfig+0x310>)
 8001920:	4013      	ands	r3, r2
 8001922:	e7c5      	b.n	80018b0 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001924:	220c      	movs	r2, #12
 8001926:	4d7a      	ldr	r5, [pc, #488]	; (8001b10 <HAL_RCC_OscConfig+0x308>)
 8001928:	686b      	ldr	r3, [r5, #4]
 800192a:	4213      	tst	r3, r2
 800192c:	d006      	beq.n	800193c <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800192e:	686b      	ldr	r3, [r5, #4]
 8001930:	4013      	ands	r3, r2
 8001932:	2b08      	cmp	r3, #8
 8001934:	d110      	bne.n	8001958 <HAL_RCC_OscConfig+0x150>
 8001936:	686b      	ldr	r3, [r5, #4]
 8001938:	03db      	lsls	r3, r3, #15
 800193a:	d40d      	bmi.n	8001958 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193c:	682b      	ldr	r3, [r5, #0]
 800193e:	079b      	lsls	r3, r3, #30
 8001940:	d502      	bpl.n	8001948 <HAL_RCC_OscConfig+0x140>
 8001942:	68e3      	ldr	r3, [r4, #12]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d1aa      	bne.n	800189e <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001948:	21f8      	movs	r1, #248	; 0xf8
 800194a:	682a      	ldr	r2, [r5, #0]
 800194c:	6923      	ldr	r3, [r4, #16]
 800194e:	438a      	bics	r2, r1
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4313      	orrs	r3, r2
 8001954:	602b      	str	r3, [r5, #0]
 8001956:	e763      	b.n	8001820 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001958:	68e2      	ldr	r2, [r4, #12]
 800195a:	2301      	movs	r3, #1
 800195c:	2a00      	cmp	r2, #0
 800195e:	d00f      	beq.n	8001980 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8001960:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001962:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001964:	4313      	orrs	r3, r2
 8001966:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001968:	f7ff fdcc 	bl	8001504 <HAL_GetTick>
 800196c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196e:	682b      	ldr	r3, [r5, #0]
 8001970:	423b      	tst	r3, r7
 8001972:	d1e9      	bne.n	8001948 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001974:	f7ff fdc6 	bl	8001504 <HAL_GetTick>
 8001978:	1b80      	subs	r0, r0, r6
 800197a:	2802      	cmp	r0, #2
 800197c:	d9f7      	bls.n	800196e <HAL_RCC_OscConfig+0x166>
 800197e:	e7a5      	b.n	80018cc <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8001980:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001984:	439a      	bics	r2, r3
 8001986:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001988:	f7ff fdbc 	bl	8001504 <HAL_GetTick>
 800198c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198e:	682b      	ldr	r3, [r5, #0]
 8001990:	423b      	tst	r3, r7
 8001992:	d100      	bne.n	8001996 <HAL_RCC_OscConfig+0x18e>
 8001994:	e744      	b.n	8001820 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001996:	f7ff fdb5 	bl	8001504 <HAL_GetTick>
 800199a:	1b80      	subs	r0, r0, r6
 800199c:	2802      	cmp	r0, #2
 800199e:	d9f6      	bls.n	800198e <HAL_RCC_OscConfig+0x186>
 80019a0:	e794      	b.n	80018cc <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a2:	69e2      	ldr	r2, [r4, #28]
 80019a4:	2301      	movs	r3, #1
 80019a6:	4d5a      	ldr	r5, [pc, #360]	; (8001b10 <HAL_RCC_OscConfig+0x308>)
 80019a8:	2a00      	cmp	r2, #0
 80019aa:	d010      	beq.n	80019ce <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 80019ac:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ae:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80019b0:	4313      	orrs	r3, r2
 80019b2:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80019b4:	f7ff fda6 	bl	8001504 <HAL_GetTick>
 80019b8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80019bc:	423b      	tst	r3, r7
 80019be:	d000      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1ba>
 80019c0:	e732      	b.n	8001828 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c2:	f7ff fd9f 	bl	8001504 <HAL_GetTick>
 80019c6:	1b80      	subs	r0, r0, r6
 80019c8:	2802      	cmp	r0, #2
 80019ca:	d9f6      	bls.n	80019ba <HAL_RCC_OscConfig+0x1b2>
 80019cc:	e77e      	b.n	80018cc <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 80019ce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80019d2:	439a      	bics	r2, r3
 80019d4:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80019d6:	f7ff fd95 	bl	8001504 <HAL_GetTick>
 80019da:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80019de:	423b      	tst	r3, r7
 80019e0:	d100      	bne.n	80019e4 <HAL_RCC_OscConfig+0x1dc>
 80019e2:	e721      	b.n	8001828 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff fd8e 	bl	8001504 <HAL_GetTick>
 80019e8:	1b80      	subs	r0, r0, r6
 80019ea:	2802      	cmp	r0, #2
 80019ec:	d9f6      	bls.n	80019dc <HAL_RCC_OscConfig+0x1d4>
 80019ee:	e76d      	b.n	80018cc <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80019f2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f4:	4d46      	ldr	r5, [pc, #280]	; (8001b10 <HAL_RCC_OscConfig+0x308>)
 80019f6:	0552      	lsls	r2, r2, #21
 80019f8:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80019fa:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fc:	4213      	tst	r3, r2
 80019fe:	d108      	bne.n	8001a12 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a00:	69eb      	ldr	r3, [r5, #28]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61eb      	str	r3, [r5, #28]
 8001a06:	69eb      	ldr	r3, [r5, #28]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	9303      	str	r3, [sp, #12]
 8001a0c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	2780      	movs	r7, #128	; 0x80
 8001a14:	4e41      	ldr	r6, [pc, #260]	; (8001b1c <HAL_RCC_OscConfig+0x314>)
 8001a16:	007f      	lsls	r7, r7, #1
 8001a18:	6833      	ldr	r3, [r6, #0]
 8001a1a:	423b      	tst	r3, r7
 8001a1c:	d006      	beq.n	8001a2c <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1e:	68a3      	ldr	r3, [r4, #8]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d113      	bne.n	8001a4c <HAL_RCC_OscConfig+0x244>
 8001a24:	6a2a      	ldr	r2, [r5, #32]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	622b      	str	r3, [r5, #32]
 8001a2a:	e030      	b.n	8001a8e <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2c:	6833      	ldr	r3, [r6, #0]
 8001a2e:	433b      	orrs	r3, r7
 8001a30:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a32:	f7ff fd67 	bl	8001504 <HAL_GetTick>
 8001a36:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	6833      	ldr	r3, [r6, #0]
 8001a3a:	423b      	tst	r3, r7
 8001a3c:	d1ef      	bne.n	8001a1e <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3e:	f7ff fd61 	bl	8001504 <HAL_GetTick>
 8001a42:	9b01      	ldr	r3, [sp, #4]
 8001a44:	1ac0      	subs	r0, r0, r3
 8001a46:	2864      	cmp	r0, #100	; 0x64
 8001a48:	d9f6      	bls.n	8001a38 <HAL_RCC_OscConfig+0x230>
 8001a4a:	e73f      	b.n	80018cc <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d114      	bne.n	8001a7c <HAL_RCC_OscConfig+0x274>
 8001a52:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a54:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a56:	4393      	bics	r3, r2
 8001a58:	622b      	str	r3, [r5, #32]
 8001a5a:	6a2b      	ldr	r3, [r5, #32]
 8001a5c:	3203      	adds	r2, #3
 8001a5e:	4393      	bics	r3, r2
 8001a60:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001a62:	f7ff fd4f 	bl	8001504 <HAL_GetTick>
 8001a66:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	6a2b      	ldr	r3, [r5, #32]
 8001a6a:	423b      	tst	r3, r7
 8001a6c:	d016      	beq.n	8001a9c <HAL_RCC_OscConfig+0x294>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f7ff fd49 	bl	8001504 <HAL_GetTick>
 8001a72:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_RCC_OscConfig+0x318>)
 8001a74:	1b80      	subs	r0, r0, r6
 8001a76:	4298      	cmp	r0, r3
 8001a78:	d9f6      	bls.n	8001a68 <HAL_RCC_OscConfig+0x260>
 8001a7a:	e727      	b.n	80018cc <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d116      	bne.n	8001aae <HAL_RCC_OscConfig+0x2a6>
 8001a80:	6a29      	ldr	r1, [r5, #32]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	430b      	orrs	r3, r1
 8001a86:	622b      	str	r3, [r5, #32]
 8001a88:	6a2b      	ldr	r3, [r5, #32]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fd39 	bl	8001504 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a92:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001a94:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a96:	6a2b      	ldr	r3, [r5, #32]
 8001a98:	423b      	tst	r3, r7
 8001a9a:	d00f      	beq.n	8001abc <HAL_RCC_OscConfig+0x2b4>
    if(pwrclkchanged == SET)
 8001a9c:	9b00      	ldr	r3, [sp, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d000      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x29c>
 8001aa2:	e6c5      	b.n	8001830 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa4:	69eb      	ldr	r3, [r5, #28]
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <HAL_RCC_OscConfig+0x31c>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61eb      	str	r3, [r5, #28]
 8001aac:	e6c0      	b.n	8001830 <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aae:	6a2b      	ldr	r3, [r5, #32]
 8001ab0:	4393      	bics	r3, r2
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	622b      	str	r3, [r5, #32]
 8001ab6:	6a2b      	ldr	r3, [r5, #32]
 8001ab8:	4393      	bics	r3, r2
 8001aba:	e7b5      	b.n	8001a28 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7ff fd22 	bl	8001504 <HAL_GetTick>
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <HAL_RCC_OscConfig+0x318>)
 8001ac2:	1b80      	subs	r0, r0, r6
 8001ac4:	4298      	cmp	r0, r3
 8001ac6:	d9e6      	bls.n	8001a96 <HAL_RCC_OscConfig+0x28e>
 8001ac8:	e700      	b.n	80018cc <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001aca:	f7ff fd1b 	bl	8001504 <HAL_GetTick>
 8001ace:	1b80      	subs	r0, r0, r6
 8001ad0:	2802      	cmp	r0, #2
 8001ad2:	d800      	bhi.n	8001ad6 <HAL_RCC_OscConfig+0x2ce>
 8001ad4:	e6bf      	b.n	8001856 <HAL_RCC_OscConfig+0x4e>
 8001ad6:	e6f9      	b.n	80018cc <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ad8:	3205      	adds	r2, #5
 8001ada:	d103      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001adc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001ade:	439a      	bics	r2, r3
 8001ae0:	636a      	str	r2, [r5, #52]	; 0x34
 8001ae2:	e6bc      	b.n	800185e <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ae4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ae6:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ae8:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001aea:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001aec:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001aee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001af0:	4393      	bics	r3, r2
 8001af2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001af4:	f7ff fd06 	bl	8001504 <HAL_GetTick>
 8001af8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001afa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001afc:	423b      	tst	r3, r7
 8001afe:	d100      	bne.n	8001b02 <HAL_RCC_OscConfig+0x2fa>
 8001b00:	e6b4      	b.n	800186c <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b02:	f7ff fcff 	bl	8001504 <HAL_GetTick>
 8001b06:	1b80      	subs	r0, r0, r6
 8001b08:	2802      	cmp	r0, #2
 8001b0a:	d9f6      	bls.n	8001afa <HAL_RCC_OscConfig+0x2f2>
 8001b0c:	e6de      	b.n	80018cc <HAL_RCC_OscConfig+0xc4>
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	40021000 	.word	0x40021000
 8001b14:	fffeffff 	.word	0xfffeffff
 8001b18:	fffbffff 	.word	0xfffbffff
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	00001388 	.word	0x00001388
 8001b24:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b28:	210c      	movs	r1, #12
 8001b2a:	4d34      	ldr	r5, [pc, #208]	; (8001bfc <HAL_RCC_OscConfig+0x3f4>)
 8001b2c:	686a      	ldr	r2, [r5, #4]
 8001b2e:	400a      	ands	r2, r1
 8001b30:	2a08      	cmp	r2, #8
 8001b32:	d047      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x3bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b34:	4a32      	ldr	r2, [pc, #200]	; (8001c00 <HAL_RCC_OscConfig+0x3f8>)
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d132      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_DISABLE();
 8001b3a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001b3e:	4013      	ands	r3, r2
 8001b40:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b42:	f7ff fcdf 	bl	8001504 <HAL_GetTick>
 8001b46:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b48:	04bf      	lsls	r7, r7, #18
 8001b4a:	682b      	ldr	r3, [r5, #0]
 8001b4c:	423b      	tst	r3, r7
 8001b4e:	d121      	bne.n	8001b94 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b50:	220f      	movs	r2, #15
 8001b52:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b54:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b56:	4393      	bics	r3, r2
 8001b58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5a:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001b60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b64:	686a      	ldr	r2, [r5, #4]
 8001b66:	430b      	orrs	r3, r1
 8001b68:	4926      	ldr	r1, [pc, #152]	; (8001c04 <HAL_RCC_OscConfig+0x3fc>)
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	682a      	ldr	r2, [r5, #0]
 8001b74:	045b      	lsls	r3, r3, #17
 8001b76:	4313      	orrs	r3, r2
 8001b78:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fcc3 	bl	8001504 <HAL_GetTick>
 8001b7e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b80:	682b      	ldr	r3, [r5, #0]
 8001b82:	4233      	tst	r3, r6
 8001b84:	d000      	beq.n	8001b88 <HAL_RCC_OscConfig+0x380>
 8001b86:	e675      	b.n	8001874 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff fcbc 	bl	8001504 <HAL_GetTick>
 8001b8c:	1b00      	subs	r0, r0, r4
 8001b8e:	2802      	cmp	r0, #2
 8001b90:	d9f6      	bls.n	8001b80 <HAL_RCC_OscConfig+0x378>
 8001b92:	e69b      	b.n	80018cc <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b94:	f7ff fcb6 	bl	8001504 <HAL_GetTick>
 8001b98:	1b80      	subs	r0, r0, r6
 8001b9a:	2802      	cmp	r0, #2
 8001b9c:	d9d5      	bls.n	8001b4a <HAL_RCC_OscConfig+0x342>
 8001b9e:	e695      	b.n	80018cc <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8001ba0:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fcac 	bl	8001504 <HAL_GetTick>
 8001bac:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bae:	04b6      	lsls	r6, r6, #18
 8001bb0:	682b      	ldr	r3, [r5, #0]
 8001bb2:	4233      	tst	r3, r6
 8001bb4:	d100      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x3b0>
 8001bb6:	e65d      	b.n	8001874 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff fca4 	bl	8001504 <HAL_GetTick>
 8001bbc:	1b00      	subs	r0, r0, r4
 8001bbe:	2802      	cmp	r0, #2
 8001bc0:	d9f6      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3a8>
 8001bc2:	e683      	b.n	80018cc <HAL_RCC_OscConfig+0xc4>
        return HAL_ERROR;
 8001bc4:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d100      	bne.n	8001bcc <HAL_RCC_OscConfig+0x3c4>
 8001bca:	e680      	b.n	80018ce <HAL_RCC_OscConfig+0xc6>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bcc:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8001bce:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001bd2:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8001bd4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	4019      	ands	r1, r3
 8001bd8:	4281      	cmp	r1, r0
 8001bda:	d000      	beq.n	8001bde <HAL_RCC_OscConfig+0x3d6>
 8001bdc:	e65f      	b.n	800189e <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bde:	210f      	movs	r1, #15
 8001be0:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001be4:	428a      	cmp	r2, r1
 8001be6:	d000      	beq.n	8001bea <HAL_RCC_OscConfig+0x3e2>
 8001be8:	e659      	b.n	800189e <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001bea:	22f0      	movs	r2, #240	; 0xf0
 8001bec:	0392      	lsls	r2, r2, #14
 8001bee:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bf0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d100      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x3f0>
 8001bf6:	e63d      	b.n	8001874 <HAL_RCC_OscConfig+0x6c>
 8001bf8:	e651      	b.n	800189e <HAL_RCC_OscConfig+0x96>
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	feffffff 	.word	0xfeffffff
 8001c04:	ffc2ffff 	.word	0xffc2ffff

08001c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	b570      	push	{r4, r5, r6, lr}
 8001c0a:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c0c:	2210      	movs	r2, #16
 8001c0e:	4912      	ldr	r1, [pc, #72]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c10:	4668      	mov	r0, sp
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c12:	ad04      	add	r5, sp, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c14:	f000 fe78 	bl	8002908 <memcpy>
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c18:	2210      	movs	r2, #16
 8001c1a:	0028      	movs	r0, r5
 8001c1c:	490f      	ldr	r1, [pc, #60]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x54>)
 8001c1e:	f000 fe73 	bl	8002908 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c22:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001c24:	4e0e      	ldr	r6, [pc, #56]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x58>)
 8001c26:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c28:	401a      	ands	r2, r3
 8001c2a:	2a08      	cmp	r2, #8
 8001c2c:	d111      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x4a>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c2e:	200f      	movs	r0, #15
 8001c30:	466a      	mov	r2, sp
 8001c32:	0c99      	lsrs	r1, r3, #18
 8001c34:	4001      	ands	r1, r0
 8001c36:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c38:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001c3a:	4002      	ands	r2, r0
 8001c3c:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c3e:	03db      	lsls	r3, r3, #15
 8001c40:	d505      	bpl.n	8001c4e <HAL_RCC_GetSysClockFreq+0x46>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c42:	4808      	ldr	r0, [pc, #32]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001c44:	f7fe fa7c 	bl	8000140 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c48:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c4a:	b008      	add	sp, #32
 8001c4c:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c4e:	4806      	ldr	r0, [pc, #24]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x60>)
 8001c50:	e7fa      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = HSE_VALUE;
 8001c52:	4804      	ldr	r0, [pc, #16]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8001c54:	e7f9      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x42>
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	08003d33 	.word	0x08003d33
 8001c5c:	08003d44 	.word	0x08003d44
 8001c60:	40021000 	.word	0x40021000
 8001c64:	007a1200 	.word	0x007a1200
 8001c68:	003d0900 	.word	0x003d0900

08001c6c <HAL_RCC_ClockConfig>:
{
 8001c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c6e:	0004      	movs	r4, r0
 8001c70:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001c72:	2800      	cmp	r0, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001c76:	2001      	movs	r0, #1
}
 8001c78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4d37      	ldr	r5, [pc, #220]	; (8001d5c <HAL_RCC_ClockConfig+0xf0>)
 8001c7e:	682b      	ldr	r3, [r5, #0]
 8001c80:	4013      	ands	r3, r2
 8001c82:	428b      	cmp	r3, r1
 8001c84:	d31c      	bcc.n	8001cc0 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c86:	6821      	ldr	r1, [r4, #0]
 8001c88:	078b      	lsls	r3, r1, #30
 8001c8a:	d422      	bmi.n	8001cd2 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8c:	07cb      	lsls	r3, r1, #31
 8001c8e:	d42f      	bmi.n	8001cf0 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c90:	2301      	movs	r3, #1
 8001c92:	682a      	ldr	r2, [r5, #0]
 8001c94:	401a      	ands	r2, r3
 8001c96:	42b2      	cmp	r2, r6
 8001c98:	d851      	bhi.n	8001d3e <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	4d30      	ldr	r5, [pc, #192]	; (8001d60 <HAL_RCC_ClockConfig+0xf4>)
 8001c9e:	075b      	lsls	r3, r3, #29
 8001ca0:	d454      	bmi.n	8001d4c <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ca2:	f7ff ffb1 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001ca6:	686b      	ldr	r3, [r5, #4]
 8001ca8:	4a2e      	ldr	r2, [pc, #184]	; (8001d64 <HAL_RCC_ClockConfig+0xf8>)
 8001caa:	061b      	lsls	r3, r3, #24
 8001cac:	0f1b      	lsrs	r3, r3, #28
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	40d8      	lsrs	r0, r3
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <HAL_RCC_ClockConfig+0xfc>)
 8001cb4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cb6:	2003      	movs	r0, #3
 8001cb8:	f7ff fbe4 	bl	8001484 <HAL_InitTick>
  return HAL_OK;
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	e7db      	b.n	8001c78 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc0:	682b      	ldr	r3, [r5, #0]
 8001cc2:	4393      	bics	r3, r2
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc8:	682b      	ldr	r3, [r5, #0]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	428b      	cmp	r3, r1
 8001cce:	d1d2      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xa>
 8001cd0:	e7d9      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd2:	4a23      	ldr	r2, [pc, #140]	; (8001d60 <HAL_RCC_ClockConfig+0xf4>)
 8001cd4:	074b      	lsls	r3, r1, #29
 8001cd6:	d504      	bpl.n	8001ce2 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cd8:	23e0      	movs	r3, #224	; 0xe0
 8001cda:	6850      	ldr	r0, [r2, #4]
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4303      	orrs	r3, r0
 8001ce0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce2:	20f0      	movs	r0, #240	; 0xf0
 8001ce4:	6853      	ldr	r3, [r2, #4]
 8001ce6:	4383      	bics	r3, r0
 8001ce8:	68a0      	ldr	r0, [r4, #8]
 8001cea:	4303      	orrs	r3, r0
 8001cec:	6053      	str	r3, [r2, #4]
 8001cee:	e7cd      	b.n	8001c8c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf0:	4f1b      	ldr	r7, [pc, #108]	; (8001d60 <HAL_RCC_ClockConfig+0xf4>)
 8001cf2:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf4:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	2a01      	cmp	r2, #1
 8001cf8:	d119      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	039b      	lsls	r3, r3, #14
 8001cfc:	d5bb      	bpl.n	8001c76 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cfe:	2103      	movs	r1, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	438b      	bics	r3, r1
 8001d04:	4313      	orrs	r3, r2
 8001d06:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8001d08:	f7ff fbfc 	bl	8001504 <HAL_GetTick>
 8001d0c:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	230c      	movs	r3, #12
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	401a      	ands	r2, r3
 8001d14:	6863      	ldr	r3, [r4, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d0b9      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7ff fbf2 	bl	8001504 <HAL_GetTick>
 8001d20:	9b01      	ldr	r3, [sp, #4]
 8001d22:	1ac0      	subs	r0, r0, r3
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_RCC_ClockConfig+0x100>)
 8001d26:	4298      	cmp	r0, r3
 8001d28:	d9f1      	bls.n	8001d0e <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8001d2a:	2003      	movs	r0, #3
 8001d2c:	e7a4      	b.n	8001c78 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2e:	2a02      	cmp	r2, #2
 8001d30:	d102      	bne.n	8001d38 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d32:	019b      	lsls	r3, r3, #6
 8001d34:	d4e3      	bmi.n	8001cfe <HAL_RCC_ClockConfig+0x92>
 8001d36:	e79e      	b.n	8001c76 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d38:	079b      	lsls	r3, r3, #30
 8001d3a:	d4e0      	bmi.n	8001cfe <HAL_RCC_ClockConfig+0x92>
 8001d3c:	e79b      	b.n	8001c76 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	682a      	ldr	r2, [r5, #0]
 8001d40:	439a      	bics	r2, r3
 8001d42:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d44:	682a      	ldr	r2, [r5, #0]
 8001d46:	421a      	tst	r2, r3
 8001d48:	d0a7      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x2e>
 8001d4a:	e794      	b.n	8001c76 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	686b      	ldr	r3, [r5, #4]
 8001d4e:	4a08      	ldr	r2, [pc, #32]	; (8001d70 <HAL_RCC_ClockConfig+0x104>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	68e2      	ldr	r2, [r4, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	606b      	str	r3, [r5, #4]
 8001d58:	e7a3      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x36>
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08003d1b 	.word	0x08003d1b
 8001d68:	20000014 	.word	0x20000014
 8001d6c:	00001388 	.word	0x00001388
 8001d70:	fffff8ff 	.word	0xfffff8ff

08001d74 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	055b      	lsls	r3, r3, #21
 8001d7c:	0f5b      	lsrs	r3, r3, #29
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	4a03      	ldr	r2, [pc, #12]	; (8001d90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d82:	6810      	ldr	r0, [r2, #0]
 8001d84:	40d8      	lsrs	r0, r3
}    
 8001d86:	4770      	bx	lr
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	08003d2b 	.word	0x08003d2b
 8001d90:	20000014 	.word	0x20000014

08001d94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d94:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d96:	6803      	ldr	r3, [r0, #0]
{
 8001d98:	0005      	movs	r5, r0
 8001d9a:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d9c:	03db      	lsls	r3, r3, #15
 8001d9e:	d52a      	bpl.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001da2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da4:	4c3c      	ldr	r4, [pc, #240]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001da6:	0552      	lsls	r2, r2, #21
 8001da8:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001daa:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dac:	4213      	tst	r3, r2
 8001dae:	d108      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	69e3      	ldr	r3, [r4, #28]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61e3      	str	r3, [r4, #28]
 8001db6:	69e3      	ldr	r3, [r4, #28]
 8001db8:	4013      	ands	r3, r2
 8001dba:	9303      	str	r3, [sp, #12]
 8001dbc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	2780      	movs	r7, #128	; 0x80
 8001dc4:	4e35      	ldr	r6, [pc, #212]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001dc6:	007f      	lsls	r7, r7, #1
 8001dc8:	6833      	ldr	r3, [r6, #0]
 8001dca:	423b      	tst	r3, r7
 8001dcc:	d031      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dce:	6a22      	ldr	r2, [r4, #32]
 8001dd0:	23c0      	movs	r3, #192	; 0xc0
 8001dd2:	0011      	movs	r1, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4e32      	ldr	r6, [pc, #200]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001dd8:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dda:	421a      	tst	r2, r3
 8001ddc:	d13b      	bne.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dde:	6a23      	ldr	r3, [r4, #32]
 8001de0:	401e      	ands	r6, r3
 8001de2:	686b      	ldr	r3, [r5, #4]
 8001de4:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001de6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001de8:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d103      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dee:	69e3      	ldr	r3, [r4, #28]
 8001df0:	4a2c      	ldr	r2, [pc, #176]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001df6:	682a      	ldr	r2, [r5, #0]
 8001df8:	07d3      	lsls	r3, r2, #31
 8001dfa:	d506      	bpl.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dfc:	2003      	movs	r0, #3
 8001dfe:	4926      	ldr	r1, [pc, #152]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001e00:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001e02:	4383      	bics	r3, r0
 8001e04:	68a8      	ldr	r0, [r5, #8]
 8001e06:	4303      	orrs	r3, r0
 8001e08:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e0a:	0693      	lsls	r3, r2, #26
 8001e0c:	d506      	bpl.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e0e:	2010      	movs	r0, #16
 8001e10:	4921      	ldr	r1, [pc, #132]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001e12:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001e14:	4383      	bics	r3, r0
 8001e16:	68e8      	ldr	r0, [r5, #12]
 8001e18:	4303      	orrs	r3, r0
 8001e1a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e1c:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e1e:	0553      	lsls	r3, r2, #21
 8001e20:	d517      	bpl.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e22:	2140      	movs	r1, #64	; 0x40
 8001e24:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001e26:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e28:	438b      	bics	r3, r1
 8001e2a:	6929      	ldr	r1, [r5, #16]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e30:	e00f      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e32:	6833      	ldr	r3, [r6, #0]
 8001e34:	433b      	orrs	r3, r7
 8001e36:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e38:	f7ff fb64 	bl	8001504 <HAL_GetTick>
 8001e3c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	6833      	ldr	r3, [r6, #0]
 8001e40:	423b      	tst	r3, r7
 8001e42:	d1c4      	bne.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e44:	f7ff fb5e 	bl	8001504 <HAL_GetTick>
 8001e48:	9b01      	ldr	r3, [sp, #4]
 8001e4a:	1ac0      	subs	r0, r0, r3
 8001e4c:	2864      	cmp	r0, #100	; 0x64
 8001e4e:	d9f6      	bls.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0xaa>
          return HAL_TIMEOUT;
 8001e50:	2003      	movs	r0, #3
}
 8001e52:	b005      	add	sp, #20
 8001e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e56:	686a      	ldr	r2, [r5, #4]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	428b      	cmp	r3, r1
 8001e5c:	d0bf      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e5e:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e60:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e62:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e64:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e66:	025b      	lsls	r3, r3, #9
 8001e68:	4303      	orrs	r3, r0
 8001e6a:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e6c:	6a23      	ldr	r3, [r4, #32]
 8001e6e:	480e      	ldr	r0, [pc, #56]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x114>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e70:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e72:	4003      	ands	r3, r0
 8001e74:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001e76:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e78:	07d3      	lsls	r3, r2, #31
 8001e7a:	d5b0      	bpl.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fb42 	bl	8001504 <HAL_GetTick>
 8001e80:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e82:	2202      	movs	r2, #2
 8001e84:	6a23      	ldr	r3, [r4, #32]
 8001e86:	4213      	tst	r3, r2
 8001e88:	d1a9      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff fb3b 	bl	8001504 <HAL_GetTick>
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001e90:	1bc0      	subs	r0, r0, r7
 8001e92:	4298      	cmp	r0, r3
 8001e94:	d9f5      	bls.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8001e96:	e7db      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	fffffcff 	.word	0xfffffcff
 8001ea4:	efffffff 	.word	0xefffffff
 8001ea8:	fffeffff 	.word	0xfffeffff
 8001eac:	00001388 	.word	0x00001388

08001eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001eb0:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eb2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ebc:	6801      	ldr	r1, [r0, #0]
 8001ebe:	4d12      	ldr	r5, [pc, #72]	; (8001f08 <UART_EndRxTransfer+0x58>)
 8001ec0:	680b      	ldr	r3, [r1, #0]
 8001ec2:	402b      	ands	r3, r5
 8001ec4:	600b      	str	r3, [r1, #0]
 8001ec6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eca:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ece:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ed2:	6801      	ldr	r1, [r0, #0]
 8001ed4:	688b      	ldr	r3, [r1, #8]
 8001ed6:	4393      	bics	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
 8001eda:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ede:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d10a      	bne.n	8001efa <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ee4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee8:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001eec:	2410      	movs	r4, #16
 8001eee:	6802      	ldr	r2, [r0, #0]
 8001ef0:	6813      	ldr	r3, [r2, #0]
 8001ef2:	43a3      	bics	r3, r4
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001efa:	2320      	movs	r3, #32
 8001efc:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001efe:	2300      	movs	r3, #0
 8001f00:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001f02:	6643      	str	r3, [r0, #100]	; 0x64
}
 8001f04:	bd30      	pop	{r4, r5, pc}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	fffffedf 	.word	0xfffffedf

08001f0c <HAL_UART_TxCpltCallback>:
 8001f0c:	4770      	bx	lr

08001f0e <HAL_UART_ErrorCallback>:
 8001f0e:	4770      	bx	lr

08001f10 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001f10:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	0002      	movs	r2, r0
{
 8001f16:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001f18:	325a      	adds	r2, #90	; 0x5a
 8001f1a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001f1c:	3a08      	subs	r2, #8
 8001f1e:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f20:	f7ff fff5 	bl	8001f0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f24:	bd10      	pop	{r4, pc}

08001f26 <HAL_UARTEx_RxEventCallback>:
}
 8001f26:	4770      	bx	lr

08001f28 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f28:	6802      	ldr	r2, [r0, #0]
{
 8001f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f2c:	69d3      	ldr	r3, [r2, #28]
{
 8001f2e:	0004      	movs	r4, r0
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001f30:	48a4      	ldr	r0, [pc, #656]	; (80021c4 <HAL_UART_IRQHandler+0x29c>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f32:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f34:	6896      	ldr	r6, [r2, #8]
  if (errorflags == 0U)
 8001f36:	4203      	tst	r3, r0
 8001f38:	d10b      	bne.n	8001f52 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001f3a:	2020      	movs	r0, #32
 8001f3c:	4203      	tst	r3, r0
 8001f3e:	d100      	bne.n	8001f42 <HAL_UART_IRQHandler+0x1a>
 8001f40:	e07f      	b.n	8002042 <HAL_UART_IRQHandler+0x11a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001f42:	4201      	tst	r1, r0
 8001f44:	d100      	bne.n	8001f48 <HAL_UART_IRQHandler+0x20>
 8001f46:	e07c      	b.n	8002042 <HAL_UART_IRQHandler+0x11a>
      if (huart->RxISR != NULL)
 8001f48:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8001f4a:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d16e      	bne.n	800202e <HAL_UART_IRQHandler+0x106>
 8001f50:	e06e      	b.n	8002030 <HAL_UART_IRQHandler+0x108>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001f52:	2001      	movs	r0, #1
 8001f54:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001f56:	4d9c      	ldr	r5, [pc, #624]	; (80021c8 <HAL_UART_IRQHandler+0x2a0>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001f58:	4007      	ands	r7, r0
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001f5a:	400d      	ands	r5, r1
 8001f5c:	433d      	orrs	r5, r7
 8001f5e:	d100      	bne.n	8001f62 <HAL_UART_IRQHandler+0x3a>
 8001f60:	e06f      	b.n	8002042 <HAL_UART_IRQHandler+0x11a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001f62:	1d25      	adds	r5, r4, #4
 8001f64:	4203      	tst	r3, r0
 8001f66:	d005      	beq.n	8001f74 <HAL_UART_IRQHandler+0x4c>
 8001f68:	05ce      	lsls	r6, r1, #23
 8001f6a:	d503      	bpl.n	8001f74 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001f6c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f6e:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8001f70:	4330      	orrs	r0, r6
 8001f72:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f74:	2002      	movs	r0, #2
 8001f76:	4203      	tst	r3, r0
 8001f78:	d006      	beq.n	8001f88 <HAL_UART_IRQHandler+0x60>
 8001f7a:	2f00      	cmp	r7, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_UART_IRQHandler+0x60>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001f7e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f80:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8001f82:	1800      	adds	r0, r0, r0
 8001f84:	4330      	orrs	r0, r6
 8001f86:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f88:	2004      	movs	r0, #4
 8001f8a:	4203      	tst	r3, r0
 8001f8c:	d006      	beq.n	8001f9c <HAL_UART_IRQHandler+0x74>
 8001f8e:	2f00      	cmp	r7, #0
 8001f90:	d004      	beq.n	8001f9c <HAL_UART_IRQHandler+0x74>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001f92:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f94:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8001f96:	3802      	subs	r0, #2
 8001f98:	4330      	orrs	r0, r6
 8001f9a:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001f9c:	2008      	movs	r0, #8
 8001f9e:	4203      	tst	r3, r0
 8001fa0:	d007      	beq.n	8001fb2 <HAL_UART_IRQHandler+0x8a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001fa2:	2620      	movs	r6, #32
 8001fa4:	400e      	ands	r6, r1
 8001fa6:	433e      	orrs	r6, r7
 8001fa8:	d003      	beq.n	8001fb2 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001faa:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fac:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8001fae:	4330      	orrs	r0, r6
 8001fb0:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001fb2:	2080      	movs	r0, #128	; 0x80
 8001fb4:	0100      	lsls	r0, r0, #4
 8001fb6:	4203      	tst	r3, r0
 8001fb8:	d006      	beq.n	8001fc8 <HAL_UART_IRQHandler+0xa0>
 8001fba:	014e      	lsls	r6, r1, #5
 8001fbc:	d504      	bpl.n	8001fc8 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001fbe:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 8001fc4:	4302      	orrs	r2, r0
 8001fc6:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fc8:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001fca:	2a00      	cmp	r2, #0
 8001fcc:	d030      	beq.n	8002030 <HAL_UART_IRQHandler+0x108>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001fce:	2220      	movs	r2, #32
 8001fd0:	4213      	tst	r3, r2
 8001fd2:	d006      	beq.n	8001fe2 <HAL_UART_IRQHandler+0xba>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001fd4:	4211      	tst	r1, r2
 8001fd6:	d004      	beq.n	8001fe2 <HAL_UART_IRQHandler+0xba>
        if (huart->RxISR != NULL)
 8001fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_UART_IRQHandler+0xba>
          huart->RxISR(huart);
 8001fde:	0020      	movs	r0, r4
 8001fe0:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001fe2:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8001fe4:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001fe6:	2740      	movs	r7, #64	; 0x40
 8001fe8:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001fea:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001fec:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001fee:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8001ff0:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001ff2:	431e      	orrs	r6, r3
 8001ff4:	d021      	beq.n	800203a <HAL_UART_IRQHandler+0x112>
        UART_EndRxTransfer(huart);
 8001ff6:	f7ff ff5b 	bl	8001eb0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	423b      	tst	r3, r7
 8002000:	d017      	beq.n	8002032 <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002002:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002006:	2301      	movs	r3, #1
 8002008:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800200c:	6822      	ldr	r2, [r4, #0]
 800200e:	6893      	ldr	r3, [r2, #8]
 8002010:	43bb      	bics	r3, r7
 8002012:	6093      	str	r3, [r2, #8]
 8002014:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8002018:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800201a:	2800      	cmp	r0, #0
 800201c:	d009      	beq.n	8002032 <HAL_UART_IRQHandler+0x10a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800201e:	4b6b      	ldr	r3, [pc, #428]	; (80021cc <HAL_UART_IRQHandler+0x2a4>)
 8002020:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002022:	f7ff fb03 	bl	800162c <HAL_DMA_Abort_IT>
 8002026:	2800      	cmp	r0, #0
 8002028:	d002      	beq.n	8002030 <HAL_UART_IRQHandler+0x108>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800202a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800202c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800202e:	4798      	blx	r3
}
 8002030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8002032:	0020      	movs	r0, r4
 8002034:	f7ff ff6b 	bl	8001f0e <HAL_UART_ErrorCallback>
 8002038:	e7fa      	b.n	8002030 <HAL_UART_IRQHandler+0x108>
        HAL_UART_ErrorCallback(huart);
 800203a:	f7ff ff68 	bl	8001f0e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800203e:	67ee      	str	r6, [r5, #124]	; 0x7c
 8002040:	e7f6      	b.n	8002030 <HAL_UART_IRQHandler+0x108>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002042:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002044:	2801      	cmp	r0, #1
 8002046:	d000      	beq.n	800204a <HAL_UART_IRQHandler+0x122>
 8002048:	e08f      	b.n	800216a <HAL_UART_IRQHandler+0x242>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800204a:	2510      	movs	r5, #16
 800204c:	422b      	tst	r3, r5
 800204e:	d100      	bne.n	8002052 <HAL_UART_IRQHandler+0x12a>
 8002050:	e08b      	b.n	800216a <HAL_UART_IRQHandler+0x242>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002052:	4229      	tst	r1, r5
 8002054:	d100      	bne.n	8002058 <HAL_UART_IRQHandler+0x130>
 8002056:	e088      	b.n	800216a <HAL_UART_IRQHandler+0x242>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002058:	6215      	str	r5, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800205a:	6893      	ldr	r3, [r2, #8]
 800205c:	2140      	movs	r1, #64	; 0x40
 800205e:	001a      	movs	r2, r3
 8002060:	400a      	ands	r2, r1
 8002062:	420b      	tst	r3, r1
 8002064:	d04c      	beq.n	8002100 <HAL_UART_IRQHandler+0x1d8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002066:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8002068:	6813      	ldr	r3, [r2, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0de      	beq.n	8002030 <HAL_UART_IRQHandler+0x108>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002072:	0026      	movs	r6, r4
 8002074:	3658      	adds	r6, #88	; 0x58
 8002076:	8837      	ldrh	r7, [r6, #0]
 8002078:	429f      	cmp	r7, r3
 800207a:	d9d9      	bls.n	8002030 <HAL_UART_IRQHandler+0x108>
        huart->RxXferCount = nb_remaining_rx_data;
 800207c:	0027      	movs	r7, r4
 800207e:	375a      	adds	r7, #90	; 0x5a
 8002080:	803b      	strh	r3, [r7, #0]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002082:	6993      	ldr	r3, [r2, #24]
 8002084:	2b20      	cmp	r3, #32
 8002086:	d031      	beq.n	80020ec <HAL_UART_IRQHandler+0x1c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002088:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800208c:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002090:	6822      	ldr	r2, [r4, #0]
 8002092:	4d4f      	ldr	r5, [pc, #316]	; (80021d0 <HAL_UART_IRQHandler+0x2a8>)
 8002094:	6813      	ldr	r3, [r2, #0]
 8002096:	402b      	ands	r3, r5
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800209e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a2:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020a6:	6822      	ldr	r2, [r4, #0]
 80020a8:	6893      	ldr	r3, [r2, #8]
 80020aa:	4383      	bics	r3, r0
 80020ac:	6093      	str	r3, [r2, #8]
 80020ae:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020b2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b6:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020ba:	6822      	ldr	r2, [r4, #0]
 80020bc:	6893      	ldr	r3, [r2, #8]
 80020be:	438b      	bics	r3, r1
 80020c0:	6093      	str	r3, [r2, #8]
 80020c2:	f387 8810 	msr	PRIMASK, r7
          huart->RxState = HAL_UART_STATE_READY;
 80020c6:	2320      	movs	r3, #32
 80020c8:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020ca:	2300      	movs	r3, #0
 80020cc:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020ce:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020d2:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020d6:	6822      	ldr	r2, [r4, #0]
 80020d8:	3512      	adds	r5, #18
 80020da:	6813      	ldr	r3, [r2, #0]
 80020dc:	35ff      	adds	r5, #255	; 0xff
 80020de:	43ab      	bics	r3, r5
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020e6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80020e8:	f7ff fa82 	bl	80015f0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020ec:	0023      	movs	r3, r4
 80020ee:	335a      	adds	r3, #90	; 0x5a
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	8831      	ldrh	r1, [r6, #0]
 80020f4:	1ac9      	subs	r1, r1, r3
 80020f6:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80020f8:	0020      	movs	r0, r4
 80020fa:	f7ff ff14 	bl	8001f26 <HAL_UARTEx_RxEventCallback>
 80020fe:	e797      	b.n	8002030 <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002100:	0026      	movs	r6, r4
 8002102:	365a      	adds	r6, #90	; 0x5a
 8002104:	8833      	ldrh	r3, [r6, #0]
      if ((huart->RxXferCount > 0U)
 8002106:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002108:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 800210a:	2900      	cmp	r1, #0
 800210c:	d100      	bne.n	8002110 <HAL_UART_IRQHandler+0x1e8>
 800210e:	e78f      	b.n	8002030 <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002110:	0021      	movs	r1, r4
 8002112:	3158      	adds	r1, #88	; 0x58
 8002114:	8809      	ldrh	r1, [r1, #0]
 8002116:	1ac9      	subs	r1, r1, r3
 8002118:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800211a:	2900      	cmp	r1, #0
 800211c:	d100      	bne.n	8002120 <HAL_UART_IRQHandler+0x1f8>
 800211e:	e787      	b.n	8002030 <HAL_UART_IRQHandler+0x108>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002120:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002124:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002128:	6826      	ldr	r6, [r4, #0]
 800212a:	4d2a      	ldr	r5, [pc, #168]	; (80021d4 <HAL_UART_IRQHandler+0x2ac>)
 800212c:	6833      	ldr	r3, [r6, #0]
 800212e:	402b      	ands	r3, r5
 8002130:	6033      	str	r3, [r6, #0]
 8002132:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002136:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800213a:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800213e:	6826      	ldr	r6, [r4, #0]
 8002140:	68b3      	ldr	r3, [r6, #8]
 8002142:	4383      	bics	r3, r0
 8002144:	60b3      	str	r3, [r6, #8]
 8002146:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 800214a:	2320      	movs	r3, #32
        huart->RxISR = NULL;
 800214c:	6662      	str	r2, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 800214e:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002150:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002152:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002156:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800215a:	2010      	movs	r0, #16
 800215c:	6822      	ldr	r2, [r4, #0]
 800215e:	6813      	ldr	r3, [r2, #0]
 8002160:	4383      	bics	r3, r0
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	f386 8810 	msr	PRIMASK, r6
 8002168:	e7c6      	b.n	80020f8 <HAL_UART_IRQHandler+0x1d0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800216a:	2080      	movs	r0, #128	; 0x80
 800216c:	0340      	lsls	r0, r0, #13
 800216e:	4203      	tst	r3, r0
 8002170:	d006      	beq.n	8002180 <HAL_UART_IRQHandler+0x258>
 8002172:	0275      	lsls	r5, r6, #9
 8002174:	d504      	bpl.n	8002180 <HAL_UART_IRQHandler+0x258>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002176:	6210      	str	r0, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002178:	0020      	movs	r0, r4
 800217a:	f000 fb9a 	bl	80028b2 <HAL_UARTEx_WakeupCallback>
    return;
 800217e:	e757      	b.n	8002030 <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	4213      	tst	r3, r2
 8002184:	d003      	beq.n	800218e <HAL_UART_IRQHandler+0x266>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002186:	4211      	tst	r1, r2
 8002188:	d001      	beq.n	800218e <HAL_UART_IRQHandler+0x266>
    if (huart->TxISR != NULL)
 800218a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800218c:	e6dd      	b.n	8001f4a <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800218e:	2240      	movs	r2, #64	; 0x40
 8002190:	4213      	tst	r3, r2
 8002192:	d100      	bne.n	8002196 <HAL_UART_IRQHandler+0x26e>
 8002194:	e74c      	b.n	8002030 <HAL_UART_IRQHandler+0x108>
 8002196:	4211      	tst	r1, r2
 8002198:	d100      	bne.n	800219c <HAL_UART_IRQHandler+0x274>
 800219a:	e749      	b.n	8002030 <HAL_UART_IRQHandler+0x108>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800219c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021a0:	2301      	movs	r3, #1
 80021a2:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80021a6:	6821      	ldr	r1, [r4, #0]
 80021a8:	680b      	ldr	r3, [r1, #0]
 80021aa:	4393      	bics	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
 80021ae:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80021b2:	2320      	movs	r3, #32
 80021b4:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80021b6:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80021b8:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 80021ba:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 80021bc:	f7ff fea6 	bl	8001f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021c0:	e736      	b.n	8002030 <HAL_UART_IRQHandler+0x108>
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	0000080f 	.word	0x0000080f
 80021c8:	04000120 	.word	0x04000120
 80021cc:	08001f11 	.word	0x08001f11
 80021d0:	fffffeff 	.word	0xfffffeff
 80021d4:	fffffedf 	.word	0xfffffedf

080021d8 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80021d8:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80021da:	b570      	push	{r4, r5, r6, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80021dc:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80021de:	2a22      	cmp	r2, #34	; 0x22
 80021e0:	d149      	bne.n	8002276 <UART_RxISR_8BIT+0x9e>
  uint16_t uhMask = huart->Mask;
 80021e2:	0002      	movs	r2, r0
 80021e4:	325c      	adds	r2, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80021e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80021e8:	8812      	ldrh	r2, [r2, #0]
 80021ea:	4013      	ands	r3, r2
 80021ec:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80021ee:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 80021f0:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 80021f2:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80021f4:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 80021f6:	3301      	adds	r3, #1
 80021f8:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80021fa:	8813      	ldrh	r3, [r2, #0]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29b      	uxth	r3, r3
 8002200:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8002202:	8813      	ldrh	r3, [r2, #0]
 8002204:	b299      	uxth	r1, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d131      	bne.n	800226e <UART_RxISR_8BIT+0x96>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800220a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800220e:	2201      	movs	r2, #1
 8002210:	f382 8810 	msr	PRIMASK, r2
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002214:	6804      	ldr	r4, [r0, #0]
 8002216:	4e1a      	ldr	r6, [pc, #104]	; (8002280 <UART_RxISR_8BIT+0xa8>)
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	4033      	ands	r3, r6
 800221c:	6023      	str	r3, [r4, #0]
 800221e:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002222:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002226:	f382 8810 	msr	PRIMASK, r2

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800222a:	6804      	ldr	r4, [r0, #0]
 800222c:	68a3      	ldr	r3, [r4, #8]
 800222e:	4393      	bics	r3, r2
 8002230:	60a3      	str	r3, [r4, #8]
 8002232:	f385 8810 	msr	PRIMASK, r5

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002236:	2320      	movs	r3, #32
 8002238:	67c3      	str	r3, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800223a:	6e03      	ldr	r3, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 800223c:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800223e:	4293      	cmp	r3, r2
 8002240:	d116      	bne.n	8002270 <UART_RxISR_8BIT+0x98>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002242:	6601      	str	r1, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002244:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002248:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800224c:	2310      	movs	r3, #16
 800224e:	6801      	ldr	r1, [r0, #0]
 8002250:	680a      	ldr	r2, [r1, #0]
 8002252:	439a      	bics	r2, r3
 8002254:	600a      	str	r2, [r1, #0]
 8002256:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800225a:	6802      	ldr	r2, [r0, #0]
 800225c:	69d1      	ldr	r1, [r2, #28]
 800225e:	4219      	tst	r1, r3
 8002260:	d000      	beq.n	8002264 <UART_RxISR_8BIT+0x8c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002262:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002264:	0003      	movs	r3, r0
 8002266:	3358      	adds	r3, #88	; 0x58
 8002268:	8819      	ldrh	r1, [r3, #0]
 800226a:	f7ff fe5c 	bl	8001f26 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800226e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_RxCpltCallback(huart);
 8002270:	f7fe fe20 	bl	8000eb4 <HAL_UART_RxCpltCallback>
 8002274:	e7fb      	b.n	800226e <UART_RxISR_8BIT+0x96>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002276:	2208      	movs	r2, #8
 8002278:	6999      	ldr	r1, [r3, #24]
 800227a:	430a      	orrs	r2, r1
 800227c:	619a      	str	r2, [r3, #24]
}
 800227e:	e7f6      	b.n	800226e <UART_RxISR_8BIT+0x96>
 8002280:	fffffedf 	.word	0xfffffedf

08002284 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002284:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8002286:	b570      	push	{r4, r5, r6, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002288:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800228a:	2a22      	cmp	r2, #34	; 0x22
 800228c:	d148      	bne.n	8002320 <UART_RxISR_16BIT+0x9c>
  uint16_t uhMask = huart->Mask;
 800228e:	0002      	movs	r2, r0
 8002290:	325c      	adds	r2, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002292:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8002294:	8812      	ldrh	r2, [r2, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002296:	6d43      	ldr	r3, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8002298:	400a      	ands	r2, r1
 800229a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 800229c:	0002      	movs	r2, r0
    huart->pRxBuffPtr += 2U;
 800229e:	3302      	adds	r3, #2
 80022a0:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80022a2:	325a      	adds	r2, #90	; 0x5a
 80022a4:	8813      	ldrh	r3, [r2, #0]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 80022ac:	8813      	ldrh	r3, [r2, #0]
 80022ae:	b299      	uxth	r1, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d131      	bne.n	8002318 <UART_RxISR_16BIT+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022b4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b8:	2201      	movs	r2, #1
 80022ba:	f382 8810 	msr	PRIMASK, r2
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022be:	6804      	ldr	r4, [r0, #0]
 80022c0:	4e1a      	ldr	r6, [pc, #104]	; (800232c <UART_RxISR_16BIT+0xa8>)
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	4033      	ands	r3, r6
 80022c6:	6023      	str	r3, [r4, #0]
 80022c8:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022cc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d0:	f382 8810 	msr	PRIMASK, r2

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d4:	6804      	ldr	r4, [r0, #0]
 80022d6:	68a3      	ldr	r3, [r4, #8]
 80022d8:	4393      	bics	r3, r2
 80022da:	60a3      	str	r3, [r4, #8]
 80022dc:	f385 8810 	msr	PRIMASK, r5

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80022e0:	2320      	movs	r3, #32
 80022e2:	67c3      	str	r3, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022e4:	6e03      	ldr	r3, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 80022e6:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d116      	bne.n	800231a <UART_RxISR_16BIT+0x96>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ec:	6601      	str	r1, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ee:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f2:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022f6:	2310      	movs	r3, #16
 80022f8:	6801      	ldr	r1, [r0, #0]
 80022fa:	680a      	ldr	r2, [r1, #0]
 80022fc:	439a      	bics	r2, r3
 80022fe:	600a      	str	r2, [r1, #0]
 8002300:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002304:	6802      	ldr	r2, [r0, #0]
 8002306:	69d1      	ldr	r1, [r2, #28]
 8002308:	4219      	tst	r1, r3
 800230a:	d000      	beq.n	800230e <UART_RxISR_16BIT+0x8a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800230c:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800230e:	0003      	movs	r3, r0
 8002310:	3358      	adds	r3, #88	; 0x58
 8002312:	8819      	ldrh	r1, [r3, #0]
 8002314:	f7ff fe07 	bl	8001f26 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002318:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_RxCpltCallback(huart);
 800231a:	f7fe fdcb 	bl	8000eb4 <HAL_UART_RxCpltCallback>
 800231e:	e7fb      	b.n	8002318 <UART_RxISR_16BIT+0x94>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002320:	2208      	movs	r2, #8
 8002322:	6999      	ldr	r1, [r3, #24]
 8002324:	430a      	orrs	r2, r1
 8002326:	619a      	str	r2, [r3, #24]
}
 8002328:	e7f6      	b.n	8002318 <UART_RxISR_16BIT+0x94>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	fffffedf 	.word	0xfffffedf

08002330 <UART_SetConfig>:
{
 8002330:	b570      	push	{r4, r5, r6, lr}
 8002332:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002334:	6925      	ldr	r5, [r4, #16]
 8002336:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002338:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800233a:	432a      	orrs	r2, r5
 800233c:	6965      	ldr	r5, [r4, #20]
 800233e:	69c3      	ldr	r3, [r0, #28]
 8002340:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002342:	6808      	ldr	r0, [r1, #0]
 8002344:	4d3e      	ldr	r5, [pc, #248]	; (8002440 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002346:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002348:	4028      	ands	r0, r5
 800234a:	4302      	orrs	r2, r0
 800234c:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800234e:	684a      	ldr	r2, [r1, #4]
 8002350:	483c      	ldr	r0, [pc, #240]	; (8002444 <UART_SetConfig+0x114>)
  tmpreg |= huart->Init.OneBitSampling;
 8002352:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002354:	4002      	ands	r2, r0
 8002356:	68e0      	ldr	r0, [r4, #12]
 8002358:	4302      	orrs	r2, r0
 800235a:	604a      	str	r2, [r1, #4]
  tmpreg |= huart->Init.OneBitSampling;
 800235c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800235e:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002360:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002362:	4d39      	ldr	r5, [pc, #228]	; (8002448 <UART_SetConfig+0x118>)
 8002364:	4028      	ands	r0, r5
 8002366:	4302      	orrs	r2, r0
 8002368:	608a      	str	r2, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800236a:	4a38      	ldr	r2, [pc, #224]	; (800244c <UART_SetConfig+0x11c>)
 800236c:	4291      	cmp	r1, r2
 800236e:	d115      	bne.n	800239c <UART_SetConfig+0x6c>
 8002370:	2103      	movs	r1, #3
 8002372:	4a37      	ldr	r2, [pc, #220]	; (8002450 <UART_SetConfig+0x120>)
 8002374:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002376:	400a      	ands	r2, r1
 8002378:	2180      	movs	r1, #128	; 0x80
 800237a:	3a01      	subs	r2, #1
 800237c:	0209      	lsls	r1, r1, #8
 800237e:	2a02      	cmp	r2, #2
 8002380:	d853      	bhi.n	800242a <UART_SetConfig+0xfa>
 8002382:	4834      	ldr	r0, [pc, #208]	; (8002454 <UART_SetConfig+0x124>)
 8002384:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002386:	428b      	cmp	r3, r1
 8002388:	d014      	beq.n	80023b4 <UART_SetConfig+0x84>
    switch (clocksource)
 800238a:	2808      	cmp	r0, #8
 800238c:	d84b      	bhi.n	8002426 <UART_SetConfig+0xf6>
 800238e:	f7fd fec3 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002392:	4a0c      	.short	0x4a0c
 8002394:	4a454a48 	.word	0x4a454a48
 8002398:	4a4a      	.short	0x4a4a
 800239a:	34          	.byte	0x34
 800239b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800239c:	4a2e      	ldr	r2, [pc, #184]	; (8002458 <UART_SetConfig+0x128>)
 800239e:	4291      	cmp	r1, r2
 80023a0:	d141      	bne.n	8002426 <UART_SetConfig+0xf6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	0212      	lsls	r2, r2, #8
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d041      	beq.n	800242e <UART_SetConfig+0xfe>
        pclk = HAL_RCC_GetPCLK1Freq();
 80023aa:	f7ff fce3 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80023ae:	2800      	cmp	r0, #0
 80023b0:	d041      	beq.n	8002436 <UART_SetConfig+0x106>
 80023b2:	e024      	b.n	80023fe <UART_SetConfig+0xce>
    switch (clocksource)
 80023b4:	2808      	cmp	r0, #8
 80023b6:	d836      	bhi.n	8002426 <UART_SetConfig+0xf6>
 80023b8:	f7fd feae 	bl	8000118 <__gnu_thumb1_case_uqi>
 80023bc:	35083539 	.word	0x35083539
 80023c0:	35353505 	.word	0x35353505
 80023c4:	09          	.byte	0x09
 80023c5:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 80023c6:	f7ff fc1f 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 80023ca:	e032      	b.n	8002432 <UART_SetConfig+0x102>
    switch (clocksource)
 80023cc:	4b23      	ldr	r3, [pc, #140]	; (800245c <UART_SetConfig+0x12c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023ce:	0058      	lsls	r0, r3, #1
 80023d0:	6863      	ldr	r3, [r4, #4]
 80023d2:	6861      	ldr	r1, [r4, #4]
 80023d4:	085b      	lsrs	r3, r3, #1
 80023d6:	18c0      	adds	r0, r0, r3
 80023d8:	f7fd feb2 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023dc:	4920      	ldr	r1, [pc, #128]	; (8002460 <UART_SetConfig+0x130>)
 80023de:	b282      	uxth	r2, r0
 80023e0:	3a10      	subs	r2, #16
 80023e2:	0403      	lsls	r3, r0, #16
 80023e4:	428a      	cmp	r2, r1
 80023e6:	d81e      	bhi.n	8002426 <UART_SetConfig+0xf6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023e8:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023ea:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023ec:	4390      	bics	r0, r2
 80023ee:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80023f0:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023f2:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80023f4:	4318      	orrs	r0, r3
 80023f6:	60d0      	str	r0, [r2, #12]
 80023f8:	e01d      	b.n	8002436 <UART_SetConfig+0x106>
    switch (clocksource)
 80023fa:	2080      	movs	r0, #128	; 0x80
 80023fc:	0200      	lsls	r0, r0, #8
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023fe:	6863      	ldr	r3, [r4, #4]
 8002400:	6861      	ldr	r1, [r4, #4]
 8002402:	085b      	lsrs	r3, r3, #1
 8002404:	1818      	adds	r0, r3, r0
 8002406:	f7fd fe9b 	bl	8000140 <__udivsi3>
 800240a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800240c:	0002      	movs	r2, r0
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <UART_SetConfig+0x130>)
 8002410:	3a10      	subs	r2, #16
 8002412:	429a      	cmp	r2, r3
 8002414:	d807      	bhi.n	8002426 <UART_SetConfig+0xf6>
        huart->Instance->BRR = usartdiv;
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	60d8      	str	r0, [r3, #12]
 800241a:	e00c      	b.n	8002436 <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetSysClockFreq();
 800241c:	f7ff fbf4 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
        break;
 8002420:	e7c5      	b.n	80023ae <UART_SetConfig+0x7e>
        pclk = (uint32_t) HSI_VALUE;
 8002422:	480e      	ldr	r0, [pc, #56]	; (800245c <UART_SetConfig+0x12c>)
 8002424:	e7eb      	b.n	80023fe <UART_SetConfig+0xce>
    switch (clocksource)
 8002426:	2001      	movs	r0, #1
 8002428:	e006      	b.n	8002438 <UART_SetConfig+0x108>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800242a:	428b      	cmp	r3, r1
 800242c:	d1bd      	bne.n	80023aa <UART_SetConfig+0x7a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800242e:	f7ff fca1 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002432:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002434:	d1cb      	bne.n	80023ce <UART_SetConfig+0x9e>
 8002436:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002438:	2300      	movs	r3, #0
 800243a:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800243c:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800243e:	bd70      	pop	{r4, r5, r6, pc}
 8002440:	ffff69f3 	.word	0xffff69f3
 8002444:	ffffcfff 	.word	0xffffcfff
 8002448:	fffff4ff 	.word	0xfffff4ff
 800244c:	40013800 	.word	0x40013800
 8002450:	40021000 	.word	0x40021000
 8002454:	08003d55 	.word	0x08003d55
 8002458:	40004400 	.word	0x40004400
 800245c:	007a1200 	.word	0x007a1200
 8002460:	0000ffef 	.word	0x0000ffef

08002464 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002464:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002466:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002468:	07da      	lsls	r2, r3, #31
 800246a:	d506      	bpl.n	800247a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800246c:	6801      	ldr	r1, [r0, #0]
 800246e:	4c28      	ldr	r4, [pc, #160]	; (8002510 <UART_AdvFeatureConfig+0xac>)
 8002470:	684a      	ldr	r2, [r1, #4]
 8002472:	4022      	ands	r2, r4
 8002474:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002476:	4322      	orrs	r2, r4
 8002478:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800247a:	079a      	lsls	r2, r3, #30
 800247c:	d506      	bpl.n	800248c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800247e:	6801      	ldr	r1, [r0, #0]
 8002480:	4c24      	ldr	r4, [pc, #144]	; (8002514 <UART_AdvFeatureConfig+0xb0>)
 8002482:	684a      	ldr	r2, [r1, #4]
 8002484:	4022      	ands	r2, r4
 8002486:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002488:	4322      	orrs	r2, r4
 800248a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800248c:	075a      	lsls	r2, r3, #29
 800248e:	d506      	bpl.n	800249e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002490:	6801      	ldr	r1, [r0, #0]
 8002492:	4c21      	ldr	r4, [pc, #132]	; (8002518 <UART_AdvFeatureConfig+0xb4>)
 8002494:	684a      	ldr	r2, [r1, #4]
 8002496:	4022      	ands	r2, r4
 8002498:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800249a:	4322      	orrs	r2, r4
 800249c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800249e:	071a      	lsls	r2, r3, #28
 80024a0:	d506      	bpl.n	80024b0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024a2:	6801      	ldr	r1, [r0, #0]
 80024a4:	4c1d      	ldr	r4, [pc, #116]	; (800251c <UART_AdvFeatureConfig+0xb8>)
 80024a6:	684a      	ldr	r2, [r1, #4]
 80024a8:	4022      	ands	r2, r4
 80024aa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80024ac:	4322      	orrs	r2, r4
 80024ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024b0:	06da      	lsls	r2, r3, #27
 80024b2:	d506      	bpl.n	80024c2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024b4:	6801      	ldr	r1, [r0, #0]
 80024b6:	4c1a      	ldr	r4, [pc, #104]	; (8002520 <UART_AdvFeatureConfig+0xbc>)
 80024b8:	688a      	ldr	r2, [r1, #8]
 80024ba:	4022      	ands	r2, r4
 80024bc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80024be:	4322      	orrs	r2, r4
 80024c0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024c2:	069a      	lsls	r2, r3, #26
 80024c4:	d506      	bpl.n	80024d4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024c6:	6801      	ldr	r1, [r0, #0]
 80024c8:	4c16      	ldr	r4, [pc, #88]	; (8002524 <UART_AdvFeatureConfig+0xc0>)
 80024ca:	688a      	ldr	r2, [r1, #8]
 80024cc:	4022      	ands	r2, r4
 80024ce:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80024d0:	4322      	orrs	r2, r4
 80024d2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024d4:	065a      	lsls	r2, r3, #25
 80024d6:	d510      	bpl.n	80024fa <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024d8:	6801      	ldr	r1, [r0, #0]
 80024da:	4d13      	ldr	r5, [pc, #76]	; (8002528 <UART_AdvFeatureConfig+0xc4>)
 80024dc:	684a      	ldr	r2, [r1, #4]
 80024de:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80024e0:	402a      	ands	r2, r5
 80024e2:	4322      	orrs	r2, r4
 80024e4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	0352      	lsls	r2, r2, #13
 80024ea:	4294      	cmp	r4, r2
 80024ec:	d105      	bne.n	80024fa <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024ee:	684a      	ldr	r2, [r1, #4]
 80024f0:	4c0e      	ldr	r4, [pc, #56]	; (800252c <UART_AdvFeatureConfig+0xc8>)
 80024f2:	4022      	ands	r2, r4
 80024f4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80024f6:	4322      	orrs	r2, r4
 80024f8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024fa:	061b      	lsls	r3, r3, #24
 80024fc:	d506      	bpl.n	800250c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024fe:	6802      	ldr	r2, [r0, #0]
 8002500:	490b      	ldr	r1, [pc, #44]	; (8002530 <UART_AdvFeatureConfig+0xcc>)
 8002502:	6853      	ldr	r3, [r2, #4]
 8002504:	400b      	ands	r3, r1
 8002506:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002508:	430b      	orrs	r3, r1
 800250a:	6053      	str	r3, [r2, #4]
}
 800250c:	bd30      	pop	{r4, r5, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	fffdffff 	.word	0xfffdffff
 8002514:	fffeffff 	.word	0xfffeffff
 8002518:	fffbffff 	.word	0xfffbffff
 800251c:	ffff7fff 	.word	0xffff7fff
 8002520:	ffffefff 	.word	0xffffefff
 8002524:	ffffdfff 	.word	0xffffdfff
 8002528:	ffefffff 	.word	0xffefffff
 800252c:	ff9fffff 	.word	0xff9fffff
 8002530:	fff7ffff 	.word	0xfff7ffff

08002534 <UART_WaitOnFlagUntilTimeout>:
{
 8002534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002536:	2780      	movs	r7, #128	; 0x80
{
 8002538:	0004      	movs	r4, r0
 800253a:	000d      	movs	r5, r1
 800253c:	0016      	movs	r6, r2
 800253e:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002540:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002542:	6822      	ldr	r2, [r4, #0]
 8002544:	69d3      	ldr	r3, [r2, #28]
 8002546:	402b      	ands	r3, r5
 8002548:	1b5b      	subs	r3, r3, r5
 800254a:	4259      	negs	r1, r3
 800254c:	414b      	adcs	r3, r1
 800254e:	42b3      	cmp	r3, r6
 8002550:	d001      	beq.n	8002556 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8002552:	2000      	movs	r0, #0
 8002554:	e028      	b.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8002556:	9b08      	ldr	r3, [sp, #32]
 8002558:	3301      	adds	r3, #1
 800255a:	d0f3      	beq.n	8002544 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255c:	f7fe ffd2 	bl	8001504 <HAL_GetTick>
 8002560:	9b01      	ldr	r3, [sp, #4]
 8002562:	1ac0      	subs	r0, r0, r3
 8002564:	9b08      	ldr	r3, [sp, #32]
 8002566:	4298      	cmp	r0, r3
 8002568:	d801      	bhi.n	800256e <UART_WaitOnFlagUntilTimeout+0x3a>
 800256a:	2b00      	cmp	r3, #0
 800256c:	d11d      	bne.n	80025aa <UART_WaitOnFlagUntilTimeout+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800256e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002572:	2201      	movs	r2, #1
 8002574:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002578:	6821      	ldr	r1, [r4, #0]
 800257a:	4d1e      	ldr	r5, [pc, #120]	; (80025f4 <UART_WaitOnFlagUntilTimeout+0xc0>)
 800257c:	680b      	ldr	r3, [r1, #0]
 800257e:	402b      	ands	r3, r5
 8002580:	600b      	str	r3, [r1, #0]
 8002582:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002586:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800258a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800258e:	6821      	ldr	r1, [r4, #0]
 8002590:	688b      	ldr	r3, [r1, #8]
 8002592:	4393      	bics	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
 8002596:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800259a:	2320      	movs	r3, #32
 800259c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800259e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80025a0:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80025a2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80025a4:	3474      	adds	r4, #116	; 0x74
 80025a6:	7023      	strb	r3, [r4, #0]
}
 80025a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80025aa:	2104      	movs	r1, #4
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	420a      	tst	r2, r1
 80025b2:	d0c6      	beq.n	8002542 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025b4:	69da      	ldr	r2, [r3, #28]
 80025b6:	423a      	tst	r2, r7
 80025b8:	d0c3      	beq.n	8002542 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025ba:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025bc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c0:	2201      	movs	r2, #1
 80025c2:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025c6:	6821      	ldr	r1, [r4, #0]
 80025c8:	4d0a      	ldr	r5, [pc, #40]	; (80025f4 <UART_WaitOnFlagUntilTimeout+0xc0>)
 80025ca:	680b      	ldr	r3, [r1, #0]
 80025cc:	402b      	ands	r3, r5
 80025ce:	600b      	str	r3, [r1, #0]
 80025d0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025d4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d8:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025dc:	6821      	ldr	r1, [r4, #0]
 80025de:	688b      	ldr	r3, [r1, #8]
 80025e0:	4393      	bics	r3, r2
 80025e2:	608b      	str	r3, [r1, #8]
 80025e4:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80025e8:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80025ea:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 80025ec:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80025ee:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80025f0:	67d3      	str	r3, [r2, #124]	; 0x7c
 80025f2:	e7d5      	b.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x6c>
 80025f4:	fffffe5f 	.word	0xfffffe5f

080025f8 <HAL_UART_Transmit>:
{
 80025f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fa:	b087      	sub	sp, #28
 80025fc:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80025fe:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8002600:	0004      	movs	r4, r0
 8002602:	000d      	movs	r5, r1
 8002604:	0016      	movs	r6, r2
    return HAL_BUSY;
 8002606:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8002608:	2b20      	cmp	r3, #32
 800260a:	d151      	bne.n	80026b0 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 800260c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800260e:	2900      	cmp	r1, #0
 8002610:	d04e      	beq.n	80026b0 <HAL_UART_Transmit+0xb8>
 8002612:	2a00      	cmp	r2, #0
 8002614:	d04c      	beq.n	80026b0 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	68a2      	ldr	r2, [r4, #8]
 800261a:	015b      	lsls	r3, r3, #5
 800261c:	429a      	cmp	r2, r3
 800261e:	d104      	bne.n	800262a <HAL_UART_Transmit+0x32>
 8002620:	6923      	ldr	r3, [r4, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002626:	4201      	tst	r1, r0
 8002628:	d142      	bne.n	80026b0 <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 800262a:	0023      	movs	r3, r4
 800262c:	3374      	adds	r3, #116	; 0x74
 800262e:	9303      	str	r3, [sp, #12]
 8002630:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 8002632:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002634:	2b01      	cmp	r3, #1
 8002636:	d03b      	beq.n	80026b0 <HAL_UART_Transmit+0xb8>
 8002638:	2301      	movs	r3, #1
 800263a:	9a03      	ldr	r2, [sp, #12]
 800263c:	7013      	strb	r3, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263e:	2200      	movs	r2, #0
 8002640:	1d23      	adds	r3, r4, #4
 8002642:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002644:	2321      	movs	r3, #33	; 0x21
 8002646:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8002648:	f7fe ff5c 	bl	8001504 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800264c:	0023      	movs	r3, r4
 800264e:	3350      	adds	r3, #80	; 0x50
 8002650:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8002652:	3302      	adds	r3, #2
 8002654:	801e      	strh	r6, [r3, #0]
 8002656:	9304      	str	r3, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800265c:	0007      	movs	r7, r0
      pdata16bits = NULL;
 800265e:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002660:	015b      	lsls	r3, r3, #5
 8002662:	429a      	cmp	r2, r3
 8002664:	d104      	bne.n	8002670 <HAL_UART_Transmit+0x78>
 8002666:	6923      	ldr	r3, [r4, #16]
 8002668:	42b3      	cmp	r3, r6
 800266a:	d101      	bne.n	8002670 <HAL_UART_Transmit+0x78>
 800266c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800266e:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 8002670:	2300      	movs	r3, #0
 8002672:	9a03      	ldr	r2, [sp, #12]
 8002674:	7013      	strb	r3, [r2, #0]
    while (huart->TxXferCount > 0U)
 8002676:	0023      	movs	r3, r4
 8002678:	3352      	adds	r3, #82	; 0x52
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	b29a      	uxth	r2, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10b      	bne.n	800269a <HAL_UART_Transmit+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002682:	9b05      	ldr	r3, [sp, #20]
 8002684:	2140      	movs	r1, #64	; 0x40
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	0020      	movs	r0, r4
 800268a:	003b      	movs	r3, r7
 800268c:	f7ff ff52 	bl	8002534 <UART_WaitOnFlagUntilTimeout>
 8002690:	2800      	cmp	r0, #0
 8002692:	d10c      	bne.n	80026ae <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8002694:	2320      	movs	r3, #32
 8002696:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8002698:	e00a      	b.n	80026b0 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800269a:	9b05      	ldr	r3, [sp, #20]
 800269c:	2200      	movs	r2, #0
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	2180      	movs	r1, #128	; 0x80
 80026a2:	003b      	movs	r3, r7
 80026a4:	0020      	movs	r0, r4
 80026a6:	f7ff ff45 	bl	8002534 <UART_WaitOnFlagUntilTimeout>
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d002      	beq.n	80026b4 <HAL_UART_Transmit+0xbc>
        return HAL_TIMEOUT;
 80026ae:	2003      	movs	r0, #3
}
 80026b0:	b007      	add	sp, #28
 80026b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026b4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80026b6:	2d00      	cmp	r5, #0
 80026b8:	d10b      	bne.n	80026d2 <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026ba:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80026bc:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026be:	05db      	lsls	r3, r3, #23
 80026c0:	0ddb      	lsrs	r3, r3, #23
 80026c2:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80026c4:	9b04      	ldr	r3, [sp, #16]
 80026c6:	9a04      	ldr	r2, [sp, #16]
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	8013      	strh	r3, [r2, #0]
 80026d0:	e7d1      	b.n	8002676 <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026d2:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80026d4:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026d6:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata8bits++;
 80026d8:	e7f4      	b.n	80026c4 <HAL_UART_Transmit+0xcc>
	...

080026dc <UART_CheckIdleState>:
{
 80026dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026de:	2600      	movs	r6, #0
{
 80026e0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e2:	1d03      	adds	r3, r0, #4
 80026e4:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80026e6:	f7fe ff0d 	bl	8001504 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026ea:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80026ec:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	071b      	lsls	r3, r3, #28
 80026f2:	d416      	bmi.n	8002722 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	075b      	lsls	r3, r3, #29
 80026fa:	d50a      	bpl.n	8002712 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026fc:	2180      	movs	r1, #128	; 0x80
 80026fe:	4b0f      	ldr	r3, [pc, #60]	; (800273c <UART_CheckIdleState+0x60>)
 8002700:	2200      	movs	r2, #0
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	0020      	movs	r0, r4
 8002706:	002b      	movs	r3, r5
 8002708:	03c9      	lsls	r1, r1, #15
 800270a:	f7ff ff13 	bl	8002534 <UART_WaitOnFlagUntilTimeout>
 800270e:	2800      	cmp	r0, #0
 8002710:	d112      	bne.n	8002738 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8002712:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002714:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002716:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002718:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800271a:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 800271c:	3474      	adds	r4, #116	; 0x74
 800271e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002720:	e00b      	b.n	800273a <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <UART_CheckIdleState+0x60>)
 8002726:	0032      	movs	r2, r6
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	0389      	lsls	r1, r1, #14
 800272c:	0003      	movs	r3, r0
 800272e:	0020      	movs	r0, r4
 8002730:	f7ff ff00 	bl	8002534 <UART_WaitOnFlagUntilTimeout>
 8002734:	2800      	cmp	r0, #0
 8002736:	d0dd      	beq.n	80026f4 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002738:	2003      	movs	r0, #3
}
 800273a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800273c:	01ffffff 	.word	0x01ffffff

08002740 <HAL_UART_Init>:
{
 8002740:	b510      	push	{r4, lr}
 8002742:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002744:	d101      	bne.n	800274a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002746:	2001      	movs	r0, #1
}
 8002748:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800274a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800274c:	2b00      	cmp	r3, #0
 800274e:	d104      	bne.n	800275a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002750:	0002      	movs	r2, r0
 8002752:	3274      	adds	r2, #116	; 0x74
 8002754:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002756:	f7fe fdcb 	bl	80012f0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800275a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800275c:	2101      	movs	r1, #1
 800275e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002760:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002762:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002764:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002766:	438b      	bics	r3, r1
 8002768:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800276a:	f7ff fde1 	bl	8002330 <UART_SetConfig>
 800276e:	2801      	cmp	r0, #1
 8002770:	d0e9      	beq.n	8002746 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8002778:	0020      	movs	r0, r4
 800277a:	f7ff fe73 	bl	8002464 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	4907      	ldr	r1, [pc, #28]	; (80027a0 <HAL_UART_Init+0x60>)
 8002782:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002784:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002786:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002788:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800278a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	438a      	bics	r2, r1
 8002790:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002792:	2201      	movs	r2, #1
 8002794:	6819      	ldr	r1, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800279a:	f7ff ff9f 	bl	80026dc <UART_CheckIdleState>
 800279e:	e7d3      	b.n	8002748 <HAL_UART_Init+0x8>
 80027a0:	ffffb7ff 	.word	0xffffb7ff

080027a4 <UART_Start_Receive_IT>:
{
 80027a4:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 80027a6:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 80027a8:	0001      	movs	r1, r0
{
 80027aa:	0003      	movs	r3, r0
  huart->RxXferSize  = Size;
 80027ac:	3158      	adds	r1, #88	; 0x58
 80027ae:	800a      	strh	r2, [r1, #0]
  huart->RxXferCount = Size;
 80027b0:	804a      	strh	r2, [r1, #2]
  huart->RxISR       = NULL;
 80027b2:	2100      	movs	r1, #0
  UART_MASK_COMPUTATION(huart);
 80027b4:	2480      	movs	r4, #128	; 0x80
 80027b6:	001a      	movs	r2, r3
  huart->RxISR       = NULL;
 80027b8:	6641      	str	r1, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 80027ba:	6880      	ldr	r0, [r0, #8]
 80027bc:	0164      	lsls	r4, r4, #5
 80027be:	325c      	adds	r2, #92	; 0x5c
 80027c0:	42a0      	cmp	r0, r4
 80027c2:	d133      	bne.n	800282c <UART_Start_Receive_IT+0x88>
 80027c4:	6919      	ldr	r1, [r3, #16]
 80027c6:	2900      	cmp	r1, #0
 80027c8:	d12e      	bne.n	8002828 <UART_Start_Receive_IT+0x84>
 80027ca:	491c      	ldr	r1, [pc, #112]	; (800283c <UART_Start_Receive_IT+0x98>)
 80027cc:	8011      	strh	r1, [r2, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ce:	2100      	movs	r1, #0
 80027d0:	1d1a      	adds	r2, r3, #4
 80027d2:	67d1      	str	r1, [r2, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027d4:	2222      	movs	r2, #34	; 0x22
 80027d6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027dc:	3a21      	subs	r2, #33	; 0x21
 80027de:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e2:	6819      	ldr	r1, [r3, #0]
 80027e4:	688c      	ldr	r4, [r1, #8]
 80027e6:	4322      	orrs	r2, r4
 80027e8:	608a      	str	r2, [r1, #8]
 80027ea:	f380 8810 	msr	PRIMASK, r0
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ee:	2180      	movs	r1, #128	; 0x80
 80027f0:	6898      	ldr	r0, [r3, #8]
    huart->RxISR = UART_RxISR_8BIT;
 80027f2:	4a13      	ldr	r2, [pc, #76]	; (8002840 <UART_Start_Receive_IT+0x9c>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f4:	0149      	lsls	r1, r1, #5
 80027f6:	4288      	cmp	r0, r1
 80027f8:	d103      	bne.n	8002802 <UART_Start_Receive_IT+0x5e>
 80027fa:	6919      	ldr	r1, [r3, #16]
 80027fc:	2900      	cmp	r1, #0
 80027fe:	d100      	bne.n	8002802 <UART_Start_Receive_IT+0x5e>
    huart->RxISR = UART_RxISR_16BIT;
 8002800:	4a10      	ldr	r2, [pc, #64]	; (8002844 <UART_Start_Receive_IT+0xa0>)
 8002802:	665a      	str	r2, [r3, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8002804:	001a      	movs	r2, r3
 8002806:	2000      	movs	r0, #0
 8002808:	3274      	adds	r2, #116	; 0x74
 800280a:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800280c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002810:	2201      	movs	r2, #1
 8002812:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	2390      	movs	r3, #144	; 0x90
 800281a:	6814      	ldr	r4, [r2, #0]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4323      	orrs	r3, r4
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	f381 8810 	msr	PRIMASK, r1
}
 8002826:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8002828:	21ff      	movs	r1, #255	; 0xff
 800282a:	e7cf      	b.n	80027cc <UART_Start_Receive_IT+0x28>
 800282c:	2800      	cmp	r0, #0
 800282e:	d1cd      	bne.n	80027cc <UART_Start_Receive_IT+0x28>
 8002830:	6919      	ldr	r1, [r3, #16]
 8002832:	2900      	cmp	r1, #0
 8002834:	d0f8      	beq.n	8002828 <UART_Start_Receive_IT+0x84>
 8002836:	217f      	movs	r1, #127	; 0x7f
 8002838:	e7c8      	b.n	80027cc <UART_Start_Receive_IT+0x28>
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	000001ff 	.word	0x000001ff
 8002840:	080021d9 	.word	0x080021d9
 8002844:	08002285 	.word	0x08002285

08002848 <HAL_UART_Receive_IT>:
{
 8002848:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800284a:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 800284c:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800284e:	2c20      	cmp	r4, #32
 8002850:	d12d      	bne.n	80028ae <HAL_UART_Receive_IT+0x66>
      return HAL_ERROR;
 8002852:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8002854:	2900      	cmp	r1, #0
 8002856:	d02a      	beq.n	80028ae <HAL_UART_Receive_IT+0x66>
 8002858:	2a00      	cmp	r2, #0
 800285a:	d028      	beq.n	80028ae <HAL_UART_Receive_IT+0x66>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	6884      	ldr	r4, [r0, #8]
 8002860:	015b      	lsls	r3, r3, #5
 8002862:	429c      	cmp	r4, r3
 8002864:	d106      	bne.n	8002874 <HAL_UART_Receive_IT+0x2c>
 8002866:	6903      	ldr	r3, [r0, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d103      	bne.n	8002874 <HAL_UART_Receive_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 800286c:	2401      	movs	r4, #1
      return HAL_ERROR;
 800286e:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8002870:	4221      	tst	r1, r4
 8002872:	d11c      	bne.n	80028ae <HAL_UART_Receive_IT+0x66>
    __HAL_LOCK(huart);
 8002874:	0004      	movs	r4, r0
 8002876:	3474      	adds	r4, #116	; 0x74
 8002878:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 800287a:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 800287c:	2d01      	cmp	r5, #1
 800287e:	d016      	beq.n	80028ae <HAL_UART_Receive_IT+0x66>
 8002880:	3b01      	subs	r3, #1
 8002882:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002884:	2400      	movs	r4, #0
 8002886:	6604      	str	r4, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002888:	6804      	ldr	r4, [r0, #0]
 800288a:	6864      	ldr	r4, [r4, #4]
 800288c:	0224      	lsls	r4, r4, #8
 800288e:	d50b      	bpl.n	80028a8 <HAL_UART_Receive_IT+0x60>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002890:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002894:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	6804      	ldr	r4, [r0, #0]
 800289c:	04db      	lsls	r3, r3, #19
 800289e:	6826      	ldr	r6, [r4, #0]
 80028a0:	4333      	orrs	r3, r6
 80028a2:	6023      	str	r3, [r4, #0]
 80028a4:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 80028a8:	f7ff ff7c 	bl	80027a4 <UART_Start_Receive_IT>
 80028ac:	0003      	movs	r3, r0
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	bd70      	pop	{r4, r5, r6, pc}

080028b2 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80028b2:	4770      	bx	lr

080028b4 <__errno>:
 80028b4:	4b01      	ldr	r3, [pc, #4]	; (80028bc <__errno+0x8>)
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	4770      	bx	lr
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	20000020 	.word	0x20000020

080028c0 <__libc_init_array>:
 80028c0:	b570      	push	{r4, r5, r6, lr}
 80028c2:	2600      	movs	r6, #0
 80028c4:	4d0c      	ldr	r5, [pc, #48]	; (80028f8 <__libc_init_array+0x38>)
 80028c6:	4c0d      	ldr	r4, [pc, #52]	; (80028fc <__libc_init_array+0x3c>)
 80028c8:	1b64      	subs	r4, r4, r5
 80028ca:	10a4      	asrs	r4, r4, #2
 80028cc:	42a6      	cmp	r6, r4
 80028ce:	d109      	bne.n	80028e4 <__libc_init_array+0x24>
 80028d0:	2600      	movs	r6, #0
 80028d2:	f000 fc99 	bl	8003208 <_init>
 80028d6:	4d0a      	ldr	r5, [pc, #40]	; (8002900 <__libc_init_array+0x40>)
 80028d8:	4c0a      	ldr	r4, [pc, #40]	; (8002904 <__libc_init_array+0x44>)
 80028da:	1b64      	subs	r4, r4, r5
 80028dc:	10a4      	asrs	r4, r4, #2
 80028de:	42a6      	cmp	r6, r4
 80028e0:	d105      	bne.n	80028ee <__libc_init_array+0x2e>
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
 80028e4:	00b3      	lsls	r3, r6, #2
 80028e6:	58eb      	ldr	r3, [r5, r3]
 80028e8:	4798      	blx	r3
 80028ea:	3601      	adds	r6, #1
 80028ec:	e7ee      	b.n	80028cc <__libc_init_array+0xc>
 80028ee:	00b3      	lsls	r3, r6, #2
 80028f0:	58eb      	ldr	r3, [r5, r3]
 80028f2:	4798      	blx	r3
 80028f4:	3601      	adds	r6, #1
 80028f6:	e7f2      	b.n	80028de <__libc_init_array+0x1e>
 80028f8:	08003d8c 	.word	0x08003d8c
 80028fc:	08003d8c 	.word	0x08003d8c
 8002900:	08003d8c 	.word	0x08003d8c
 8002904:	08003d90 	.word	0x08003d90

08002908 <memcpy>:
 8002908:	2300      	movs	r3, #0
 800290a:	b510      	push	{r4, lr}
 800290c:	429a      	cmp	r2, r3
 800290e:	d100      	bne.n	8002912 <memcpy+0xa>
 8002910:	bd10      	pop	{r4, pc}
 8002912:	5ccc      	ldrb	r4, [r1, r3]
 8002914:	54c4      	strb	r4, [r0, r3]
 8002916:	3301      	adds	r3, #1
 8002918:	e7f8      	b.n	800290c <memcpy+0x4>

0800291a <memset>:
 800291a:	0003      	movs	r3, r0
 800291c:	1882      	adds	r2, r0, r2
 800291e:	4293      	cmp	r3, r2
 8002920:	d100      	bne.n	8002924 <memset+0xa>
 8002922:	4770      	bx	lr
 8002924:	7019      	strb	r1, [r3, #0]
 8002926:	3301      	adds	r3, #1
 8002928:	e7f9      	b.n	800291e <memset+0x4>
	...

0800292c <siprintf>:
 800292c:	b40e      	push	{r1, r2, r3}
 800292e:	b500      	push	{lr}
 8002930:	490b      	ldr	r1, [pc, #44]	; (8002960 <siprintf+0x34>)
 8002932:	b09c      	sub	sp, #112	; 0x70
 8002934:	ab1d      	add	r3, sp, #116	; 0x74
 8002936:	9002      	str	r0, [sp, #8]
 8002938:	9006      	str	r0, [sp, #24]
 800293a:	9107      	str	r1, [sp, #28]
 800293c:	9104      	str	r1, [sp, #16]
 800293e:	4809      	ldr	r0, [pc, #36]	; (8002964 <siprintf+0x38>)
 8002940:	4909      	ldr	r1, [pc, #36]	; (8002968 <siprintf+0x3c>)
 8002942:	cb04      	ldmia	r3!, {r2}
 8002944:	9105      	str	r1, [sp, #20]
 8002946:	6800      	ldr	r0, [r0, #0]
 8002948:	a902      	add	r1, sp, #8
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	f000 f87e 	bl	8002a4c <_svfiprintf_r>
 8002950:	2300      	movs	r3, #0
 8002952:	9a02      	ldr	r2, [sp, #8]
 8002954:	7013      	strb	r3, [r2, #0]
 8002956:	b01c      	add	sp, #112	; 0x70
 8002958:	bc08      	pop	{r3}
 800295a:	b003      	add	sp, #12
 800295c:	4718      	bx	r3
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	7fffffff 	.word	0x7fffffff
 8002964:	20000020 	.word	0x20000020
 8002968:	ffff0208 	.word	0xffff0208

0800296c <strcat>:
 800296c:	0002      	movs	r2, r0
 800296e:	b510      	push	{r4, lr}
 8002970:	7813      	ldrb	r3, [r2, #0]
 8002972:	0014      	movs	r4, r2
 8002974:	3201      	adds	r2, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1fa      	bne.n	8002970 <strcat+0x4>
 800297a:	5cca      	ldrb	r2, [r1, r3]
 800297c:	54e2      	strb	r2, [r4, r3]
 800297e:	3301      	adds	r3, #1
 8002980:	2a00      	cmp	r2, #0
 8002982:	d1fa      	bne.n	800297a <strcat+0xe>
 8002984:	bd10      	pop	{r4, pc}
	...

08002988 <__ssputs_r>:
 8002988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298a:	688e      	ldr	r6, [r1, #8]
 800298c:	b085      	sub	sp, #20
 800298e:	0007      	movs	r7, r0
 8002990:	000c      	movs	r4, r1
 8002992:	9203      	str	r2, [sp, #12]
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	429e      	cmp	r6, r3
 8002998:	d83c      	bhi.n	8002a14 <__ssputs_r+0x8c>
 800299a:	2390      	movs	r3, #144	; 0x90
 800299c:	898a      	ldrh	r2, [r1, #12]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	421a      	tst	r2, r3
 80029a2:	d034      	beq.n	8002a0e <__ssputs_r+0x86>
 80029a4:	6909      	ldr	r1, [r1, #16]
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	6960      	ldr	r0, [r4, #20]
 80029aa:	1a5b      	subs	r3, r3, r1
 80029ac:	9302      	str	r3, [sp, #8]
 80029ae:	2303      	movs	r3, #3
 80029b0:	4343      	muls	r3, r0
 80029b2:	0fdd      	lsrs	r5, r3, #31
 80029b4:	18ed      	adds	r5, r5, r3
 80029b6:	9b01      	ldr	r3, [sp, #4]
 80029b8:	9802      	ldr	r0, [sp, #8]
 80029ba:	3301      	adds	r3, #1
 80029bc:	181b      	adds	r3, r3, r0
 80029be:	106d      	asrs	r5, r5, #1
 80029c0:	42ab      	cmp	r3, r5
 80029c2:	d900      	bls.n	80029c6 <__ssputs_r+0x3e>
 80029c4:	001d      	movs	r5, r3
 80029c6:	0553      	lsls	r3, r2, #21
 80029c8:	d532      	bpl.n	8002a30 <__ssputs_r+0xa8>
 80029ca:	0029      	movs	r1, r5
 80029cc:	0038      	movs	r0, r7
 80029ce:	f000 fb49 	bl	8003064 <_malloc_r>
 80029d2:	1e06      	subs	r6, r0, #0
 80029d4:	d109      	bne.n	80029ea <__ssputs_r+0x62>
 80029d6:	230c      	movs	r3, #12
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	2340      	movs	r3, #64	; 0x40
 80029dc:	2001      	movs	r0, #1
 80029de:	89a2      	ldrh	r2, [r4, #12]
 80029e0:	4240      	negs	r0, r0
 80029e2:	4313      	orrs	r3, r2
 80029e4:	81a3      	strh	r3, [r4, #12]
 80029e6:	b005      	add	sp, #20
 80029e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ea:	9a02      	ldr	r2, [sp, #8]
 80029ec:	6921      	ldr	r1, [r4, #16]
 80029ee:	f7ff ff8b 	bl	8002908 <memcpy>
 80029f2:	89a3      	ldrh	r3, [r4, #12]
 80029f4:	4a14      	ldr	r2, [pc, #80]	; (8002a48 <__ssputs_r+0xc0>)
 80029f6:	401a      	ands	r2, r3
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	4313      	orrs	r3, r2
 80029fc:	81a3      	strh	r3, [r4, #12]
 80029fe:	9b02      	ldr	r3, [sp, #8]
 8002a00:	6126      	str	r6, [r4, #16]
 8002a02:	18f6      	adds	r6, r6, r3
 8002a04:	6026      	str	r6, [r4, #0]
 8002a06:	6165      	str	r5, [r4, #20]
 8002a08:	9e01      	ldr	r6, [sp, #4]
 8002a0a:	1aed      	subs	r5, r5, r3
 8002a0c:	60a5      	str	r5, [r4, #8]
 8002a0e:	9b01      	ldr	r3, [sp, #4]
 8002a10:	429e      	cmp	r6, r3
 8002a12:	d900      	bls.n	8002a16 <__ssputs_r+0x8e>
 8002a14:	9e01      	ldr	r6, [sp, #4]
 8002a16:	0032      	movs	r2, r6
 8002a18:	9903      	ldr	r1, [sp, #12]
 8002a1a:	6820      	ldr	r0, [r4, #0]
 8002a1c:	f000 faa3 	bl	8002f66 <memmove>
 8002a20:	68a3      	ldr	r3, [r4, #8]
 8002a22:	2000      	movs	r0, #0
 8002a24:	1b9b      	subs	r3, r3, r6
 8002a26:	60a3      	str	r3, [r4, #8]
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	199e      	adds	r6, r3, r6
 8002a2c:	6026      	str	r6, [r4, #0]
 8002a2e:	e7da      	b.n	80029e6 <__ssputs_r+0x5e>
 8002a30:	002a      	movs	r2, r5
 8002a32:	0038      	movs	r0, r7
 8002a34:	f000 fb8c 	bl	8003150 <_realloc_r>
 8002a38:	1e06      	subs	r6, r0, #0
 8002a3a:	d1e0      	bne.n	80029fe <__ssputs_r+0x76>
 8002a3c:	0038      	movs	r0, r7
 8002a3e:	6921      	ldr	r1, [r4, #16]
 8002a40:	f000 faa4 	bl	8002f8c <_free_r>
 8002a44:	e7c7      	b.n	80029d6 <__ssputs_r+0x4e>
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	fffffb7f 	.word	0xfffffb7f

08002a4c <_svfiprintf_r>:
 8002a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a4e:	b0a1      	sub	sp, #132	; 0x84
 8002a50:	9003      	str	r0, [sp, #12]
 8002a52:	001d      	movs	r5, r3
 8002a54:	898b      	ldrh	r3, [r1, #12]
 8002a56:	000f      	movs	r7, r1
 8002a58:	0016      	movs	r6, r2
 8002a5a:	061b      	lsls	r3, r3, #24
 8002a5c:	d511      	bpl.n	8002a82 <_svfiprintf_r+0x36>
 8002a5e:	690b      	ldr	r3, [r1, #16]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10e      	bne.n	8002a82 <_svfiprintf_r+0x36>
 8002a64:	2140      	movs	r1, #64	; 0x40
 8002a66:	f000 fafd 	bl	8003064 <_malloc_r>
 8002a6a:	6038      	str	r0, [r7, #0]
 8002a6c:	6138      	str	r0, [r7, #16]
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d105      	bne.n	8002a7e <_svfiprintf_r+0x32>
 8002a72:	230c      	movs	r3, #12
 8002a74:	9a03      	ldr	r2, [sp, #12]
 8002a76:	3801      	subs	r0, #1
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	b021      	add	sp, #132	; 0x84
 8002a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a7e:	2340      	movs	r3, #64	; 0x40
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	2300      	movs	r3, #0
 8002a84:	ac08      	add	r4, sp, #32
 8002a86:	6163      	str	r3, [r4, #20]
 8002a88:	3320      	adds	r3, #32
 8002a8a:	7663      	strb	r3, [r4, #25]
 8002a8c:	3310      	adds	r3, #16
 8002a8e:	76a3      	strb	r3, [r4, #26]
 8002a90:	9507      	str	r5, [sp, #28]
 8002a92:	0035      	movs	r5, r6
 8002a94:	782b      	ldrb	r3, [r5, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <_svfiprintf_r+0x52>
 8002a9a:	2b25      	cmp	r3, #37	; 0x25
 8002a9c:	d147      	bne.n	8002b2e <_svfiprintf_r+0xe2>
 8002a9e:	1bab      	subs	r3, r5, r6
 8002aa0:	9305      	str	r3, [sp, #20]
 8002aa2:	42b5      	cmp	r5, r6
 8002aa4:	d00c      	beq.n	8002ac0 <_svfiprintf_r+0x74>
 8002aa6:	0032      	movs	r2, r6
 8002aa8:	0039      	movs	r1, r7
 8002aaa:	9803      	ldr	r0, [sp, #12]
 8002aac:	f7ff ff6c 	bl	8002988 <__ssputs_r>
 8002ab0:	1c43      	adds	r3, r0, #1
 8002ab2:	d100      	bne.n	8002ab6 <_svfiprintf_r+0x6a>
 8002ab4:	e0ae      	b.n	8002c14 <_svfiprintf_r+0x1c8>
 8002ab6:	6962      	ldr	r2, [r4, #20]
 8002ab8:	9b05      	ldr	r3, [sp, #20]
 8002aba:	4694      	mov	ip, r2
 8002abc:	4463      	add	r3, ip
 8002abe:	6163      	str	r3, [r4, #20]
 8002ac0:	782b      	ldrb	r3, [r5, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d100      	bne.n	8002ac8 <_svfiprintf_r+0x7c>
 8002ac6:	e0a5      	b.n	8002c14 <_svfiprintf_r+0x1c8>
 8002ac8:	2201      	movs	r2, #1
 8002aca:	2300      	movs	r3, #0
 8002acc:	4252      	negs	r2, r2
 8002ace:	6062      	str	r2, [r4, #4]
 8002ad0:	a904      	add	r1, sp, #16
 8002ad2:	3254      	adds	r2, #84	; 0x54
 8002ad4:	1852      	adds	r2, r2, r1
 8002ad6:	1c6e      	adds	r6, r5, #1
 8002ad8:	6023      	str	r3, [r4, #0]
 8002ada:	60e3      	str	r3, [r4, #12]
 8002adc:	60a3      	str	r3, [r4, #8]
 8002ade:	7013      	strb	r3, [r2, #0]
 8002ae0:	65a3      	str	r3, [r4, #88]	; 0x58
 8002ae2:	2205      	movs	r2, #5
 8002ae4:	7831      	ldrb	r1, [r6, #0]
 8002ae6:	4854      	ldr	r0, [pc, #336]	; (8002c38 <_svfiprintf_r+0x1ec>)
 8002ae8:	f000 fa32 	bl	8002f50 <memchr>
 8002aec:	1c75      	adds	r5, r6, #1
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d11f      	bne.n	8002b32 <_svfiprintf_r+0xe6>
 8002af2:	6822      	ldr	r2, [r4, #0]
 8002af4:	06d3      	lsls	r3, r2, #27
 8002af6:	d504      	bpl.n	8002b02 <_svfiprintf_r+0xb6>
 8002af8:	2353      	movs	r3, #83	; 0x53
 8002afa:	a904      	add	r1, sp, #16
 8002afc:	185b      	adds	r3, r3, r1
 8002afe:	2120      	movs	r1, #32
 8002b00:	7019      	strb	r1, [r3, #0]
 8002b02:	0713      	lsls	r3, r2, #28
 8002b04:	d504      	bpl.n	8002b10 <_svfiprintf_r+0xc4>
 8002b06:	2353      	movs	r3, #83	; 0x53
 8002b08:	a904      	add	r1, sp, #16
 8002b0a:	185b      	adds	r3, r3, r1
 8002b0c:	212b      	movs	r1, #43	; 0x2b
 8002b0e:	7019      	strb	r1, [r3, #0]
 8002b10:	7833      	ldrb	r3, [r6, #0]
 8002b12:	2b2a      	cmp	r3, #42	; 0x2a
 8002b14:	d016      	beq.n	8002b44 <_svfiprintf_r+0xf8>
 8002b16:	0035      	movs	r5, r6
 8002b18:	2100      	movs	r1, #0
 8002b1a:	200a      	movs	r0, #10
 8002b1c:	68e3      	ldr	r3, [r4, #12]
 8002b1e:	782a      	ldrb	r2, [r5, #0]
 8002b20:	1c6e      	adds	r6, r5, #1
 8002b22:	3a30      	subs	r2, #48	; 0x30
 8002b24:	2a09      	cmp	r2, #9
 8002b26:	d94e      	bls.n	8002bc6 <_svfiprintf_r+0x17a>
 8002b28:	2900      	cmp	r1, #0
 8002b2a:	d111      	bne.n	8002b50 <_svfiprintf_r+0x104>
 8002b2c:	e017      	b.n	8002b5e <_svfiprintf_r+0x112>
 8002b2e:	3501      	adds	r5, #1
 8002b30:	e7b0      	b.n	8002a94 <_svfiprintf_r+0x48>
 8002b32:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <_svfiprintf_r+0x1ec>)
 8002b34:	6822      	ldr	r2, [r4, #0]
 8002b36:	1ac0      	subs	r0, r0, r3
 8002b38:	2301      	movs	r3, #1
 8002b3a:	4083      	lsls	r3, r0
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	002e      	movs	r6, r5
 8002b40:	6023      	str	r3, [r4, #0]
 8002b42:	e7ce      	b.n	8002ae2 <_svfiprintf_r+0x96>
 8002b44:	9b07      	ldr	r3, [sp, #28]
 8002b46:	1d19      	adds	r1, r3, #4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	9107      	str	r1, [sp, #28]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	db01      	blt.n	8002b54 <_svfiprintf_r+0x108>
 8002b50:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b52:	e004      	b.n	8002b5e <_svfiprintf_r+0x112>
 8002b54:	425b      	negs	r3, r3
 8002b56:	60e3      	str	r3, [r4, #12]
 8002b58:	2302      	movs	r3, #2
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	6023      	str	r3, [r4, #0]
 8002b5e:	782b      	ldrb	r3, [r5, #0]
 8002b60:	2b2e      	cmp	r3, #46	; 0x2e
 8002b62:	d10a      	bne.n	8002b7a <_svfiprintf_r+0x12e>
 8002b64:	786b      	ldrb	r3, [r5, #1]
 8002b66:	2b2a      	cmp	r3, #42	; 0x2a
 8002b68:	d135      	bne.n	8002bd6 <_svfiprintf_r+0x18a>
 8002b6a:	9b07      	ldr	r3, [sp, #28]
 8002b6c:	3502      	adds	r5, #2
 8002b6e:	1d1a      	adds	r2, r3, #4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	9207      	str	r2, [sp, #28]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	db2b      	blt.n	8002bd0 <_svfiprintf_r+0x184>
 8002b78:	9309      	str	r3, [sp, #36]	; 0x24
 8002b7a:	4e30      	ldr	r6, [pc, #192]	; (8002c3c <_svfiprintf_r+0x1f0>)
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	0030      	movs	r0, r6
 8002b80:	7829      	ldrb	r1, [r5, #0]
 8002b82:	f000 f9e5 	bl	8002f50 <memchr>
 8002b86:	2800      	cmp	r0, #0
 8002b88:	d006      	beq.n	8002b98 <_svfiprintf_r+0x14c>
 8002b8a:	2340      	movs	r3, #64	; 0x40
 8002b8c:	1b80      	subs	r0, r0, r6
 8002b8e:	4083      	lsls	r3, r0
 8002b90:	6822      	ldr	r2, [r4, #0]
 8002b92:	3501      	adds	r5, #1
 8002b94:	4313      	orrs	r3, r2
 8002b96:	6023      	str	r3, [r4, #0]
 8002b98:	7829      	ldrb	r1, [r5, #0]
 8002b9a:	2206      	movs	r2, #6
 8002b9c:	4828      	ldr	r0, [pc, #160]	; (8002c40 <_svfiprintf_r+0x1f4>)
 8002b9e:	1c6e      	adds	r6, r5, #1
 8002ba0:	7621      	strb	r1, [r4, #24]
 8002ba2:	f000 f9d5 	bl	8002f50 <memchr>
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	d03c      	beq.n	8002c24 <_svfiprintf_r+0x1d8>
 8002baa:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <_svfiprintf_r+0x1f8>)
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d125      	bne.n	8002bfc <_svfiprintf_r+0x1b0>
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	9b07      	ldr	r3, [sp, #28]
 8002bb4:	3307      	adds	r3, #7
 8002bb6:	4393      	bics	r3, r2
 8002bb8:	3308      	adds	r3, #8
 8002bba:	9307      	str	r3, [sp, #28]
 8002bbc:	6963      	ldr	r3, [r4, #20]
 8002bbe:	9a04      	ldr	r2, [sp, #16]
 8002bc0:	189b      	adds	r3, r3, r2
 8002bc2:	6163      	str	r3, [r4, #20]
 8002bc4:	e765      	b.n	8002a92 <_svfiprintf_r+0x46>
 8002bc6:	4343      	muls	r3, r0
 8002bc8:	0035      	movs	r5, r6
 8002bca:	2101      	movs	r1, #1
 8002bcc:	189b      	adds	r3, r3, r2
 8002bce:	e7a6      	b.n	8002b1e <_svfiprintf_r+0xd2>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	425b      	negs	r3, r3
 8002bd4:	e7d0      	b.n	8002b78 <_svfiprintf_r+0x12c>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	200a      	movs	r0, #10
 8002bda:	001a      	movs	r2, r3
 8002bdc:	3501      	adds	r5, #1
 8002bde:	6063      	str	r3, [r4, #4]
 8002be0:	7829      	ldrb	r1, [r5, #0]
 8002be2:	1c6e      	adds	r6, r5, #1
 8002be4:	3930      	subs	r1, #48	; 0x30
 8002be6:	2909      	cmp	r1, #9
 8002be8:	d903      	bls.n	8002bf2 <_svfiprintf_r+0x1a6>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0c5      	beq.n	8002b7a <_svfiprintf_r+0x12e>
 8002bee:	9209      	str	r2, [sp, #36]	; 0x24
 8002bf0:	e7c3      	b.n	8002b7a <_svfiprintf_r+0x12e>
 8002bf2:	4342      	muls	r2, r0
 8002bf4:	0035      	movs	r5, r6
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	1852      	adds	r2, r2, r1
 8002bfa:	e7f1      	b.n	8002be0 <_svfiprintf_r+0x194>
 8002bfc:	ab07      	add	r3, sp, #28
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	003a      	movs	r2, r7
 8002c02:	0021      	movs	r1, r4
 8002c04:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <_svfiprintf_r+0x1fc>)
 8002c06:	9803      	ldr	r0, [sp, #12]
 8002c08:	e000      	b.n	8002c0c <_svfiprintf_r+0x1c0>
 8002c0a:	bf00      	nop
 8002c0c:	9004      	str	r0, [sp, #16]
 8002c0e:	9b04      	ldr	r3, [sp, #16]
 8002c10:	3301      	adds	r3, #1
 8002c12:	d1d3      	bne.n	8002bbc <_svfiprintf_r+0x170>
 8002c14:	89bb      	ldrh	r3, [r7, #12]
 8002c16:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002c18:	065b      	lsls	r3, r3, #25
 8002c1a:	d400      	bmi.n	8002c1e <_svfiprintf_r+0x1d2>
 8002c1c:	e72d      	b.n	8002a7a <_svfiprintf_r+0x2e>
 8002c1e:	2001      	movs	r0, #1
 8002c20:	4240      	negs	r0, r0
 8002c22:	e72a      	b.n	8002a7a <_svfiprintf_r+0x2e>
 8002c24:	ab07      	add	r3, sp, #28
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	003a      	movs	r2, r7
 8002c2a:	0021      	movs	r1, r4
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <_svfiprintf_r+0x1fc>)
 8002c2e:	9803      	ldr	r0, [sp, #12]
 8002c30:	f000 f87c 	bl	8002d2c <_printf_i>
 8002c34:	e7ea      	b.n	8002c0c <_svfiprintf_r+0x1c0>
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	08003d58 	.word	0x08003d58
 8002c3c:	08003d5e 	.word	0x08003d5e
 8002c40:	08003d62 	.word	0x08003d62
 8002c44:	00000000 	.word	0x00000000
 8002c48:	08002989 	.word	0x08002989

08002c4c <_printf_common>:
 8002c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c4e:	0015      	movs	r5, r2
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	688a      	ldr	r2, [r1, #8]
 8002c54:	690b      	ldr	r3, [r1, #16]
 8002c56:	000c      	movs	r4, r1
 8002c58:	9000      	str	r0, [sp, #0]
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	da00      	bge.n	8002c60 <_printf_common+0x14>
 8002c5e:	0013      	movs	r3, r2
 8002c60:	0022      	movs	r2, r4
 8002c62:	602b      	str	r3, [r5, #0]
 8002c64:	3243      	adds	r2, #67	; 0x43
 8002c66:	7812      	ldrb	r2, [r2, #0]
 8002c68:	2a00      	cmp	r2, #0
 8002c6a:	d001      	beq.n	8002c70 <_printf_common+0x24>
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	602b      	str	r3, [r5, #0]
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	069b      	lsls	r3, r3, #26
 8002c74:	d502      	bpl.n	8002c7c <_printf_common+0x30>
 8002c76:	682b      	ldr	r3, [r5, #0]
 8002c78:	3302      	adds	r3, #2
 8002c7a:	602b      	str	r3, [r5, #0]
 8002c7c:	6822      	ldr	r2, [r4, #0]
 8002c7e:	2306      	movs	r3, #6
 8002c80:	0017      	movs	r7, r2
 8002c82:	401f      	ands	r7, r3
 8002c84:	421a      	tst	r2, r3
 8002c86:	d027      	beq.n	8002cd8 <_printf_common+0x8c>
 8002c88:	0023      	movs	r3, r4
 8002c8a:	3343      	adds	r3, #67	; 0x43
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	1e5a      	subs	r2, r3, #1
 8002c90:	4193      	sbcs	r3, r2
 8002c92:	6822      	ldr	r2, [r4, #0]
 8002c94:	0692      	lsls	r2, r2, #26
 8002c96:	d430      	bmi.n	8002cfa <_printf_common+0xae>
 8002c98:	0022      	movs	r2, r4
 8002c9a:	9901      	ldr	r1, [sp, #4]
 8002c9c:	9800      	ldr	r0, [sp, #0]
 8002c9e:	9e08      	ldr	r6, [sp, #32]
 8002ca0:	3243      	adds	r2, #67	; 0x43
 8002ca2:	47b0      	blx	r6
 8002ca4:	1c43      	adds	r3, r0, #1
 8002ca6:	d025      	beq.n	8002cf4 <_printf_common+0xa8>
 8002ca8:	2306      	movs	r3, #6
 8002caa:	6820      	ldr	r0, [r4, #0]
 8002cac:	682a      	ldr	r2, [r5, #0]
 8002cae:	68e1      	ldr	r1, [r4, #12]
 8002cb0:	2500      	movs	r5, #0
 8002cb2:	4003      	ands	r3, r0
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d103      	bne.n	8002cc0 <_printf_common+0x74>
 8002cb8:	1a8d      	subs	r5, r1, r2
 8002cba:	43eb      	mvns	r3, r5
 8002cbc:	17db      	asrs	r3, r3, #31
 8002cbe:	401d      	ands	r5, r3
 8002cc0:	68a3      	ldr	r3, [r4, #8]
 8002cc2:	6922      	ldr	r2, [r4, #16]
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	dd01      	ble.n	8002ccc <_printf_common+0x80>
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	18ed      	adds	r5, r5, r3
 8002ccc:	2700      	movs	r7, #0
 8002cce:	42bd      	cmp	r5, r7
 8002cd0:	d120      	bne.n	8002d14 <_printf_common+0xc8>
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	e010      	b.n	8002cf8 <_printf_common+0xac>
 8002cd6:	3701      	adds	r7, #1
 8002cd8:	68e3      	ldr	r3, [r4, #12]
 8002cda:	682a      	ldr	r2, [r5, #0]
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	42bb      	cmp	r3, r7
 8002ce0:	ddd2      	ble.n	8002c88 <_printf_common+0x3c>
 8002ce2:	0022      	movs	r2, r4
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	9901      	ldr	r1, [sp, #4]
 8002ce8:	9800      	ldr	r0, [sp, #0]
 8002cea:	9e08      	ldr	r6, [sp, #32]
 8002cec:	3219      	adds	r2, #25
 8002cee:	47b0      	blx	r6
 8002cf0:	1c43      	adds	r3, r0, #1
 8002cf2:	d1f0      	bne.n	8002cd6 <_printf_common+0x8a>
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	4240      	negs	r0, r0
 8002cf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002cfa:	2030      	movs	r0, #48	; 0x30
 8002cfc:	18e1      	adds	r1, r4, r3
 8002cfe:	3143      	adds	r1, #67	; 0x43
 8002d00:	7008      	strb	r0, [r1, #0]
 8002d02:	0021      	movs	r1, r4
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	3145      	adds	r1, #69	; 0x45
 8002d08:	7809      	ldrb	r1, [r1, #0]
 8002d0a:	18a2      	adds	r2, r4, r2
 8002d0c:	3243      	adds	r2, #67	; 0x43
 8002d0e:	3302      	adds	r3, #2
 8002d10:	7011      	strb	r1, [r2, #0]
 8002d12:	e7c1      	b.n	8002c98 <_printf_common+0x4c>
 8002d14:	0022      	movs	r2, r4
 8002d16:	2301      	movs	r3, #1
 8002d18:	9901      	ldr	r1, [sp, #4]
 8002d1a:	9800      	ldr	r0, [sp, #0]
 8002d1c:	9e08      	ldr	r6, [sp, #32]
 8002d1e:	321a      	adds	r2, #26
 8002d20:	47b0      	blx	r6
 8002d22:	1c43      	adds	r3, r0, #1
 8002d24:	d0e6      	beq.n	8002cf4 <_printf_common+0xa8>
 8002d26:	3701      	adds	r7, #1
 8002d28:	e7d1      	b.n	8002cce <_printf_common+0x82>
	...

08002d2c <_printf_i>:
 8002d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d2e:	b08b      	sub	sp, #44	; 0x2c
 8002d30:	9206      	str	r2, [sp, #24]
 8002d32:	000a      	movs	r2, r1
 8002d34:	3243      	adds	r2, #67	; 0x43
 8002d36:	9307      	str	r3, [sp, #28]
 8002d38:	9005      	str	r0, [sp, #20]
 8002d3a:	9204      	str	r2, [sp, #16]
 8002d3c:	7e0a      	ldrb	r2, [r1, #24]
 8002d3e:	000c      	movs	r4, r1
 8002d40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002d42:	2a78      	cmp	r2, #120	; 0x78
 8002d44:	d807      	bhi.n	8002d56 <_printf_i+0x2a>
 8002d46:	2a62      	cmp	r2, #98	; 0x62
 8002d48:	d809      	bhi.n	8002d5e <_printf_i+0x32>
 8002d4a:	2a00      	cmp	r2, #0
 8002d4c:	d100      	bne.n	8002d50 <_printf_i+0x24>
 8002d4e:	e0c1      	b.n	8002ed4 <_printf_i+0x1a8>
 8002d50:	2a58      	cmp	r2, #88	; 0x58
 8002d52:	d100      	bne.n	8002d56 <_printf_i+0x2a>
 8002d54:	e08c      	b.n	8002e70 <_printf_i+0x144>
 8002d56:	0026      	movs	r6, r4
 8002d58:	3642      	adds	r6, #66	; 0x42
 8002d5a:	7032      	strb	r2, [r6, #0]
 8002d5c:	e022      	b.n	8002da4 <_printf_i+0x78>
 8002d5e:	0010      	movs	r0, r2
 8002d60:	3863      	subs	r0, #99	; 0x63
 8002d62:	2815      	cmp	r0, #21
 8002d64:	d8f7      	bhi.n	8002d56 <_printf_i+0x2a>
 8002d66:	f7fd f9e1 	bl	800012c <__gnu_thumb1_case_shi>
 8002d6a:	0016      	.short	0x0016
 8002d6c:	fff6001f 	.word	0xfff6001f
 8002d70:	fff6fff6 	.word	0xfff6fff6
 8002d74:	001ffff6 	.word	0x001ffff6
 8002d78:	fff6fff6 	.word	0xfff6fff6
 8002d7c:	fff6fff6 	.word	0xfff6fff6
 8002d80:	003600a8 	.word	0x003600a8
 8002d84:	fff6009a 	.word	0xfff6009a
 8002d88:	00b9fff6 	.word	0x00b9fff6
 8002d8c:	0036fff6 	.word	0x0036fff6
 8002d90:	fff6fff6 	.word	0xfff6fff6
 8002d94:	009e      	.short	0x009e
 8002d96:	0026      	movs	r6, r4
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	3642      	adds	r6, #66	; 0x42
 8002d9c:	1d11      	adds	r1, r2, #4
 8002d9e:	6019      	str	r1, [r3, #0]
 8002da0:	6813      	ldr	r3, [r2, #0]
 8002da2:	7033      	strb	r3, [r6, #0]
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0a7      	b.n	8002ef8 <_printf_i+0x1cc>
 8002da8:	6808      	ldr	r0, [r1, #0]
 8002daa:	6819      	ldr	r1, [r3, #0]
 8002dac:	1d0a      	adds	r2, r1, #4
 8002dae:	0605      	lsls	r5, r0, #24
 8002db0:	d50b      	bpl.n	8002dca <_printf_i+0x9e>
 8002db2:	680d      	ldr	r5, [r1, #0]
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	2d00      	cmp	r5, #0
 8002db8:	da03      	bge.n	8002dc2 <_printf_i+0x96>
 8002dba:	232d      	movs	r3, #45	; 0x2d
 8002dbc:	9a04      	ldr	r2, [sp, #16]
 8002dbe:	426d      	negs	r5, r5
 8002dc0:	7013      	strb	r3, [r2, #0]
 8002dc2:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <_printf_i+0x21c>)
 8002dc4:	270a      	movs	r7, #10
 8002dc6:	9303      	str	r3, [sp, #12]
 8002dc8:	e01b      	b.n	8002e02 <_printf_i+0xd6>
 8002dca:	680d      	ldr	r5, [r1, #0]
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	0641      	lsls	r1, r0, #25
 8002dd0:	d5f1      	bpl.n	8002db6 <_printf_i+0x8a>
 8002dd2:	b22d      	sxth	r5, r5
 8002dd4:	e7ef      	b.n	8002db6 <_printf_i+0x8a>
 8002dd6:	680d      	ldr	r5, [r1, #0]
 8002dd8:	6819      	ldr	r1, [r3, #0]
 8002dda:	1d08      	adds	r0, r1, #4
 8002ddc:	6018      	str	r0, [r3, #0]
 8002dde:	062e      	lsls	r6, r5, #24
 8002de0:	d501      	bpl.n	8002de6 <_printf_i+0xba>
 8002de2:	680d      	ldr	r5, [r1, #0]
 8002de4:	e003      	b.n	8002dee <_printf_i+0xc2>
 8002de6:	066d      	lsls	r5, r5, #25
 8002de8:	d5fb      	bpl.n	8002de2 <_printf_i+0xb6>
 8002dea:	680d      	ldr	r5, [r1, #0]
 8002dec:	b2ad      	uxth	r5, r5
 8002dee:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <_printf_i+0x21c>)
 8002df0:	2708      	movs	r7, #8
 8002df2:	9303      	str	r3, [sp, #12]
 8002df4:	2a6f      	cmp	r2, #111	; 0x6f
 8002df6:	d000      	beq.n	8002dfa <_printf_i+0xce>
 8002df8:	3702      	adds	r7, #2
 8002dfa:	0023      	movs	r3, r4
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	3343      	adds	r3, #67	; 0x43
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	6863      	ldr	r3, [r4, #4]
 8002e04:	60a3      	str	r3, [r4, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db03      	blt.n	8002e12 <_printf_i+0xe6>
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	6821      	ldr	r1, [r4, #0]
 8002e0e:	4391      	bics	r1, r2
 8002e10:	6021      	str	r1, [r4, #0]
 8002e12:	2d00      	cmp	r5, #0
 8002e14:	d102      	bne.n	8002e1c <_printf_i+0xf0>
 8002e16:	9e04      	ldr	r6, [sp, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00c      	beq.n	8002e36 <_printf_i+0x10a>
 8002e1c:	9e04      	ldr	r6, [sp, #16]
 8002e1e:	0028      	movs	r0, r5
 8002e20:	0039      	movs	r1, r7
 8002e22:	f7fd fa13 	bl	800024c <__aeabi_uidivmod>
 8002e26:	9b03      	ldr	r3, [sp, #12]
 8002e28:	3e01      	subs	r6, #1
 8002e2a:	5c5b      	ldrb	r3, [r3, r1]
 8002e2c:	7033      	strb	r3, [r6, #0]
 8002e2e:	002b      	movs	r3, r5
 8002e30:	0005      	movs	r5, r0
 8002e32:	429f      	cmp	r7, r3
 8002e34:	d9f3      	bls.n	8002e1e <_printf_i+0xf2>
 8002e36:	2f08      	cmp	r7, #8
 8002e38:	d109      	bne.n	8002e4e <_printf_i+0x122>
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	07db      	lsls	r3, r3, #31
 8002e3e:	d506      	bpl.n	8002e4e <_printf_i+0x122>
 8002e40:	6863      	ldr	r3, [r4, #4]
 8002e42:	6922      	ldr	r2, [r4, #16]
 8002e44:	4293      	cmp	r3, r2
 8002e46:	dc02      	bgt.n	8002e4e <_printf_i+0x122>
 8002e48:	2330      	movs	r3, #48	; 0x30
 8002e4a:	3e01      	subs	r6, #1
 8002e4c:	7033      	strb	r3, [r6, #0]
 8002e4e:	9b04      	ldr	r3, [sp, #16]
 8002e50:	1b9b      	subs	r3, r3, r6
 8002e52:	6123      	str	r3, [r4, #16]
 8002e54:	9b07      	ldr	r3, [sp, #28]
 8002e56:	0021      	movs	r1, r4
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	9805      	ldr	r0, [sp, #20]
 8002e5c:	9b06      	ldr	r3, [sp, #24]
 8002e5e:	aa09      	add	r2, sp, #36	; 0x24
 8002e60:	f7ff fef4 	bl	8002c4c <_printf_common>
 8002e64:	1c43      	adds	r3, r0, #1
 8002e66:	d14c      	bne.n	8002f02 <_printf_i+0x1d6>
 8002e68:	2001      	movs	r0, #1
 8002e6a:	4240      	negs	r0, r0
 8002e6c:	b00b      	add	sp, #44	; 0x2c
 8002e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e70:	3145      	adds	r1, #69	; 0x45
 8002e72:	700a      	strb	r2, [r1, #0]
 8002e74:	4a34      	ldr	r2, [pc, #208]	; (8002f48 <_printf_i+0x21c>)
 8002e76:	9203      	str	r2, [sp, #12]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	6821      	ldr	r1, [r4, #0]
 8002e7c:	ca20      	ldmia	r2!, {r5}
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	0608      	lsls	r0, r1, #24
 8002e82:	d516      	bpl.n	8002eb2 <_printf_i+0x186>
 8002e84:	07cb      	lsls	r3, r1, #31
 8002e86:	d502      	bpl.n	8002e8e <_printf_i+0x162>
 8002e88:	2320      	movs	r3, #32
 8002e8a:	4319      	orrs	r1, r3
 8002e8c:	6021      	str	r1, [r4, #0]
 8002e8e:	2710      	movs	r7, #16
 8002e90:	2d00      	cmp	r5, #0
 8002e92:	d1b2      	bne.n	8002dfa <_printf_i+0xce>
 8002e94:	2320      	movs	r3, #32
 8002e96:	6822      	ldr	r2, [r4, #0]
 8002e98:	439a      	bics	r2, r3
 8002e9a:	6022      	str	r2, [r4, #0]
 8002e9c:	e7ad      	b.n	8002dfa <_printf_i+0xce>
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	6809      	ldr	r1, [r1, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	6022      	str	r2, [r4, #0]
 8002ea6:	0022      	movs	r2, r4
 8002ea8:	2178      	movs	r1, #120	; 0x78
 8002eaa:	3245      	adds	r2, #69	; 0x45
 8002eac:	7011      	strb	r1, [r2, #0]
 8002eae:	4a27      	ldr	r2, [pc, #156]	; (8002f4c <_printf_i+0x220>)
 8002eb0:	e7e1      	b.n	8002e76 <_printf_i+0x14a>
 8002eb2:	0648      	lsls	r0, r1, #25
 8002eb4:	d5e6      	bpl.n	8002e84 <_printf_i+0x158>
 8002eb6:	b2ad      	uxth	r5, r5
 8002eb8:	e7e4      	b.n	8002e84 <_printf_i+0x158>
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	680d      	ldr	r5, [r1, #0]
 8002ebe:	1d10      	adds	r0, r2, #4
 8002ec0:	6949      	ldr	r1, [r1, #20]
 8002ec2:	6018      	str	r0, [r3, #0]
 8002ec4:	6813      	ldr	r3, [r2, #0]
 8002ec6:	062e      	lsls	r6, r5, #24
 8002ec8:	d501      	bpl.n	8002ece <_printf_i+0x1a2>
 8002eca:	6019      	str	r1, [r3, #0]
 8002ecc:	e002      	b.n	8002ed4 <_printf_i+0x1a8>
 8002ece:	066d      	lsls	r5, r5, #25
 8002ed0:	d5fb      	bpl.n	8002eca <_printf_i+0x19e>
 8002ed2:	8019      	strh	r1, [r3, #0]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9e04      	ldr	r6, [sp, #16]
 8002ed8:	6123      	str	r3, [r4, #16]
 8002eda:	e7bb      	b.n	8002e54 <_printf_i+0x128>
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	1d11      	adds	r1, r2, #4
 8002ee0:	6019      	str	r1, [r3, #0]
 8002ee2:	6816      	ldr	r6, [r2, #0]
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	0030      	movs	r0, r6
 8002ee8:	6862      	ldr	r2, [r4, #4]
 8002eea:	f000 f831 	bl	8002f50 <memchr>
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d001      	beq.n	8002ef6 <_printf_i+0x1ca>
 8002ef2:	1b80      	subs	r0, r0, r6
 8002ef4:	6060      	str	r0, [r4, #4]
 8002ef6:	6863      	ldr	r3, [r4, #4]
 8002ef8:	6123      	str	r3, [r4, #16]
 8002efa:	2300      	movs	r3, #0
 8002efc:	9a04      	ldr	r2, [sp, #16]
 8002efe:	7013      	strb	r3, [r2, #0]
 8002f00:	e7a8      	b.n	8002e54 <_printf_i+0x128>
 8002f02:	6923      	ldr	r3, [r4, #16]
 8002f04:	0032      	movs	r2, r6
 8002f06:	9906      	ldr	r1, [sp, #24]
 8002f08:	9805      	ldr	r0, [sp, #20]
 8002f0a:	9d07      	ldr	r5, [sp, #28]
 8002f0c:	47a8      	blx	r5
 8002f0e:	1c43      	adds	r3, r0, #1
 8002f10:	d0aa      	beq.n	8002e68 <_printf_i+0x13c>
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	079b      	lsls	r3, r3, #30
 8002f16:	d415      	bmi.n	8002f44 <_printf_i+0x218>
 8002f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f1a:	68e0      	ldr	r0, [r4, #12]
 8002f1c:	4298      	cmp	r0, r3
 8002f1e:	daa5      	bge.n	8002e6c <_printf_i+0x140>
 8002f20:	0018      	movs	r0, r3
 8002f22:	e7a3      	b.n	8002e6c <_printf_i+0x140>
 8002f24:	0022      	movs	r2, r4
 8002f26:	2301      	movs	r3, #1
 8002f28:	9906      	ldr	r1, [sp, #24]
 8002f2a:	9805      	ldr	r0, [sp, #20]
 8002f2c:	9e07      	ldr	r6, [sp, #28]
 8002f2e:	3219      	adds	r2, #25
 8002f30:	47b0      	blx	r6
 8002f32:	1c43      	adds	r3, r0, #1
 8002f34:	d098      	beq.n	8002e68 <_printf_i+0x13c>
 8002f36:	3501      	adds	r5, #1
 8002f38:	68e3      	ldr	r3, [r4, #12]
 8002f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	42ab      	cmp	r3, r5
 8002f40:	dcf0      	bgt.n	8002f24 <_printf_i+0x1f8>
 8002f42:	e7e9      	b.n	8002f18 <_printf_i+0x1ec>
 8002f44:	2500      	movs	r5, #0
 8002f46:	e7f7      	b.n	8002f38 <_printf_i+0x20c>
 8002f48:	08003d69 	.word	0x08003d69
 8002f4c:	08003d7a 	.word	0x08003d7a

08002f50 <memchr>:
 8002f50:	b2c9      	uxtb	r1, r1
 8002f52:	1882      	adds	r2, r0, r2
 8002f54:	4290      	cmp	r0, r2
 8002f56:	d101      	bne.n	8002f5c <memchr+0xc>
 8002f58:	2000      	movs	r0, #0
 8002f5a:	4770      	bx	lr
 8002f5c:	7803      	ldrb	r3, [r0, #0]
 8002f5e:	428b      	cmp	r3, r1
 8002f60:	d0fb      	beq.n	8002f5a <memchr+0xa>
 8002f62:	3001      	adds	r0, #1
 8002f64:	e7f6      	b.n	8002f54 <memchr+0x4>

08002f66 <memmove>:
 8002f66:	b510      	push	{r4, lr}
 8002f68:	4288      	cmp	r0, r1
 8002f6a:	d902      	bls.n	8002f72 <memmove+0xc>
 8002f6c:	188b      	adds	r3, r1, r2
 8002f6e:	4298      	cmp	r0, r3
 8002f70:	d303      	bcc.n	8002f7a <memmove+0x14>
 8002f72:	2300      	movs	r3, #0
 8002f74:	e007      	b.n	8002f86 <memmove+0x20>
 8002f76:	5c8b      	ldrb	r3, [r1, r2]
 8002f78:	5483      	strb	r3, [r0, r2]
 8002f7a:	3a01      	subs	r2, #1
 8002f7c:	d2fb      	bcs.n	8002f76 <memmove+0x10>
 8002f7e:	bd10      	pop	{r4, pc}
 8002f80:	5ccc      	ldrb	r4, [r1, r3]
 8002f82:	54c4      	strb	r4, [r0, r3]
 8002f84:	3301      	adds	r3, #1
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d1fa      	bne.n	8002f80 <memmove+0x1a>
 8002f8a:	e7f8      	b.n	8002f7e <memmove+0x18>

08002f8c <_free_r>:
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	0005      	movs	r5, r0
 8002f90:	2900      	cmp	r1, #0
 8002f92:	d010      	beq.n	8002fb6 <_free_r+0x2a>
 8002f94:	1f0c      	subs	r4, r1, #4
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	da00      	bge.n	8002f9e <_free_r+0x12>
 8002f9c:	18e4      	adds	r4, r4, r3
 8002f9e:	0028      	movs	r0, r5
 8002fa0:	f000 f918 	bl	80031d4 <__malloc_lock>
 8002fa4:	4a1d      	ldr	r2, [pc, #116]	; (800301c <_free_r+0x90>)
 8002fa6:	6813      	ldr	r3, [r2, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <_free_r+0x2c>
 8002fac:	6063      	str	r3, [r4, #4]
 8002fae:	6014      	str	r4, [r2, #0]
 8002fb0:	0028      	movs	r0, r5
 8002fb2:	f000 f917 	bl	80031e4 <__malloc_unlock>
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	42a3      	cmp	r3, r4
 8002fba:	d908      	bls.n	8002fce <_free_r+0x42>
 8002fbc:	6821      	ldr	r1, [r4, #0]
 8002fbe:	1860      	adds	r0, r4, r1
 8002fc0:	4283      	cmp	r3, r0
 8002fc2:	d1f3      	bne.n	8002fac <_free_r+0x20>
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	1841      	adds	r1, r0, r1
 8002fca:	6021      	str	r1, [r4, #0]
 8002fcc:	e7ee      	b.n	8002fac <_free_r+0x20>
 8002fce:	001a      	movs	r2, r3
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <_free_r+0x4e>
 8002fd6:	42a3      	cmp	r3, r4
 8002fd8:	d9f9      	bls.n	8002fce <_free_r+0x42>
 8002fda:	6811      	ldr	r1, [r2, #0]
 8002fdc:	1850      	adds	r0, r2, r1
 8002fde:	42a0      	cmp	r0, r4
 8002fe0:	d10b      	bne.n	8002ffa <_free_r+0x6e>
 8002fe2:	6820      	ldr	r0, [r4, #0]
 8002fe4:	1809      	adds	r1, r1, r0
 8002fe6:	1850      	adds	r0, r2, r1
 8002fe8:	6011      	str	r1, [r2, #0]
 8002fea:	4283      	cmp	r3, r0
 8002fec:	d1e0      	bne.n	8002fb0 <_free_r+0x24>
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	1841      	adds	r1, r0, r1
 8002ff4:	6011      	str	r1, [r2, #0]
 8002ff6:	6053      	str	r3, [r2, #4]
 8002ff8:	e7da      	b.n	8002fb0 <_free_r+0x24>
 8002ffa:	42a0      	cmp	r0, r4
 8002ffc:	d902      	bls.n	8003004 <_free_r+0x78>
 8002ffe:	230c      	movs	r3, #12
 8003000:	602b      	str	r3, [r5, #0]
 8003002:	e7d5      	b.n	8002fb0 <_free_r+0x24>
 8003004:	6821      	ldr	r1, [r4, #0]
 8003006:	1860      	adds	r0, r4, r1
 8003008:	4283      	cmp	r3, r0
 800300a:	d103      	bne.n	8003014 <_free_r+0x88>
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	1841      	adds	r1, r0, r1
 8003012:	6021      	str	r1, [r4, #0]
 8003014:	6063      	str	r3, [r4, #4]
 8003016:	6054      	str	r4, [r2, #4]
 8003018:	e7ca      	b.n	8002fb0 <_free_r+0x24>
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	200002b4 	.word	0x200002b4

08003020 <sbrk_aligned>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	4e0f      	ldr	r6, [pc, #60]	; (8003060 <sbrk_aligned+0x40>)
 8003024:	000d      	movs	r5, r1
 8003026:	6831      	ldr	r1, [r6, #0]
 8003028:	0004      	movs	r4, r0
 800302a:	2900      	cmp	r1, #0
 800302c:	d102      	bne.n	8003034 <sbrk_aligned+0x14>
 800302e:	f000 f8bf 	bl	80031b0 <_sbrk_r>
 8003032:	6030      	str	r0, [r6, #0]
 8003034:	0029      	movs	r1, r5
 8003036:	0020      	movs	r0, r4
 8003038:	f000 f8ba 	bl	80031b0 <_sbrk_r>
 800303c:	1c43      	adds	r3, r0, #1
 800303e:	d00a      	beq.n	8003056 <sbrk_aligned+0x36>
 8003040:	2303      	movs	r3, #3
 8003042:	1cc5      	adds	r5, r0, #3
 8003044:	439d      	bics	r5, r3
 8003046:	42a8      	cmp	r0, r5
 8003048:	d007      	beq.n	800305a <sbrk_aligned+0x3a>
 800304a:	1a29      	subs	r1, r5, r0
 800304c:	0020      	movs	r0, r4
 800304e:	f000 f8af 	bl	80031b0 <_sbrk_r>
 8003052:	1c43      	adds	r3, r0, #1
 8003054:	d101      	bne.n	800305a <sbrk_aligned+0x3a>
 8003056:	2501      	movs	r5, #1
 8003058:	426d      	negs	r5, r5
 800305a:	0028      	movs	r0, r5
 800305c:	bd70      	pop	{r4, r5, r6, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	200002b8 	.word	0x200002b8

08003064 <_malloc_r>:
 8003064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003066:	2203      	movs	r2, #3
 8003068:	1ccb      	adds	r3, r1, #3
 800306a:	4393      	bics	r3, r2
 800306c:	3308      	adds	r3, #8
 800306e:	0006      	movs	r6, r0
 8003070:	001f      	movs	r7, r3
 8003072:	2b0c      	cmp	r3, #12
 8003074:	d232      	bcs.n	80030dc <_malloc_r+0x78>
 8003076:	270c      	movs	r7, #12
 8003078:	42b9      	cmp	r1, r7
 800307a:	d831      	bhi.n	80030e0 <_malloc_r+0x7c>
 800307c:	0030      	movs	r0, r6
 800307e:	f000 f8a9 	bl	80031d4 <__malloc_lock>
 8003082:	4d32      	ldr	r5, [pc, #200]	; (800314c <_malloc_r+0xe8>)
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	001c      	movs	r4, r3
 8003088:	2c00      	cmp	r4, #0
 800308a:	d12e      	bne.n	80030ea <_malloc_r+0x86>
 800308c:	0039      	movs	r1, r7
 800308e:	0030      	movs	r0, r6
 8003090:	f7ff ffc6 	bl	8003020 <sbrk_aligned>
 8003094:	0004      	movs	r4, r0
 8003096:	1c43      	adds	r3, r0, #1
 8003098:	d11e      	bne.n	80030d8 <_malloc_r+0x74>
 800309a:	682c      	ldr	r4, [r5, #0]
 800309c:	0025      	movs	r5, r4
 800309e:	2d00      	cmp	r5, #0
 80030a0:	d14a      	bne.n	8003138 <_malloc_r+0xd4>
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	0029      	movs	r1, r5
 80030a6:	18e3      	adds	r3, r4, r3
 80030a8:	0030      	movs	r0, r6
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	f000 f880 	bl	80031b0 <_sbrk_r>
 80030b0:	9b01      	ldr	r3, [sp, #4]
 80030b2:	4283      	cmp	r3, r0
 80030b4:	d143      	bne.n	800313e <_malloc_r+0xda>
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	3703      	adds	r7, #3
 80030ba:	1aff      	subs	r7, r7, r3
 80030bc:	2303      	movs	r3, #3
 80030be:	439f      	bics	r7, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	2f0c      	cmp	r7, #12
 80030c4:	d200      	bcs.n	80030c8 <_malloc_r+0x64>
 80030c6:	270c      	movs	r7, #12
 80030c8:	0039      	movs	r1, r7
 80030ca:	0030      	movs	r0, r6
 80030cc:	f7ff ffa8 	bl	8003020 <sbrk_aligned>
 80030d0:	1c43      	adds	r3, r0, #1
 80030d2:	d034      	beq.n	800313e <_malloc_r+0xda>
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	19df      	adds	r7, r3, r7
 80030d8:	6027      	str	r7, [r4, #0]
 80030da:	e013      	b.n	8003104 <_malloc_r+0xa0>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	dacb      	bge.n	8003078 <_malloc_r+0x14>
 80030e0:	230c      	movs	r3, #12
 80030e2:	2500      	movs	r5, #0
 80030e4:	6033      	str	r3, [r6, #0]
 80030e6:	0028      	movs	r0, r5
 80030e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80030ea:	6822      	ldr	r2, [r4, #0]
 80030ec:	1bd1      	subs	r1, r2, r7
 80030ee:	d420      	bmi.n	8003132 <_malloc_r+0xce>
 80030f0:	290b      	cmp	r1, #11
 80030f2:	d917      	bls.n	8003124 <_malloc_r+0xc0>
 80030f4:	19e2      	adds	r2, r4, r7
 80030f6:	6027      	str	r7, [r4, #0]
 80030f8:	42a3      	cmp	r3, r4
 80030fa:	d111      	bne.n	8003120 <_malloc_r+0xbc>
 80030fc:	602a      	str	r2, [r5, #0]
 80030fe:	6863      	ldr	r3, [r4, #4]
 8003100:	6011      	str	r1, [r2, #0]
 8003102:	6053      	str	r3, [r2, #4]
 8003104:	0030      	movs	r0, r6
 8003106:	0025      	movs	r5, r4
 8003108:	f000 f86c 	bl	80031e4 <__malloc_unlock>
 800310c:	2207      	movs	r2, #7
 800310e:	350b      	adds	r5, #11
 8003110:	1d23      	adds	r3, r4, #4
 8003112:	4395      	bics	r5, r2
 8003114:	1aea      	subs	r2, r5, r3
 8003116:	429d      	cmp	r5, r3
 8003118:	d0e5      	beq.n	80030e6 <_malloc_r+0x82>
 800311a:	1b5b      	subs	r3, r3, r5
 800311c:	50a3      	str	r3, [r4, r2]
 800311e:	e7e2      	b.n	80030e6 <_malloc_r+0x82>
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	e7ec      	b.n	80030fe <_malloc_r+0x9a>
 8003124:	6862      	ldr	r2, [r4, #4]
 8003126:	42a3      	cmp	r3, r4
 8003128:	d101      	bne.n	800312e <_malloc_r+0xca>
 800312a:	602a      	str	r2, [r5, #0]
 800312c:	e7ea      	b.n	8003104 <_malloc_r+0xa0>
 800312e:	605a      	str	r2, [r3, #4]
 8003130:	e7e8      	b.n	8003104 <_malloc_r+0xa0>
 8003132:	0023      	movs	r3, r4
 8003134:	6864      	ldr	r4, [r4, #4]
 8003136:	e7a7      	b.n	8003088 <_malloc_r+0x24>
 8003138:	002c      	movs	r4, r5
 800313a:	686d      	ldr	r5, [r5, #4]
 800313c:	e7af      	b.n	800309e <_malloc_r+0x3a>
 800313e:	230c      	movs	r3, #12
 8003140:	0030      	movs	r0, r6
 8003142:	6033      	str	r3, [r6, #0]
 8003144:	f000 f84e 	bl	80031e4 <__malloc_unlock>
 8003148:	e7cd      	b.n	80030e6 <_malloc_r+0x82>
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	200002b4 	.word	0x200002b4

08003150 <_realloc_r>:
 8003150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003152:	0007      	movs	r7, r0
 8003154:	000e      	movs	r6, r1
 8003156:	0014      	movs	r4, r2
 8003158:	2900      	cmp	r1, #0
 800315a:	d105      	bne.n	8003168 <_realloc_r+0x18>
 800315c:	0011      	movs	r1, r2
 800315e:	f7ff ff81 	bl	8003064 <_malloc_r>
 8003162:	0005      	movs	r5, r0
 8003164:	0028      	movs	r0, r5
 8003166:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003168:	2a00      	cmp	r2, #0
 800316a:	d103      	bne.n	8003174 <_realloc_r+0x24>
 800316c:	f7ff ff0e 	bl	8002f8c <_free_r>
 8003170:	0025      	movs	r5, r4
 8003172:	e7f7      	b.n	8003164 <_realloc_r+0x14>
 8003174:	f000 f83e 	bl	80031f4 <_malloc_usable_size_r>
 8003178:	9001      	str	r0, [sp, #4]
 800317a:	4284      	cmp	r4, r0
 800317c:	d803      	bhi.n	8003186 <_realloc_r+0x36>
 800317e:	0035      	movs	r5, r6
 8003180:	0843      	lsrs	r3, r0, #1
 8003182:	42a3      	cmp	r3, r4
 8003184:	d3ee      	bcc.n	8003164 <_realloc_r+0x14>
 8003186:	0021      	movs	r1, r4
 8003188:	0038      	movs	r0, r7
 800318a:	f7ff ff6b 	bl	8003064 <_malloc_r>
 800318e:	1e05      	subs	r5, r0, #0
 8003190:	d0e8      	beq.n	8003164 <_realloc_r+0x14>
 8003192:	9b01      	ldr	r3, [sp, #4]
 8003194:	0022      	movs	r2, r4
 8003196:	429c      	cmp	r4, r3
 8003198:	d900      	bls.n	800319c <_realloc_r+0x4c>
 800319a:	001a      	movs	r2, r3
 800319c:	0031      	movs	r1, r6
 800319e:	0028      	movs	r0, r5
 80031a0:	f7ff fbb2 	bl	8002908 <memcpy>
 80031a4:	0031      	movs	r1, r6
 80031a6:	0038      	movs	r0, r7
 80031a8:	f7ff fef0 	bl	8002f8c <_free_r>
 80031ac:	e7da      	b.n	8003164 <_realloc_r+0x14>
	...

080031b0 <_sbrk_r>:
 80031b0:	2300      	movs	r3, #0
 80031b2:	b570      	push	{r4, r5, r6, lr}
 80031b4:	4d06      	ldr	r5, [pc, #24]	; (80031d0 <_sbrk_r+0x20>)
 80031b6:	0004      	movs	r4, r0
 80031b8:	0008      	movs	r0, r1
 80031ba:	602b      	str	r3, [r5, #0]
 80031bc:	f7fe f916 	bl	80013ec <_sbrk>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	d103      	bne.n	80031cc <_sbrk_r+0x1c>
 80031c4:	682b      	ldr	r3, [r5, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d000      	beq.n	80031cc <_sbrk_r+0x1c>
 80031ca:	6023      	str	r3, [r4, #0]
 80031cc:	bd70      	pop	{r4, r5, r6, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	200002bc 	.word	0x200002bc

080031d4 <__malloc_lock>:
 80031d4:	b510      	push	{r4, lr}
 80031d6:	4802      	ldr	r0, [pc, #8]	; (80031e0 <__malloc_lock+0xc>)
 80031d8:	f000 f814 	bl	8003204 <__retarget_lock_acquire_recursive>
 80031dc:	bd10      	pop	{r4, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	200002c0 	.word	0x200002c0

080031e4 <__malloc_unlock>:
 80031e4:	b510      	push	{r4, lr}
 80031e6:	4802      	ldr	r0, [pc, #8]	; (80031f0 <__malloc_unlock+0xc>)
 80031e8:	f000 f80d 	bl	8003206 <__retarget_lock_release_recursive>
 80031ec:	bd10      	pop	{r4, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	200002c0 	.word	0x200002c0

080031f4 <_malloc_usable_size_r>:
 80031f4:	1f0b      	subs	r3, r1, #4
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	1f18      	subs	r0, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	da01      	bge.n	8003202 <_malloc_usable_size_r+0xe>
 80031fe:	580b      	ldr	r3, [r1, r0]
 8003200:	18c0      	adds	r0, r0, r3
 8003202:	4770      	bx	lr

08003204 <__retarget_lock_acquire_recursive>:
 8003204:	4770      	bx	lr

08003206 <__retarget_lock_release_recursive>:
 8003206:	4770      	bx	lr

08003208 <_init>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320e:	bc08      	pop	{r3}
 8003210:	469e      	mov	lr, r3
 8003212:	4770      	bx	lr

08003214 <_fini>:
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321a:	bc08      	pop	{r3}
 800321c:	469e      	mov	lr, r3
 800321e:	4770      	bx	lr
